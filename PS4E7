{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d73511a8",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-07-12T08:46:13.808403Z",
     "iopub.status.busy": "2024-07-12T08:46:13.807919Z",
     "iopub.status.idle": "2024-07-12T08:46:17.846074Z",
     "shell.execute_reply": "2024-07-12T08:46:17.844844Z"
    },
    "papermill": {
     "duration": 4.059145,
     "end_time": "2024-07-12T08:46:17.849132",
     "exception": false,
     "start_time": "2024-07-12T08:46:13.789987",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from tqdm import tqdm\n",
    "import progressbar\n",
    "import math\n",
    "import warnings\n",
    "import itertools\n",
    "import plotly.express as px\n",
    "\n",
    "from sklearn.model_selection import train_test_split,GridSearchCV\n",
    "\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.ensemble import RandomForestClassifier, VotingClassifier, AdaBoostClassifier, GradientBoostingClassifier\n",
    "from sklearn.metrics import classification_report,accuracy_score\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "038f50fe",
   "metadata": {
    "papermill": {
     "duration": 0.01531,
     "end_time": "2024-07-12T08:46:17.880360",
     "exception": false,
     "start_time": "2024-07-12T08:46:17.865050",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Getting started"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "25a22b44",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T08:46:17.915931Z",
     "iopub.status.busy": "2024-07-12T08:46:17.915270Z",
     "iopub.status.idle": "2024-07-12T08:46:42.635981Z",
     "shell.execute_reply": "2024-07-12T08:46:42.634630Z"
    },
    "papermill": {
     "duration": 24.74214,
     "end_time": "2024-07-12T08:46:42.639078",
     "exception": false,
     "start_time": "2024-07-12T08:46:17.896938",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv('/kaggle/input/playground-series-s4e7/train.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "098e9b9b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T08:46:42.673369Z",
     "iopub.status.busy": "2024-07-12T08:46:42.672964Z",
     "iopub.status.idle": "2024-07-12T08:46:42.712714Z",
     "shell.execute_reply": "2024-07-12T08:46:42.711567Z"
    },
    "papermill": {
     "duration": 0.05987,
     "end_time": "2024-07-12T08:46:42.715585",
     "exception": false,
     "start_time": "2024-07-12T08:46:42.655715",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Driving_License</th>\n",
       "      <th>Region_Code</th>\n",
       "      <th>Previously_Insured</th>\n",
       "      <th>Vehicle_Age</th>\n",
       "      <th>Vehicle_Damage</th>\n",
       "      <th>Annual_Premium</th>\n",
       "      <th>Policy_Sales_Channel</th>\n",
       "      <th>Vintage</th>\n",
       "      <th>Response</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1-2 Year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>65101.0</td>\n",
       "      <td>124.0</td>\n",
       "      <td>187</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>Male</td>\n",
       "      <td>43</td>\n",
       "      <td>1</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>&gt; 2 Years</td>\n",
       "      <td>Yes</td>\n",
       "      <td>58911.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>288</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>Female</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>14.0</td>\n",
       "      <td>1</td>\n",
       "      <td>&lt; 1 Year</td>\n",
       "      <td>No</td>\n",
       "      <td>38043.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>254</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>Female</td>\n",
       "      <td>35</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1-2 Year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>2630.0</td>\n",
       "      <td>156.0</td>\n",
       "      <td>76</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>Female</td>\n",
       "      <td>36</td>\n",
       "      <td>1</td>\n",
       "      <td>15.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1-2 Year</td>\n",
       "      <td>No</td>\n",
       "      <td>31951.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>294</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11504793</th>\n",
       "      <td>11504793</td>\n",
       "      <td>Male</td>\n",
       "      <td>48</td>\n",
       "      <td>1</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1-2 Year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>27412.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>218</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11504794</th>\n",
       "      <td>11504794</td>\n",
       "      <td>Female</td>\n",
       "      <td>26</td>\n",
       "      <td>1</td>\n",
       "      <td>36.0</td>\n",
       "      <td>0</td>\n",
       "      <td>&lt; 1 Year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>29509.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>115</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11504795</th>\n",
       "      <td>11504795</td>\n",
       "      <td>Female</td>\n",
       "      <td>29</td>\n",
       "      <td>1</td>\n",
       "      <td>32.0</td>\n",
       "      <td>1</td>\n",
       "      <td>&lt; 1 Year</td>\n",
       "      <td>No</td>\n",
       "      <td>2630.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>189</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11504796</th>\n",
       "      <td>11504796</td>\n",
       "      <td>Female</td>\n",
       "      <td>51</td>\n",
       "      <td>1</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1-2 Year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>48443.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>274</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11504797</th>\n",
       "      <td>11504797</td>\n",
       "      <td>Male</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>28.0</td>\n",
       "      <td>1</td>\n",
       "      <td>&lt; 1 Year</td>\n",
       "      <td>No</td>\n",
       "      <td>32855.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>189</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>11504798 rows Ã— 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                id  Gender  Age  Driving_License  Region_Code  \\\n",
       "0                0    Male   21                1         35.0   \n",
       "1                1    Male   43                1         28.0   \n",
       "2                2  Female   25                1         14.0   \n",
       "3                3  Female   35                1          1.0   \n",
       "4                4  Female   36                1         15.0   \n",
       "...            ...     ...  ...              ...          ...   \n",
       "11504793  11504793    Male   48                1          6.0   \n",
       "11504794  11504794  Female   26                1         36.0   \n",
       "11504795  11504795  Female   29                1         32.0   \n",
       "11504796  11504796  Female   51                1         28.0   \n",
       "11504797  11504797    Male   25                1         28.0   \n",
       "\n",
       "          Previously_Insured Vehicle_Age Vehicle_Damage  Annual_Premium  \\\n",
       "0                          0    1-2 Year            Yes         65101.0   \n",
       "1                          0   > 2 Years            Yes         58911.0   \n",
       "2                          1    < 1 Year             No         38043.0   \n",
       "3                          0    1-2 Year            Yes          2630.0   \n",
       "4                          1    1-2 Year             No         31951.0   \n",
       "...                      ...         ...            ...             ...   \n",
       "11504793                   0    1-2 Year            Yes         27412.0   \n",
       "11504794                   0    < 1 Year            Yes         29509.0   \n",
       "11504795                   1    < 1 Year             No          2630.0   \n",
       "11504796                   0    1-2 Year            Yes         48443.0   \n",
       "11504797                   1    < 1 Year             No         32855.0   \n",
       "\n",
       "          Policy_Sales_Channel  Vintage  Response  \n",
       "0                        124.0      187         0  \n",
       "1                         26.0      288         1  \n",
       "2                        152.0      254         0  \n",
       "3                        156.0       76         0  \n",
       "4                        152.0      294         0  \n",
       "...                        ...      ...       ...  \n",
       "11504793                  26.0      218         0  \n",
       "11504794                 152.0      115         1  \n",
       "11504795                 152.0      189         0  \n",
       "11504796                  26.0      274         1  \n",
       "11504797                 152.0      189         0  \n",
       "\n",
       "[11504798 rows x 12 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ec72900f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T08:46:42.751512Z",
     "iopub.status.busy": "2024-07-12T08:46:42.751099Z",
     "iopub.status.idle": "2024-07-12T08:46:42.774984Z",
     "shell.execute_reply": "2024-07-12T08:46:42.773715Z"
    },
    "papermill": {
     "duration": 0.045342,
     "end_time": "2024-07-12T08:46:42.778247",
     "exception": false,
     "start_time": "2024-07-12T08:46:42.732905",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 11504798 entries, 0 to 11504797\n",
      "Data columns (total 12 columns):\n",
      " #   Column                Dtype  \n",
      "---  ------                -----  \n",
      " 0   id                    int64  \n",
      " 1   Gender                object \n",
      " 2   Age                   int64  \n",
      " 3   Driving_License       int64  \n",
      " 4   Region_Code           float64\n",
      " 5   Previously_Insured    int64  \n",
      " 6   Vehicle_Age           object \n",
      " 7   Vehicle_Damage        object \n",
      " 8   Annual_Premium        float64\n",
      " 9   Policy_Sales_Channel  float64\n",
      " 10  Vintage               int64  \n",
      " 11  Response              int64  \n",
      "dtypes: float64(3), int64(6), object(3)\n",
      "memory usage: 1.0+ GB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "863eeeb5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T08:46:42.814407Z",
     "iopub.status.busy": "2024-07-12T08:46:42.813985Z",
     "iopub.status.idle": "2024-07-12T08:46:46.584652Z",
     "shell.execute_reply": "2024-07-12T08:46:46.583361Z"
    },
    "papermill": {
     "duration": 3.791827,
     "end_time": "2024-07-12T08:46:46.587390",
     "exception": false,
     "start_time": "2024-07-12T08:46:42.795563",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Age</th>\n",
       "      <th>Driving_License</th>\n",
       "      <th>Region_Code</th>\n",
       "      <th>Previously_Insured</th>\n",
       "      <th>Annual_Premium</th>\n",
       "      <th>Policy_Sales_Channel</th>\n",
       "      <th>Vintage</th>\n",
       "      <th>Response</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1.150480e+07</td>\n",
       "      <td>1.150480e+07</td>\n",
       "      <td>1.150480e+07</td>\n",
       "      <td>1.150480e+07</td>\n",
       "      <td>1.150480e+07</td>\n",
       "      <td>1.150480e+07</td>\n",
       "      <td>1.150480e+07</td>\n",
       "      <td>1.150480e+07</td>\n",
       "      <td>1.150480e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>5.752398e+06</td>\n",
       "      <td>3.838356e+01</td>\n",
       "      <td>9.980220e-01</td>\n",
       "      <td>2.641869e+01</td>\n",
       "      <td>4.629966e-01</td>\n",
       "      <td>3.046137e+04</td>\n",
       "      <td>1.124254e+02</td>\n",
       "      <td>1.638977e+02</td>\n",
       "      <td>1.229973e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>3.321149e+06</td>\n",
       "      <td>1.499346e+01</td>\n",
       "      <td>4.443120e-02</td>\n",
       "      <td>1.299159e+01</td>\n",
       "      <td>4.986289e-01</td>\n",
       "      <td>1.645475e+04</td>\n",
       "      <td>5.403571e+01</td>\n",
       "      <td>7.997953e+01</td>\n",
       "      <td>3.284341e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>2.000000e+01</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>2.630000e+03</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.000000e+01</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.876199e+06</td>\n",
       "      <td>2.400000e+01</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.500000e+01</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>2.527700e+04</td>\n",
       "      <td>2.900000e+01</td>\n",
       "      <td>9.900000e+01</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>5.752398e+06</td>\n",
       "      <td>3.600000e+01</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>2.800000e+01</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>3.182400e+04</td>\n",
       "      <td>1.510000e+02</td>\n",
       "      <td>1.660000e+02</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>8.628598e+06</td>\n",
       "      <td>4.900000e+01</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>3.500000e+01</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>3.945100e+04</td>\n",
       "      <td>1.520000e+02</td>\n",
       "      <td>2.320000e+02</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.150480e+07</td>\n",
       "      <td>8.500000e+01</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>5.200000e+01</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>5.401650e+05</td>\n",
       "      <td>1.630000e+02</td>\n",
       "      <td>2.990000e+02</td>\n",
       "      <td>1.000000e+00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 id           Age  Driving_License   Region_Code  \\\n",
       "count  1.150480e+07  1.150480e+07     1.150480e+07  1.150480e+07   \n",
       "mean   5.752398e+06  3.838356e+01     9.980220e-01  2.641869e+01   \n",
       "std    3.321149e+06  1.499346e+01     4.443120e-02  1.299159e+01   \n",
       "min    0.000000e+00  2.000000e+01     0.000000e+00  0.000000e+00   \n",
       "25%    2.876199e+06  2.400000e+01     1.000000e+00  1.500000e+01   \n",
       "50%    5.752398e+06  3.600000e+01     1.000000e+00  2.800000e+01   \n",
       "75%    8.628598e+06  4.900000e+01     1.000000e+00  3.500000e+01   \n",
       "max    1.150480e+07  8.500000e+01     1.000000e+00  5.200000e+01   \n",
       "\n",
       "       Previously_Insured  Annual_Premium  Policy_Sales_Channel       Vintage  \\\n",
       "count        1.150480e+07    1.150480e+07          1.150480e+07  1.150480e+07   \n",
       "mean         4.629966e-01    3.046137e+04          1.124254e+02  1.638977e+02   \n",
       "std          4.986289e-01    1.645475e+04          5.403571e+01  7.997953e+01   \n",
       "min          0.000000e+00    2.630000e+03          1.000000e+00  1.000000e+01   \n",
       "25%          0.000000e+00    2.527700e+04          2.900000e+01  9.900000e+01   \n",
       "50%          0.000000e+00    3.182400e+04          1.510000e+02  1.660000e+02   \n",
       "75%          1.000000e+00    3.945100e+04          1.520000e+02  2.320000e+02   \n",
       "max          1.000000e+00    5.401650e+05          1.630000e+02  2.990000e+02   \n",
       "\n",
       "           Response  \n",
       "count  1.150480e+07  \n",
       "mean   1.229973e-01  \n",
       "std    3.284341e-01  \n",
       "min    0.000000e+00  \n",
       "25%    0.000000e+00  \n",
       "50%    0.000000e+00  \n",
       "75%    0.000000e+00  \n",
       "max    1.000000e+00  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "64ac6dd4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T08:46:46.623191Z",
     "iopub.status.busy": "2024-07-12T08:46:46.622780Z",
     "iopub.status.idle": "2024-07-12T08:46:50.427648Z",
     "shell.execute_reply": "2024-07-12T08:46:50.426406Z"
    },
    "papermill": {
     "duration": 3.825821,
     "end_time": "2024-07-12T08:46:50.430407",
     "exception": false,
     "start_time": "2024-07-12T08:46:46.604586",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id                      0\n",
       "Gender                  0\n",
       "Age                     0\n",
       "Driving_License         0\n",
       "Region_Code             0\n",
       "Previously_Insured      0\n",
       "Vehicle_Age             0\n",
       "Vehicle_Damage          0\n",
       "Annual_Premium          0\n",
       "Policy_Sales_Channel    0\n",
       "Vintage                 0\n",
       "Response                0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d2901828",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T08:46:50.466959Z",
     "iopub.status.busy": "2024-07-12T08:46:50.466506Z",
     "iopub.status.idle": "2024-07-12T08:47:08.865650Z",
     "shell.execute_reply": "2024-07-12T08:47:08.864484Z"
    },
    "papermill": {
     "duration": 18.421662,
     "end_time": "2024-07-12T08:47:08.869300",
     "exception": false,
     "start_time": "2024-07-12T08:46:50.447638",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(11504798, 12)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.duplicated().sum()\n",
    "df.drop_duplicates(inplace=True)\n",
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "2f87930d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T08:47:08.912400Z",
     "iopub.status.busy": "2024-07-12T08:47:08.911969Z",
     "iopub.status.idle": "2024-07-12T08:47:19.383965Z",
     "shell.execute_reply": "2024-07-12T08:47:19.382705Z"
    },
    "papermill": {
     "duration": 10.494615,
     "end_time": "2024-07-12T08:47:19.386836",
     "exception": false,
     "start_time": "2024-07-12T08:47:08.892221",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.replace([np.inf, -np.inf], np.nan, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ed884e0e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T08:47:19.423785Z",
     "iopub.status.busy": "2024-07-12T08:47:19.422637Z",
     "iopub.status.idle": "2024-07-12T08:47:19.446873Z",
     "shell.execute_reply": "2024-07-12T08:47:19.445695Z"
    },
    "papermill": {
     "duration": 0.045472,
     "end_time": "2024-07-12T08:47:19.449583",
     "exception": false,
     "start_time": "2024-07-12T08:47:19.404111",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Driving_License</th>\n",
       "      <th>Region_Code</th>\n",
       "      <th>Previously_Insured</th>\n",
       "      <th>Vehicle_Age</th>\n",
       "      <th>Vehicle_Damage</th>\n",
       "      <th>Annual_Premium</th>\n",
       "      <th>Policy_Sales_Channel</th>\n",
       "      <th>Vintage</th>\n",
       "      <th>Response</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1-2 Year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>65101.0</td>\n",
       "      <td>124.0</td>\n",
       "      <td>187</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>Male</td>\n",
       "      <td>43</td>\n",
       "      <td>1</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>&gt; 2 Years</td>\n",
       "      <td>Yes</td>\n",
       "      <td>58911.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>288</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>Female</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>14.0</td>\n",
       "      <td>1</td>\n",
       "      <td>&lt; 1 Year</td>\n",
       "      <td>No</td>\n",
       "      <td>38043.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>254</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>Female</td>\n",
       "      <td>35</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1-2 Year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>2630.0</td>\n",
       "      <td>156.0</td>\n",
       "      <td>76</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>Female</td>\n",
       "      <td>36</td>\n",
       "      <td>1</td>\n",
       "      <td>15.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1-2 Year</td>\n",
       "      <td>No</td>\n",
       "      <td>31951.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>294</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11504793</th>\n",
       "      <td>11504793</td>\n",
       "      <td>Male</td>\n",
       "      <td>48</td>\n",
       "      <td>1</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1-2 Year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>27412.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>218</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11504794</th>\n",
       "      <td>11504794</td>\n",
       "      <td>Female</td>\n",
       "      <td>26</td>\n",
       "      <td>1</td>\n",
       "      <td>36.0</td>\n",
       "      <td>0</td>\n",
       "      <td>&lt; 1 Year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>29509.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>115</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11504795</th>\n",
       "      <td>11504795</td>\n",
       "      <td>Female</td>\n",
       "      <td>29</td>\n",
       "      <td>1</td>\n",
       "      <td>32.0</td>\n",
       "      <td>1</td>\n",
       "      <td>&lt; 1 Year</td>\n",
       "      <td>No</td>\n",
       "      <td>2630.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>189</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11504796</th>\n",
       "      <td>11504796</td>\n",
       "      <td>Female</td>\n",
       "      <td>51</td>\n",
       "      <td>1</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1-2 Year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>48443.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>274</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11504797</th>\n",
       "      <td>11504797</td>\n",
       "      <td>Male</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>28.0</td>\n",
       "      <td>1</td>\n",
       "      <td>&lt; 1 Year</td>\n",
       "      <td>No</td>\n",
       "      <td>32855.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>189</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>11504798 rows Ã— 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                id  Gender  Age  Driving_License  Region_Code  \\\n",
       "0                0    Male   21                1         35.0   \n",
       "1                1    Male   43                1         28.0   \n",
       "2                2  Female   25                1         14.0   \n",
       "3                3  Female   35                1          1.0   \n",
       "4                4  Female   36                1         15.0   \n",
       "...            ...     ...  ...              ...          ...   \n",
       "11504793  11504793    Male   48                1          6.0   \n",
       "11504794  11504794  Female   26                1         36.0   \n",
       "11504795  11504795  Female   29                1         32.0   \n",
       "11504796  11504796  Female   51                1         28.0   \n",
       "11504797  11504797    Male   25                1         28.0   \n",
       "\n",
       "          Previously_Insured Vehicle_Age Vehicle_Damage  Annual_Premium  \\\n",
       "0                          0    1-2 Year            Yes         65101.0   \n",
       "1                          0   > 2 Years            Yes         58911.0   \n",
       "2                          1    < 1 Year             No         38043.0   \n",
       "3                          0    1-2 Year            Yes          2630.0   \n",
       "4                          1    1-2 Year             No         31951.0   \n",
       "...                      ...         ...            ...             ...   \n",
       "11504793                   0    1-2 Year            Yes         27412.0   \n",
       "11504794                   0    < 1 Year            Yes         29509.0   \n",
       "11504795                   1    < 1 Year             No          2630.0   \n",
       "11504796                   0    1-2 Year            Yes         48443.0   \n",
       "11504797                   1    < 1 Year             No         32855.0   \n",
       "\n",
       "          Policy_Sales_Channel  Vintage  Response  \n",
       "0                        124.0      187         0  \n",
       "1                         26.0      288         1  \n",
       "2                        152.0      254         0  \n",
       "3                        156.0       76         0  \n",
       "4                        152.0      294         0  \n",
       "...                        ...      ...       ...  \n",
       "11504793                  26.0      218         0  \n",
       "11504794                 152.0      115         1  \n",
       "11504795                 152.0      189         0  \n",
       "11504796                  26.0      274         1  \n",
       "11504797                 152.0      189         0  \n",
       "\n",
       "[11504798 rows x 12 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28599ce6",
   "metadata": {
    "papermill": {
     "duration": 0.017274,
     "end_time": "2024-07-12T08:47:19.484481",
     "exception": false,
     "start_time": "2024-07-12T08:47:19.467207",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Plot distributions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3770d874",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T08:47:19.522826Z",
     "iopub.status.busy": "2024-07-12T08:47:19.522366Z",
     "iopub.status.idle": "2024-07-12T08:47:24.460678Z",
     "shell.execute_reply": "2024-07-12T08:47:24.459292Z"
    },
    "papermill": {
     "duration": 4.962234,
     "end_time": "2024-07-12T08:47:24.464130",
     "exception": false,
     "start_time": "2024-07-12T08:47:19.501896",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Age', 'Region_Code', 'Annual_Premium', 'Policy_Sales_Channel', 'Vintage']"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num_list = []\n",
    "\n",
    "for col in df.columns:\n",
    "    if df[col].nunique() > 3:\n",
    "        num_list.append(col)\n",
    "        \n",
    "num_list = num_list[1:]\n",
    "num_list"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38e28691",
   "metadata": {
    "papermill": {
     "duration": 0.018161,
     "end_time": "2024-07-12T08:47:24.500825",
     "exception": false,
     "start_time": "2024-07-12T08:47:24.482664",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## a sample"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "38d4f0af",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T08:47:24.539227Z",
     "iopub.status.busy": "2024-07-12T08:47:24.538808Z",
     "iopub.status.idle": "2024-07-12T08:47:24.544251Z",
     "shell.execute_reply": "2024-07-12T08:47:24.543102Z"
    },
    "papermill": {
     "duration": 0.028276,
     "end_time": "2024-07-12T08:47:24.546739",
     "exception": false,
     "start_time": "2024-07-12T08:47:24.518463",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# fig, ax = plt.subplots(len(num_list), len(num_list), figsize=(25, 25))\n",
    "# df_sample = df.sample(100000)\n",
    "# bar = progressbar.ProgressBar(max_value=len(num_list)*len(num_list))\n",
    "# t = 0\n",
    "# for i, col1 in enumerate(num_list):\n",
    "#     for j, col2 in enumerate(num_list):\n",
    "#         plt.sca(ax[i, j])\n",
    "#         sns.scatterplot(data=df_sample, x=col1, y=col2, hue='Response', ax=ax[i, j])\n",
    "#         bar.update(t+1)\n",
    "#         t = t+1\n",
    "# plt.tight_layout()\n",
    "# # may be image building take time\n",
    "# plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "7434a35e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T08:47:24.584061Z",
     "iopub.status.busy": "2024-07-12T08:47:24.583639Z",
     "iopub.status.idle": "2024-07-12T08:47:24.589167Z",
     "shell.execute_reply": "2024-07-12T08:47:24.588111Z"
    },
    "papermill": {
     "duration": 0.027273,
     "end_time": "2024-07-12T08:47:24.591828",
     "exception": false,
     "start_time": "2024-07-12T08:47:24.564555",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# fig, ax = plt.subplots(len(num_list), 1, figsize=(8, len(num_list) * 4))  \n",
    "\n",
    "# for i, col in enumerate(tqdm(num_list, desc=\"Plotting\")):\n",
    "#     plt.sca(ax[i])\n",
    "#     sns.histplot(data=df_sample, x=col, kde=True)\n",
    "#     ax[i].set_title(f'Distribution of {col}')\n",
    "\n",
    "# plt.tight_layout()\n",
    "# plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e1fcb95c",
   "metadata": {
    "papermill": {
     "duration": 0.017541,
     "end_time": "2024-07-12T08:47:24.627228",
     "exception": false,
     "start_time": "2024-07-12T08:47:24.609687",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Resopnse with 1 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "6c2b719e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T08:47:24.664565Z",
     "iopub.status.busy": "2024-07-12T08:47:24.664148Z",
     "iopub.status.idle": "2024-07-12T08:47:24.669019Z",
     "shell.execute_reply": "2024-07-12T08:47:24.667884Z"
    },
    "papermill": {
     "duration": 0.026486,
     "end_time": "2024-07-12T08:47:24.671485",
     "exception": false,
     "start_time": "2024-07-12T08:47:24.644999",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# df_resp_1 = df[df['Response'] == 1]\n",
    "# df_resp_0 = df[df['Response'] == 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b8f79b3e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T08:47:24.709653Z",
     "iopub.status.busy": "2024-07-12T08:47:24.708462Z",
     "iopub.status.idle": "2024-07-12T08:47:24.714164Z",
     "shell.execute_reply": "2024-07-12T08:47:24.712993Z"
    },
    "papermill": {
     "duration": 0.027382,
     "end_time": "2024-07-12T08:47:24.716680",
     "exception": false,
     "start_time": "2024-07-12T08:47:24.689298",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# fig, ax = plt.subplots(len(num_list), len(num_list), figsize=(25, 25))\n",
    "\n",
    "# bar = progressbar.ProgressBar(max_value=len(num_list)*len(num_list))\n",
    "# t = 0\n",
    "# for i, col1 in enumerate(num_list):\n",
    "#     for j, col2 in enumerate(num_list):\n",
    "#         plt.sca(ax[i, j])\n",
    "#         sns.scatterplot(data=df_resp_1, x=col1, y=col2, ax=ax[i, j])\n",
    "#         bar.update(t+1)\n",
    "#         t = t+1\n",
    "# plt.tight_layout()\n",
    "# # may be image building take time\n",
    "# plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "5ab1c8b6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T08:47:24.754665Z",
     "iopub.status.busy": "2024-07-12T08:47:24.753820Z",
     "iopub.status.idle": "2024-07-12T08:47:24.759327Z",
     "shell.execute_reply": "2024-07-12T08:47:24.757966Z"
    },
    "papermill": {
     "duration": 0.027213,
     "end_time": "2024-07-12T08:47:24.761935",
     "exception": false,
     "start_time": "2024-07-12T08:47:24.734722",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# fig, ax = plt.subplots(len(num_list), 1, figsize=(8, len(num_list) * 4))  \n",
    "\n",
    "# for i, col in enumerate(tqdm(num_list, desc=\"Plotting\")):\n",
    "#     plt.sca(ax[i])\n",
    "#     sns.histplot(data=df_resp_1, x=col, kde=True)\n",
    "#     sns.histplot(data=df_resp_0, x=col, kde=True)\n",
    "#     ax[i].set_title(f'Distribution of {col}')\n",
    "\n",
    "# plt.tight_layout()\n",
    "# plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "54e8c117",
   "metadata": {
    "papermill": {
     "duration": 0.018028,
     "end_time": "2024-07-12T08:47:24.798735",
     "exception": false,
     "start_time": "2024-07-12T08:47:24.780707",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Response with 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "9cf591fb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T08:47:24.836497Z",
     "iopub.status.busy": "2024-07-12T08:47:24.836095Z",
     "iopub.status.idle": "2024-07-12T08:47:24.841432Z",
     "shell.execute_reply": "2024-07-12T08:47:24.840316Z"
    },
    "papermill": {
     "duration": 0.026896,
     "end_time": "2024-07-12T08:47:24.843885",
     "exception": false,
     "start_time": "2024-07-12T08:47:24.816989",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# fig, ax = plt.subplots(len(num_list), len(num_list), figsize=(25, 25))\n",
    "# df_resp_0 = df[df['Response'] == 0]\n",
    "# bar = progressbar.ProgressBar(max_value=len(num_list)*len(num_list))\n",
    "# t = 0\n",
    "# for i, col1 in enumerate(num_list):\n",
    "#     for j, col2 in enumerate(num_list):\n",
    "#         plt.sca(ax[i, j])\n",
    "#         sns.scatterplot(data=df_resp_0, x=col1, y=col2, ax=ax[i, j])\n",
    "#         bar.update(t+1)\n",
    "#         t = t+1\n",
    "# plt.tight_layout()\n",
    "# # may be image building take time\n",
    "# plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "54f949fa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T08:47:24.882295Z",
     "iopub.status.busy": "2024-07-12T08:47:24.881325Z",
     "iopub.status.idle": "2024-07-12T08:47:24.887221Z",
     "shell.execute_reply": "2024-07-12T08:47:24.885939Z"
    },
    "papermill": {
     "duration": 0.027895,
     "end_time": "2024-07-12T08:47:24.889698",
     "exception": false,
     "start_time": "2024-07-12T08:47:24.861803",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# fig, ax = plt.subplots(1, 4, figsize=(12, 6))\n",
    "# gender_counts = df['Gender'].value_counts()\n",
    "# vehicle_damage_counts = df['Vehicle_Damage'].value_counts()\n",
    "# resp_counts = df['Response'].value_counts()\n",
    "# vehicle_age_counts = df['Vehicle_Age'].value_counts()\n",
    "# ax[0].pie(gender_counts, labels=gender_counts.index, autopct='%1.1f%%', startangle=90, colors=sns.color_palette(\"pastel\"))\n",
    "# ax[0].set_title('Gender')\n",
    "# ax[1].pie(vehicle_damage_counts, labels=vehicle_damage_counts.index, autopct='%1.1f%%', startangle=90, colors=sns.color_palette(\"pastel\"))\n",
    "# ax[1].set_title('Vehicle Damage')\n",
    "# ax[2].pie(resp_counts, labels=resp_counts.index, autopct='%1.1f%%', startangle=90, colors=sns.color_palette(\"pastel\"))\n",
    "# ax[2].set_title('Response')\n",
    "# ax[3].pie(vehicle_age_counts, labels=vehicle_age_counts.index, autopct='%1.1f%%', startangle=90, colors=sns.color_palette(\"pastel\"))\n",
    "# ax[3].set_title('Vehicle Age')\n",
    "# plt.tight_layout()\n",
    "# plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "20686ca1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T08:47:24.995017Z",
     "iopub.status.busy": "2024-07-12T08:47:24.994566Z",
     "iopub.status.idle": "2024-07-12T08:47:25.000672Z",
     "shell.execute_reply": "2024-07-12T08:47:24.999535Z"
    },
    "papermill": {
     "duration": 0.093819,
     "end_time": "2024-07-12T08:47:25.003225",
     "exception": false,
     "start_time": "2024-07-12T08:47:24.909406",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# columns = list(df.columns)[1:-1]\n",
    "# num_columns = len(columns)\n",
    "# breadth = 3\n",
    "# length = math.ceil(num_columns / breadth)\n",
    "\n",
    "# # Create subplots\n",
    "# fig, ax = plt.subplots(length, breadth, figsize=(15, 5 * length))\n",
    "\n",
    "# k = 0\n",
    "\n",
    "# bar = progressbar.ProgressBar(max_value=num_columns)\n",
    "\n",
    "# # Flatten the axes array for easier indexing\n",
    "# ax = ax.flatten()\n",
    "\n",
    "# for i in range(len(ax)):\n",
    "#     if k < num_columns:\n",
    "#         sns.scatterplot(\n",
    "#             data=df,\n",
    "#             x=columns[k],\n",
    "#             y='Response',\n",
    "#             ax=ax[i]\n",
    "#         )\n",
    "#         ax[i].set_title(f\"{columns[k]} vs Response\")\n",
    "#         k += 1\n",
    "#     else:\n",
    "#         ax[i].axis('off')\n",
    "#     bar.update(k)\n",
    "\n",
    "# plt.tight_layout()\n",
    "# plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "7e91dbd0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T08:47:25.041235Z",
     "iopub.status.busy": "2024-07-12T08:47:25.040820Z",
     "iopub.status.idle": "2024-07-12T08:47:25.045805Z",
     "shell.execute_reply": "2024-07-12T08:47:25.044689Z"
    },
    "papermill": {
     "duration": 0.027186,
     "end_time": "2024-07-12T08:47:25.048641",
     "exception": false,
     "start_time": "2024-07-12T08:47:25.021455",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# sns.heatmap(df[num_list].corr(), cmap=\"Greens\", annot=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "fdac0ba5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T08:47:25.086995Z",
     "iopub.status.busy": "2024-07-12T08:47:25.086540Z",
     "iopub.status.idle": "2024-07-12T08:47:25.091979Z",
     "shell.execute_reply": "2024-07-12T08:47:25.090735Z"
    },
    "papermill": {
     "duration": 0.027324,
     "end_time": "2024-07-12T08:47:25.094494",
     "exception": false,
     "start_time": "2024-07-12T08:47:25.067170",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# df = df.drop(columns = ['Driving_License','Region_Code','Vintage'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "984f6138",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T08:47:25.133940Z",
     "iopub.status.busy": "2024-07-12T08:47:25.132677Z",
     "iopub.status.idle": "2024-07-12T08:47:25.157108Z",
     "shell.execute_reply": "2024-07-12T08:47:25.155868Z"
    },
    "papermill": {
     "duration": 0.046861,
     "end_time": "2024-07-12T08:47:25.160022",
     "exception": false,
     "start_time": "2024-07-12T08:47:25.113161",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Driving_License</th>\n",
       "      <th>Region_Code</th>\n",
       "      <th>Previously_Insured</th>\n",
       "      <th>Vehicle_Age</th>\n",
       "      <th>Vehicle_Damage</th>\n",
       "      <th>Annual_Premium</th>\n",
       "      <th>Policy_Sales_Channel</th>\n",
       "      <th>Vintage</th>\n",
       "      <th>Response</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1-2 Year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>65101.0</td>\n",
       "      <td>124.0</td>\n",
       "      <td>187</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>Male</td>\n",
       "      <td>43</td>\n",
       "      <td>1</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>&gt; 2 Years</td>\n",
       "      <td>Yes</td>\n",
       "      <td>58911.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>288</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>Female</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>14.0</td>\n",
       "      <td>1</td>\n",
       "      <td>&lt; 1 Year</td>\n",
       "      <td>No</td>\n",
       "      <td>38043.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>254</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>Female</td>\n",
       "      <td>35</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1-2 Year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>2630.0</td>\n",
       "      <td>156.0</td>\n",
       "      <td>76</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>Female</td>\n",
       "      <td>36</td>\n",
       "      <td>1</td>\n",
       "      <td>15.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1-2 Year</td>\n",
       "      <td>No</td>\n",
       "      <td>31951.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>294</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11504793</th>\n",
       "      <td>11504793</td>\n",
       "      <td>Male</td>\n",
       "      <td>48</td>\n",
       "      <td>1</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1-2 Year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>27412.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>218</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11504794</th>\n",
       "      <td>11504794</td>\n",
       "      <td>Female</td>\n",
       "      <td>26</td>\n",
       "      <td>1</td>\n",
       "      <td>36.0</td>\n",
       "      <td>0</td>\n",
       "      <td>&lt; 1 Year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>29509.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>115</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11504795</th>\n",
       "      <td>11504795</td>\n",
       "      <td>Female</td>\n",
       "      <td>29</td>\n",
       "      <td>1</td>\n",
       "      <td>32.0</td>\n",
       "      <td>1</td>\n",
       "      <td>&lt; 1 Year</td>\n",
       "      <td>No</td>\n",
       "      <td>2630.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>189</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11504796</th>\n",
       "      <td>11504796</td>\n",
       "      <td>Female</td>\n",
       "      <td>51</td>\n",
       "      <td>1</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1-2 Year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>48443.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>274</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11504797</th>\n",
       "      <td>11504797</td>\n",
       "      <td>Male</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>28.0</td>\n",
       "      <td>1</td>\n",
       "      <td>&lt; 1 Year</td>\n",
       "      <td>No</td>\n",
       "      <td>32855.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>189</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>11504798 rows Ã— 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                id  Gender  Age  Driving_License  Region_Code  \\\n",
       "0                0    Male   21                1         35.0   \n",
       "1                1    Male   43                1         28.0   \n",
       "2                2  Female   25                1         14.0   \n",
       "3                3  Female   35                1          1.0   \n",
       "4                4  Female   36                1         15.0   \n",
       "...            ...     ...  ...              ...          ...   \n",
       "11504793  11504793    Male   48                1          6.0   \n",
       "11504794  11504794  Female   26                1         36.0   \n",
       "11504795  11504795  Female   29                1         32.0   \n",
       "11504796  11504796  Female   51                1         28.0   \n",
       "11504797  11504797    Male   25                1         28.0   \n",
       "\n",
       "          Previously_Insured Vehicle_Age Vehicle_Damage  Annual_Premium  \\\n",
       "0                          0    1-2 Year            Yes         65101.0   \n",
       "1                          0   > 2 Years            Yes         58911.0   \n",
       "2                          1    < 1 Year             No         38043.0   \n",
       "3                          0    1-2 Year            Yes          2630.0   \n",
       "4                          1    1-2 Year             No         31951.0   \n",
       "...                      ...         ...            ...             ...   \n",
       "11504793                   0    1-2 Year            Yes         27412.0   \n",
       "11504794                   0    < 1 Year            Yes         29509.0   \n",
       "11504795                   1    < 1 Year             No          2630.0   \n",
       "11504796                   0    1-2 Year            Yes         48443.0   \n",
       "11504797                   1    < 1 Year             No         32855.0   \n",
       "\n",
       "          Policy_Sales_Channel  Vintage  Response  \n",
       "0                        124.0      187         0  \n",
       "1                         26.0      288         1  \n",
       "2                        152.0      254         0  \n",
       "3                        156.0       76         0  \n",
       "4                        152.0      294         0  \n",
       "...                        ...      ...       ...  \n",
       "11504793                  26.0      218         0  \n",
       "11504794                 152.0      115         1  \n",
       "11504795                 152.0      189         0  \n",
       "11504796                  26.0      274         1  \n",
       "11504797                 152.0      189         0  \n",
       "\n",
       "[11504798 rows x 12 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1715df79",
   "metadata": {
    "papermill": {
     "duration": 0.018266,
     "end_time": "2024-07-12T08:47:25.197462",
     "exception": false,
     "start_time": "2024-07-12T08:47:25.179196",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Pre processing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "f1231a44",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T08:47:25.236448Z",
     "iopub.status.busy": "2024-07-12T08:47:25.235423Z",
     "iopub.status.idle": "2024-07-12T08:47:25.241806Z",
     "shell.execute_reply": "2024-07-12T08:47:25.240563Z"
    },
    "papermill": {
     "duration": 0.02877,
     "end_time": "2024-07-12T08:47:25.244502",
     "exception": false,
     "start_time": "2024-07-12T08:47:25.215732",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "encoder_dict = {\n",
    "    'Gender' : {\n",
    "        'Male':0,\n",
    "        'Female':1\n",
    "    },\n",
    "    'Vehicle_Age' : {\n",
    "        '< 1 Year':0.5,\n",
    "        '1-2 Year':1.5,\n",
    "        '> 2 Years':2.5\n",
    "    },\n",
    "    'Vehicle_Damage' : {\n",
    "        'Yes':1,\n",
    "        'No':0\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "38b142be",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T08:47:25.285259Z",
     "iopub.status.busy": "2024-07-12T08:47:25.284855Z",
     "iopub.status.idle": "2024-07-12T08:47:48.957793Z",
     "shell.execute_reply": "2024-07-12T08:47:48.956439Z"
    },
    "papermill": {
     "duration": 23.697168,
     "end_time": "2024-07-12T08:47:48.960895",
     "exception": false,
     "start_time": "2024-07-12T08:47:25.263727",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Driving_License</th>\n",
       "      <th>Region_Code</th>\n",
       "      <th>Previously_Insured</th>\n",
       "      <th>Vehicle_Age</th>\n",
       "      <th>Vehicle_Damage</th>\n",
       "      <th>Annual_Premium</th>\n",
       "      <th>Policy_Sales_Channel</th>\n",
       "      <th>Vintage</th>\n",
       "      <th>Response</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>21</td>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.5</td>\n",
       "      <td>1</td>\n",
       "      <td>65101.0</td>\n",
       "      <td>124.0</td>\n",
       "      <td>187</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>43</td>\n",
       "      <td>1</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.5</td>\n",
       "      <td>1</td>\n",
       "      <td>58911.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>288</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>14.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0</td>\n",
       "      <td>38043.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>254</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>35</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.5</td>\n",
       "      <td>1</td>\n",
       "      <td>2630.0</td>\n",
       "      <td>156.0</td>\n",
       "      <td>76</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>36</td>\n",
       "      <td>1</td>\n",
       "      <td>15.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0</td>\n",
       "      <td>31951.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>294</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11504793</th>\n",
       "      <td>11504793</td>\n",
       "      <td>0</td>\n",
       "      <td>48</td>\n",
       "      <td>1</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.5</td>\n",
       "      <td>1</td>\n",
       "      <td>27412.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>218</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11504794</th>\n",
       "      <td>11504794</td>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>1</td>\n",
       "      <td>36.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1</td>\n",
       "      <td>29509.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>115</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11504795</th>\n",
       "      <td>11504795</td>\n",
       "      <td>1</td>\n",
       "      <td>29</td>\n",
       "      <td>1</td>\n",
       "      <td>32.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0</td>\n",
       "      <td>2630.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>189</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11504796</th>\n",
       "      <td>11504796</td>\n",
       "      <td>1</td>\n",
       "      <td>51</td>\n",
       "      <td>1</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.5</td>\n",
       "      <td>1</td>\n",
       "      <td>48443.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>274</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11504797</th>\n",
       "      <td>11504797</td>\n",
       "      <td>0</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>28.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0</td>\n",
       "      <td>32855.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>189</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>11504798 rows Ã— 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                id  Gender  Age  Driving_License  Region_Code  \\\n",
       "0                0       0   21                1         35.0   \n",
       "1                1       0   43                1         28.0   \n",
       "2                2       1   25                1         14.0   \n",
       "3                3       1   35                1          1.0   \n",
       "4                4       1   36                1         15.0   \n",
       "...            ...     ...  ...              ...          ...   \n",
       "11504793  11504793       0   48                1          6.0   \n",
       "11504794  11504794       1   26                1         36.0   \n",
       "11504795  11504795       1   29                1         32.0   \n",
       "11504796  11504796       1   51                1         28.0   \n",
       "11504797  11504797       0   25                1         28.0   \n",
       "\n",
       "          Previously_Insured  Vehicle_Age  Vehicle_Damage  Annual_Premium  \\\n",
       "0                          0          1.5               1         65101.0   \n",
       "1                          0          2.5               1         58911.0   \n",
       "2                          1          0.5               0         38043.0   \n",
       "3                          0          1.5               1          2630.0   \n",
       "4                          1          1.5               0         31951.0   \n",
       "...                      ...          ...             ...             ...   \n",
       "11504793                   0          1.5               1         27412.0   \n",
       "11504794                   0          0.5               1         29509.0   \n",
       "11504795                   1          0.5               0          2630.0   \n",
       "11504796                   0          1.5               1         48443.0   \n",
       "11504797                   1          0.5               0         32855.0   \n",
       "\n",
       "          Policy_Sales_Channel  Vintage  Response  \n",
       "0                        124.0      187         0  \n",
       "1                         26.0      288         1  \n",
       "2                        152.0      254         0  \n",
       "3                        156.0       76         0  \n",
       "4                        152.0      294         0  \n",
       "...                        ...      ...       ...  \n",
       "11504793                  26.0      218         0  \n",
       "11504794                 152.0      115         1  \n",
       "11504795                 152.0      189         0  \n",
       "11504796                  26.0      274         1  \n",
       "11504797                 152.0      189         0  \n",
       "\n",
       "[11504798 rows x 12 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.replace(encoder_dict, inplace=True)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "042bbdf6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T08:47:49.001857Z",
     "iopub.status.busy": "2024-07-12T08:47:49.001428Z",
     "iopub.status.idle": "2024-07-12T08:47:49.364208Z",
     "shell.execute_reply": "2024-07-12T08:47:49.362967Z"
    },
    "papermill": {
     "duration": 0.386338,
     "end_time": "2024-07-12T08:47:49.367082",
     "exception": false,
     "start_time": "2024-07-12T08:47:48.980744",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "x = df.iloc[:,1 :-1]\n",
    "y = df.iloc[:, -1]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0b3551f",
   "metadata": {
    "papermill": {
     "duration": 0.018818,
     "end_time": "2024-07-12T08:47:49.406066",
     "exception": false,
     "start_time": "2024-07-12T08:47:49.387248",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Model training "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "1328da2f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T08:47:49.447947Z",
     "iopub.status.busy": "2024-07-12T08:47:49.447424Z",
     "iopub.status.idle": "2024-07-12T08:47:52.411873Z",
     "shell.execute_reply": "2024-07-12T08:47:52.410532Z"
    },
    "papermill": {
     "duration": 2.989225,
     "end_time": "2024-07-12T08:47:52.414704",
     "exception": false,
     "start_time": "2024-07-12T08:47:49.425479",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "x_train,x_test,y_train,y_test = train_test_split(\n",
    "    x,y\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d105ca2d",
   "metadata": {
    "papermill": {
     "duration": 0.019444,
     "end_time": "2024-07-12T08:47:52.454821",
     "exception": false,
     "start_time": "2024-07-12T08:47:52.435377",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Logistic regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "4066d797",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T08:47:52.497419Z",
     "iopub.status.busy": "2024-07-12T08:47:52.496431Z",
     "iopub.status.idle": "2024-07-12T08:49:12.038303Z",
     "shell.execute_reply": "2024-07-12T08:49:12.036577Z"
    },
    "papermill": {
     "duration": 79.566454,
     "end_time": "2024-07-12T08:49:12.041476",
     "exception": false,
     "start_time": "2024-07-12T08:47:52.475022",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.8729556359084903\n"
     ]
    }
   ],
   "source": [
    "# 'solver': ['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga'],\n",
    "lr = LogisticRegression(\n",
    "    max_iter=100,\n",
    "    C = 0.1,\n",
    "    n_jobs = -1,\n",
    ")\n",
    "lr.fit(x_train,y_train)\n",
    "y_pred_lr = lr.predict(x_test)\n",
    "print(\"Accuracy:\", accuracy_score(y_test, y_pred_lr))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44d3bafa",
   "metadata": {
    "papermill": {
     "duration": 0.020709,
     "end_time": "2024-07-12T08:49:12.082931",
     "exception": false,
     "start_time": "2024-07-12T08:49:12.062222",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Decision tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "0cd3c2ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T08:49:12.127661Z",
     "iopub.status.busy": "2024-07-12T08:49:12.127215Z",
     "iopub.status.idle": "2024-07-12T08:50:12.750061Z",
     "shell.execute_reply": "2024-07-12T08:50:12.748656Z"
    },
    "papermill": {
     "duration": 60.669009,
     "end_time": "2024-07-12T08:50:12.773561",
     "exception": false,
     "start_time": "2024-07-12T08:49:12.104552",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.877097906960573\n"
     ]
    }
   ],
   "source": [
    "DT = DecisionTreeClassifier(\n",
    "    max_depth = 6,\n",
    "    class_weight = {\n",
    "        1:0.12,\n",
    "        0:0.88\n",
    "    }\n",
    ")\n",
    "DT.fit(x_train,y_train)\n",
    "y_pred_DT = DT.predict(x_test)\n",
    "print(\"Accuracy:\", accuracy_score(y_test, y_pred_DT))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dd621914",
   "metadata": {
    "papermill": {
     "duration": 0.018865,
     "end_time": "2024-07-12T08:50:12.812014",
     "exception": false,
     "start_time": "2024-07-12T08:50:12.793149",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "03d7e836",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T08:50:12.852527Z",
     "iopub.status.busy": "2024-07-12T08:50:12.852106Z",
     "iopub.status.idle": "2024-07-12T08:51:35.980794Z",
     "shell.execute_reply": "2024-07-12T08:51:35.979410Z"
    },
    "papermill": {
     "duration": 83.17214,
     "end_time": "2024-07-12T08:51:36.003053",
     "exception": false,
     "start_time": "2024-07-12T08:50:12.830913",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.877097906960573\n"
     ]
    }
   ],
   "source": [
    "RF = RandomForestClassifier(\n",
    "    n_estimators=5,\n",
    "    max_depth = 6,\n",
    "    class_weight = {\n",
    "        1:0.12,\n",
    "        0:0.88\n",
    "    }\n",
    ")\n",
    "RF.fit(x_train,y_train)\n",
    "y_pred_RF = DT.predict(x_test)\n",
    "print(\"Accuracy:\", accuracy_score(y_test, y_pred_RF))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ac62cb90",
   "metadata": {
    "papermill": {
     "duration": 0.019611,
     "end_time": "2024-07-12T08:51:36.041994",
     "exception": false,
     "start_time": "2024-07-12T08:51:36.022383",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Voting classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "9aa6a010",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T08:51:36.082294Z",
     "iopub.status.busy": "2024-07-12T08:51:36.081864Z",
     "iopub.status.idle": "2024-07-12T08:56:07.230514Z",
     "shell.execute_reply": "2024-07-12T08:56:07.229023Z"
    },
    "papermill": {
     "duration": 271.1907,
     "end_time": "2024-07-12T08:56:07.252024",
     "exception": false,
     "start_time": "2024-07-12T08:51:36.061324",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.88\n"
     ]
    }
   ],
   "source": [
    "voting_clf_hard = VotingClassifier(\n",
    "    estimators=[\n",
    "        ('LogisticRegression', lr),  \n",
    "        ('DecisionTree', DT),  \n",
    "        ('RandomForest', RF),  \n",
    "    ],\n",
    "    voting='hard'  \n",
    ")\n",
    "\n",
    "voting_clf_hard.fit(x_train, y_train)\n",
    "y_pred_voting_clf_hard = voting_clf_hard.predict(x_test)\n",
    "\n",
    "accuracy = voting_clf_hard.score(x_test, y_test)\n",
    "print(f'Accuracy: {accuracy:.2f}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "8b3f6b07",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T08:56:07.293663Z",
     "iopub.status.busy": "2024-07-12T08:56:07.293215Z",
     "iopub.status.idle": "2024-07-12T08:59:51.912670Z",
     "shell.execute_reply": "2024-07-12T08:59:51.910952Z"
    },
    "papermill": {
     "duration": 224.663438,
     "end_time": "2024-07-12T08:59:51.934919",
     "exception": false,
     "start_time": "2024-07-12T08:56:07.271481",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.88\n"
     ]
    }
   ],
   "source": [
    "voting_clf_soft = VotingClassifier(\n",
    "    estimators=[\n",
    "        ('LogisticRegression', lr),  \n",
    "        ('DecisionTree', DT),  \n",
    "        ('RandomForest', RF),  \n",
    "    ],\n",
    "    voting='soft'  \n",
    ")\n",
    "\n",
    "voting_clf_soft.fit(x_train, y_train)\n",
    "y_pred_voting_clf_soft = voting_clf_soft.predict(x_test)\n",
    "\n",
    "accuracy = voting_clf_soft.score(x_test, y_test)\n",
    "print(f'Accuracy: {accuracy:.2f}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "54135edc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T08:59:51.976885Z",
     "iopub.status.busy": "2024-07-12T08:59:51.975700Z",
     "iopub.status.idle": "2024-07-12T09:01:58.653818Z",
     "shell.execute_reply": "2024-07-12T09:01:58.652462Z"
    },
    "papermill": {
     "duration": 126.70247,
     "end_time": "2024-07-12T09:01:58.656844",
     "exception": false,
     "start_time": "2024-07-12T08:59:51.954374",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "lr_train_pred = lr.predict(x_train).reshape(-1, 1)\n",
    "DT_train_pred = DT.predict(x_train).reshape(-1, 1)\n",
    "RF_train_pred = RF.predict(x_train).reshape(-1, 1)\n",
    "voting_clf_soft_train_pred = voting_clf_soft.predict(x_train).reshape(-1, 1)\n",
    "voting_clf_hard_train_pred = voting_clf_hard.predict(x_train).reshape(-1, 1)\n",
    "\n",
    "lr_test_pred = lr.predict(x_test).reshape(-1, 1)\n",
    "DT_test_pred = DT.predict(x_test).reshape(-1, 1)\n",
    "RF_test_pred = RF.predict(x_test).reshape(-1, 1)\n",
    "voting_clf_soft_test_pred = voting_clf_soft.predict(x_test).reshape(-1, 1)\n",
    "voting_clf_hard_test_pred = voting_clf_hard.predict(x_test).reshape(-1, 1)\n",
    "\n",
    "X_train_meta = np.hstack(\n",
    "    (\n",
    "        lr_train_pred, \n",
    "        DT_train_pred, \n",
    "        RF_train_pred,\n",
    "        voting_clf_soft_train_pred,\n",
    "        voting_clf_hard_train_pred\n",
    "    )\n",
    ")\n",
    "X_test_meta = np.hstack(\n",
    "    (\n",
    "        lr_test_pred, \n",
    "        DT_test_pred, \n",
    "        RF_test_pred,\n",
    "        voting_clf_soft_test_pred,\n",
    "        voting_clf_hard_test_pred\n",
    "    )\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6209679c",
   "metadata": {
    "papermill": {
     "duration": 0.01924,
     "end_time": "2024-07-12T09:01:58.695795",
     "exception": false,
     "start_time": "2024-07-12T09:01:58.676555",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### adaboostclassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "c547755e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T09:01:58.736439Z",
     "iopub.status.busy": "2024-07-12T09:01:58.736038Z",
     "iopub.status.idle": "2024-07-12T09:02:35.563719Z",
     "shell.execute_reply": "2024-07-12T09:02:35.562604Z"
    },
    "papermill": {
     "duration": 36.870657,
     "end_time": "2024-07-12T09:02:35.585833",
     "exception": false,
     "start_time": "2024-07-12T09:01:58.715176",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AdaBoost Accuracy: 0.88\n"
     ]
    }
   ],
   "source": [
    "ada = AdaBoostClassifier(n_estimators=10)\n",
    "ada.fit(X_train_meta, y_train)\n",
    "ada_predictions = ada.predict(X_test_meta)\n",
    "ada_accuracy = ada.score(X_test_meta, y_test)\n",
    "print(f'AdaBoost Accuracy: {ada_accuracy:.2f}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "119a0ffd",
   "metadata": {
    "papermill": {
     "duration": 0.019441,
     "end_time": "2024-07-12T09:02:35.624993",
     "exception": false,
     "start_time": "2024-07-12T09:02:35.605552",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### gradintboostingclassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "cc145b0d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T09:02:35.665944Z",
     "iopub.status.busy": "2024-07-12T09:02:35.665485Z",
     "iopub.status.idle": "2024-07-12T09:02:51.421922Z",
     "shell.execute_reply": "2024-07-12T09:02:51.420309Z"
    },
    "papermill": {
     "duration": 15.780276,
     "end_time": "2024-07-12T09:02:51.424654",
     "exception": false,
     "start_time": "2024-07-12T09:02:35.644378",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Gradient Boosting Accuracy: 0.88\n"
     ]
    }
   ],
   "source": [
    "gboost = GradientBoostingClassifier(n_estimators=10)\n",
    "gboost.fit(X_train_meta, y_train)\n",
    "gboost_predictions = gboost.predict(X_test_meta)\n",
    "gboost_accuracy = gboost.score(X_test_meta, y_test)\n",
    "print(f'Gradient Boosting Accuracy: {gboost_accuracy:.2f}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1829ce25",
   "metadata": {
    "papermill": {
     "duration": 0.021137,
     "end_time": "2024-07-12T09:02:51.465382",
     "exception": false,
     "start_time": "2024-07-12T09:02:51.444245",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Testing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "a82baf43",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T09:02:51.506314Z",
     "iopub.status.busy": "2024-07-12T09:02:51.505863Z",
     "iopub.status.idle": "2024-07-12T09:03:07.213504Z",
     "shell.execute_reply": "2024-07-12T09:03:07.212232Z"
    },
    "papermill": {
     "duration": 15.731339,
     "end_time": "2024-07-12T09:03:07.216386",
     "exception": false,
     "start_time": "2024-07-12T09:02:51.485047",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "tdf = pd.read_csv('/kaggle/input/playground-series-s4e7/test.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "f237b530",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T09:03:07.258517Z",
     "iopub.status.busy": "2024-07-12T09:03:07.257414Z",
     "iopub.status.idle": "2024-07-12T09:03:07.780578Z",
     "shell.execute_reply": "2024-07-12T09:03:07.779239Z"
    },
    "papermill": {
     "duration": 0.547015,
     "end_time": "2024-07-12T09:03:07.783282",
     "exception": false,
     "start_time": "2024-07-12T09:03:07.236267",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Driving_License</th>\n",
       "      <th>Region_Code</th>\n",
       "      <th>Previously_Insured</th>\n",
       "      <th>Vehicle_Age</th>\n",
       "      <th>Vehicle_Damage</th>\n",
       "      <th>Annual_Premium</th>\n",
       "      <th>Policy_Sales_Channel</th>\n",
       "      <th>Vintage</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Female</td>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>47.0</td>\n",
       "      <td>0</td>\n",
       "      <td>&lt; 1 Year</td>\n",
       "      <td>No</td>\n",
       "      <td>2630.0</td>\n",
       "      <td>160.0</td>\n",
       "      <td>228</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Male</td>\n",
       "      <td>47</td>\n",
       "      <td>1</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1-2 Year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>37483.0</td>\n",
       "      <td>124.0</td>\n",
       "      <td>123</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Male</td>\n",
       "      <td>47</td>\n",
       "      <td>1</td>\n",
       "      <td>43.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1-2 Year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>2630.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>271</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Female</td>\n",
       "      <td>22</td>\n",
       "      <td>1</td>\n",
       "      <td>47.0</td>\n",
       "      <td>1</td>\n",
       "      <td>&lt; 1 Year</td>\n",
       "      <td>No</td>\n",
       "      <td>24502.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>115</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Male</td>\n",
       "      <td>51</td>\n",
       "      <td>1</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1-2 Year</td>\n",
       "      <td>No</td>\n",
       "      <td>34115.0</td>\n",
       "      <td>124.0</td>\n",
       "      <td>148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7669861</th>\n",
       "      <td>Male</td>\n",
       "      <td>57</td>\n",
       "      <td>1</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1-2 Year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>51661.0</td>\n",
       "      <td>124.0</td>\n",
       "      <td>109</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7669862</th>\n",
       "      <td>Male</td>\n",
       "      <td>28</td>\n",
       "      <td>1</td>\n",
       "      <td>50.0</td>\n",
       "      <td>1</td>\n",
       "      <td>&lt; 1 Year</td>\n",
       "      <td>No</td>\n",
       "      <td>25651.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>184</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7669863</th>\n",
       "      <td>Male</td>\n",
       "      <td>47</td>\n",
       "      <td>1</td>\n",
       "      <td>33.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1-2 Year</td>\n",
       "      <td>No</td>\n",
       "      <td>2630.0</td>\n",
       "      <td>138.0</td>\n",
       "      <td>63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7669864</th>\n",
       "      <td>Male</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>&lt; 1 Year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>38866.0</td>\n",
       "      <td>124.0</td>\n",
       "      <td>119</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7669865</th>\n",
       "      <td>Male</td>\n",
       "      <td>23</td>\n",
       "      <td>1</td>\n",
       "      <td>46.0</td>\n",
       "      <td>1</td>\n",
       "      <td>&lt; 1 Year</td>\n",
       "      <td>No</td>\n",
       "      <td>27498.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>79</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7669866 rows Ã— 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Gender  Age  Driving_License  Region_Code  Previously_Insured  \\\n",
       "0        Female   20                1         47.0                   0   \n",
       "1          Male   47                1         28.0                   0   \n",
       "2          Male   47                1         43.0                   0   \n",
       "3        Female   22                1         47.0                   1   \n",
       "4          Male   51                1         19.0                   0   \n",
       "...         ...  ...              ...          ...                 ...   \n",
       "7669861    Male   57                1         28.0                   0   \n",
       "7669862    Male   28                1         50.0                   1   \n",
       "7669863    Male   47                1         33.0                   1   \n",
       "7669864    Male   30                1         28.0                   0   \n",
       "7669865    Male   23                1         46.0                   1   \n",
       "\n",
       "        Vehicle_Age Vehicle_Damage  Annual_Premium  Policy_Sales_Channel  \\\n",
       "0          < 1 Year             No          2630.0                 160.0   \n",
       "1          1-2 Year            Yes         37483.0                 124.0   \n",
       "2          1-2 Year            Yes          2630.0                  26.0   \n",
       "3          < 1 Year             No         24502.0                 152.0   \n",
       "4          1-2 Year             No         34115.0                 124.0   \n",
       "...             ...            ...             ...                   ...   \n",
       "7669861    1-2 Year            Yes         51661.0                 124.0   \n",
       "7669862    < 1 Year             No         25651.0                 152.0   \n",
       "7669863    1-2 Year             No          2630.0                 138.0   \n",
       "7669864    < 1 Year            Yes         38866.0                 124.0   \n",
       "7669865    < 1 Year             No         27498.0                 152.0   \n",
       "\n",
       "         Vintage  \n",
       "0            228  \n",
       "1            123  \n",
       "2            271  \n",
       "3            115  \n",
       "4            148  \n",
       "...          ...  \n",
       "7669861      109  \n",
       "7669862      184  \n",
       "7669863       63  \n",
       "7669864      119  \n",
       "7669865       79  \n",
       "\n",
       "[7669866 rows x 10 columns]"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tdf = tdf.drop(columns = ['id'])\n",
    "tdf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "1180d242",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T09:03:07.826609Z",
     "iopub.status.busy": "2024-07-12T09:03:07.826178Z",
     "iopub.status.idle": "2024-07-12T09:03:23.517184Z",
     "shell.execute_reply": "2024-07-12T09:03:23.515797Z"
    },
    "papermill": {
     "duration": 15.715661,
     "end_time": "2024-07-12T09:03:23.519942",
     "exception": false,
     "start_time": "2024-07-12T09:03:07.804281",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "tdf.replace(encoder_dict, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "dc46ffb1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T09:03:23.562366Z",
     "iopub.status.busy": "2024-07-12T09:03:23.561851Z",
     "iopub.status.idle": "2024-07-12T09:04:58.851637Z",
     "shell.execute_reply": "2024-07-12T09:04:58.850398Z"
    },
    "papermill": {
     "duration": 95.31434,
     "end_time": "2024-07-12T09:04:58.854701",
     "exception": false,
     "start_time": "2024-07-12T09:03:23.540361",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "lr_tdf_pred = lr.predict(tdf).reshape(-1, 1)\n",
    "DT_tdf_pred = DT.predict(tdf).reshape(-1, 1)\n",
    "RF_tdf_pred = RF.predict(tdf).reshape(-1, 1)\n",
    "voting_clf_soft_tdf_pred = voting_clf_soft.predict(tdf).reshape(-1, 1)\n",
    "voting_clf_hard_tdf_pred = voting_clf_hard.predict(tdf).reshape(-1, 1)\n",
    "\n",
    "tdf_meta = np.hstack(\n",
    "    (\n",
    "        lr_tdf_pred, \n",
    "        DT_tdf_pred, \n",
    "        RF_tdf_pred,\n",
    "        voting_clf_soft_tdf_pred,\n",
    "        voting_clf_hard_tdf_pred\n",
    "    )\n",
    ")\n",
    "\n",
    "ada_tdf_predictions = ada.predict(tdf_meta)\n",
    "gboost_tdf_predictions = gboost.predict(tdf_meta)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b9418939",
   "metadata": {
    "papermill": {
     "duration": 0.019965,
     "end_time": "2024-07-12T09:04:58.896495",
     "exception": false,
     "start_time": "2024-07-12T09:04:58.876530",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<html>\n",
    " <bpdy>\n",
    "     <iframe width=\"768\" height=\"432\" src=\"https://miro.com/app/live-embed/uXjVKzJEy6Y=/?moveToViewport=-3075,-1247,7084,3392&embedId=839535778325\" frameborder=\"0\" scrolling=\"no\" allow=\"fullscreen; clipboard-read; clipboard-write\" allowfullscreen></iframe>\n",
    "     \n",
    " <body/>\n",
    " <html/>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "c70399b3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T09:04:58.938461Z",
     "iopub.status.busy": "2024-07-12T09:04:58.937976Z",
     "iopub.status.idle": "2024-07-12T09:04:58.943980Z",
     "shell.execute_reply": "2024-07-12T09:04:58.942663Z"
    },
    "papermill": {
     "duration": 0.030205,
     "end_time": "2024-07-12T09:04:58.946634",
     "exception": false,
     "start_time": "2024-07-12T09:04:58.916429",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "best_pred = ada_tdf_predictions"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fd80c508",
   "metadata": {
    "papermill": {
     "duration": 0.021423,
     "end_time": "2024-07-12T09:04:58.988097",
     "exception": false,
     "start_time": "2024-07-12T09:04:58.966674",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# submission"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "faf1d325",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T09:04:59.029774Z",
     "iopub.status.busy": "2024-07-12T09:04:59.029365Z",
     "iopub.status.idle": "2024-07-12T09:05:13.128106Z",
     "shell.execute_reply": "2024-07-12T09:05:13.126695Z"
    },
    "papermill": {
     "duration": 14.122776,
     "end_time": "2024-07-12T09:05:13.130931",
     "exception": false,
     "start_time": "2024-07-12T09:04:59.008155",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "subs = pd.read_csv('/kaggle/input/playground-series-s4e7/sample_submission.csv')\n",
    "\n",
    "if len(subs) == len(best_pred):\n",
    "    subs['Response'] = best_pred\n",
    "    subs.to_csv('submission.csv', index=False)\n",
    "else:\n",
    "    print(f\"Error: Length of predictions ({len(best_pred)}) does not match length of submission file ({len(subs)}).\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 8930475,
     "sourceId": 73291,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30732,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 1145.225635,
   "end_time": "2024-07-12T09:05:15.776011",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-12T08:46:10.550376",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

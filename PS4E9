{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "86d4f398",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-09-09T05:14:47.210185Z",
     "iopub.status.busy": "2024-09-09T05:14:47.209583Z",
     "iopub.status.idle": "2024-09-09T05:14:50.317702Z",
     "shell.execute_reply": "2024-09-09T05:14:50.315592Z"
    },
    "papermill": {
     "duration": 3.138399,
     "end_time": "2024-09-09T05:14:50.321200",
     "exception": false,
     "start_time": "2024-09-09T05:14:47.182801",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# EDA\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# setup\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "from IPython.display import display,HTML\n",
    "from tqdm import tqdm\n",
    "\n",
    "# structure\n",
    "from sklearn.pipeline import Pipeline , make_pipeline\n",
    "from sklearn.preprocessing import LabelEncoder,StandardScaler,FunctionTransformer\n",
    "from sklearn.impute import KNNImputer\n",
    "from sklearn.model_selection import train_test_split,GridSearchCV\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.linear_model import LinearRegression,Lasso,Ridge,ElasticNet\n",
    "from sklearn.ensemble import AdaBoostRegressor,BaggingRegressor,StackingRegressor,RandomForestRegressor\n",
    "from sklearn.svm import SVR\n",
    "from sklearn.neighbors import KNeighborsRegressor"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c51ee18",
   "metadata": {
    "papermill": {
     "duration": 0.023446,
     "end_time": "2024-09-09T05:14:50.368709",
     "exception": false,
     "start_time": "2024-09-09T05:14:50.345263",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# BASE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8900fb13",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:14:50.418467Z",
     "iopub.status.busy": "2024-09-09T05:14:50.417594Z",
     "iopub.status.idle": "2024-09-09T05:14:51.505794Z",
     "shell.execute_reply": "2024-09-09T05:14:51.504377Z"
    },
    "papermill": {
     "duration": 1.116727,
     "end_time": "2024-09-09T05:14:51.509173",
     "exception": false,
     "start_time": "2024-09-09T05:14:50.392446",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv('/kaggle/input/playground-series-s4e9/train.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f1db3764",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:14:51.564250Z",
     "iopub.status.busy": "2024-09-09T05:14:51.563383Z",
     "iopub.status.idle": "2024-09-09T05:14:51.584324Z",
     "shell.execute_reply": "2024-09-09T05:14:51.582517Z"
    },
    "papermill": {
     "duration": 0.050413,
     "end_time": "2024-09-09T05:14:51.587669",
     "exception": false,
     "start_time": "2024-09-09T05:14:51.537256",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pipe_df = df.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e5a9f973",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:14:51.642313Z",
     "iopub.status.busy": "2024-09-09T05:14:51.641816Z",
     "iopub.status.idle": "2024-09-09T05:14:51.851262Z",
     "shell.execute_reply": "2024-09-09T05:14:51.848649Z"
    },
    "papermill": {
     "duration": 0.241046,
     "end_time": "2024-09-09T05:14:51.855017",
     "exception": false,
     "start_time": "2024-09-09T05:14:51.613971",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id                  0\n",
       "brand               0\n",
       "model               0\n",
       "model_year          0\n",
       "milage              0\n",
       "fuel_type        5083\n",
       "engine              0\n",
       "transmission        0\n",
       "ext_col             0\n",
       "int_col             0\n",
       "accident         2452\n",
       "clean_title     21419\n",
       "price               0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0d120fac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:14:51.921070Z",
     "iopub.status.busy": "2024-09-09T05:14:51.920563Z",
     "iopub.status.idle": "2024-09-09T05:14:52.293112Z",
     "shell.execute_reply": "2024-09-09T05:14:52.291214Z"
    },
    "papermill": {
     "duration": 0.412759,
     "end_time": "2024-09-09T05:14:52.297327",
     "exception": false,
     "start_time": "2024-09-09T05:14:51.884568",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1ed7b525",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:14:52.354279Z",
     "iopub.status.busy": "2024-09-09T05:14:52.353691Z",
     "iopub.status.idle": "2024-09-09T05:14:52.366216Z",
     "shell.execute_reply": "2024-09-09T05:14:52.364511Z"
    },
    "papermill": {
     "duration": 0.045277,
     "end_time": "2024-09-09T05:14:52.369337",
     "exception": false,
     "start_time": "2024-09-09T05:14:52.324060",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id               int64\n",
       "brand           object\n",
       "model           object\n",
       "model_year       int64\n",
       "milage           int64\n",
       "fuel_type       object\n",
       "engine          object\n",
       "transmission    object\n",
       "ext_col         object\n",
       "int_col         object\n",
       "accident        object\n",
       "clean_title     object\n",
       "price            int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5504115d",
   "metadata": {
    "papermill": {
     "duration": 0.025676,
     "end_time": "2024-09-09T05:14:52.421916",
     "exception": false,
     "start_time": "2024-09-09T05:14:52.396240",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# distributions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6aeac543",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:14:52.479911Z",
     "iopub.status.busy": "2024-09-09T05:14:52.479341Z",
     "iopub.status.idle": "2024-09-09T05:14:52.485859Z",
     "shell.execute_reply": "2024-09-09T05:14:52.484463Z"
    },
    "papermill": {
     "duration": 0.039848,
     "end_time": "2024-09-09T05:14:52.488557",
     "exception": false,
     "start_time": "2024-09-09T05:14:52.448709",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# num_cols = ['milage','price']\n",
    "\n",
    "# fig, ax = plt.subplots(2, 1, figsize=(15, 10))\n",
    "\n",
    "# for i, col in enumerate(num_cols):\n",
    "#     sns.histplot(\n",
    "#         df,\n",
    "#         x=col,\n",
    "#         ax=ax[i],\n",
    "#         kde=True\n",
    "#     )\n",
    "#     ax[i].set_title(col)\n",
    "\n",
    "# plt.tight_layout()\n",
    "# plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "25dc87c5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:14:52.544476Z",
     "iopub.status.busy": "2024-09-09T05:14:52.543909Z",
     "iopub.status.idle": "2024-09-09T05:14:52.550938Z",
     "shell.execute_reply": "2024-09-09T05:14:52.549499Z"
    },
    "papermill": {
     "duration": 0.038067,
     "end_time": "2024-09-09T05:14:52.553812",
     "exception": false,
     "start_time": "2024-09-09T05:14:52.515745",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "num_cols = ['milage']\n",
    "# logdf = {}\n",
    "# for col in num_cols:\n",
    "#     logdf[col] = list(np.log(df[col]))\n",
    "# logdf = pd.DataFrame(logdf)\n",
    "    \n",
    "# fig, ax = plt.subplots(2, 1, figsize=(15, 10))\n",
    "\n",
    "# for i, col in enumerate(num_cols):\n",
    "#     sns.histplot(\n",
    "#         logdf,\n",
    "#         x=col,\n",
    "#         ax=ax[i],\n",
    "#         kde=True\n",
    "#     )\n",
    "#     ax[i].set_title(col)\n",
    "\n",
    "# plt.tight_layout()\n",
    "# plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "82ce1188",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:14:52.607162Z",
     "iopub.status.busy": "2024-09-09T05:14:52.606646Z",
     "iopub.status.idle": "2024-09-09T05:14:52.613608Z",
     "shell.execute_reply": "2024-09-09T05:14:52.612322Z"
    },
    "papermill": {
     "duration": 0.037314,
     "end_time": "2024-09-09T05:14:52.616548",
     "exception": false,
     "start_time": "2024-09-09T05:14:52.579234",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def log_transform(df, columns):\n",
    "    for col in columns:\n",
    "        df[col] = np.log1p(df[col])  \n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "66620c81",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:14:52.669239Z",
     "iopub.status.busy": "2024-09-09T05:14:52.668690Z",
     "iopub.status.idle": "2024-09-09T05:14:52.680232Z",
     "shell.execute_reply": "2024-09-09T05:14:52.678423Z"
    },
    "papermill": {
     "duration": 0.041872,
     "end_time": "2024-09-09T05:14:52.684029",
     "exception": false,
     "start_time": "2024-09-09T05:14:52.642157",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "catcolumns = list(df.columns)\n",
    "\n",
    "# Remove the specific columns 'id', 'milage', and 'price'\n",
    "for c in ['id', 'milage', 'price']:\n",
    "    if c in catcolumns:\n",
    "        catcolumns.remove(c)\n",
    "\n",
    "len(catcolumns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "069bb1bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:14:52.736862Z",
     "iopub.status.busy": "2024-09-09T05:14:52.736287Z",
     "iopub.status.idle": "2024-09-09T05:14:52.744037Z",
     "shell.execute_reply": "2024-09-09T05:14:52.742388Z"
    },
    "papermill": {
     "duration": 0.037265,
     "end_time": "2024-09-09T05:14:52.746862",
     "exception": false,
     "start_time": "2024-09-09T05:14:52.709597",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# n_cols = 2\n",
    "# n_rows = len(catcolumns) // n_cols + len(catcolumns) % n_cols \n",
    "\n",
    "# fig, ax = plt.subplots(n_rows, n_cols, figsize=(18, len(catcolumns) * 3))\n",
    "# ax = ax.flatten()\n",
    "\n",
    "# for i, col in enumerate(catcolumns):\n",
    "#     if df[col].nunique() > 8:\n",
    "#         val_dict = df[col].value_counts().head(15)\n",
    "#         tmpdf = pd.DataFrame(val_dict).reset_index()\n",
    "#         tmpdf.columns = [col, 'count']\n",
    "        \n",
    "#         sns.barplot(\n",
    "#             x='count',  \n",
    "#             y=col,\n",
    "#             data=tmpdf,\n",
    "#             ax=ax[i]\n",
    "#         )\n",
    "#         ax[i].set_title(col)\n",
    "#         ax[i].tick_params(axis='x', rotation=45)  \n",
    "#     else:\n",
    "#         ax[i].pie(\n",
    "#             df[col].value_counts(),\n",
    "#             labels=df[col].value_counts().index,\n",
    "#             autopct='%1.1f%%',  \n",
    "#             startangle=90,      \n",
    "#             colors=sns.color_palette(\"husl\")  \n",
    "#         )\n",
    "#         ax[i].set_title(col)\n",
    "#         ax[i].axis('equal')  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ce2d0c44",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:14:52.803986Z",
     "iopub.status.busy": "2024-09-09T05:14:52.803444Z",
     "iopub.status.idle": "2024-09-09T05:14:52.810623Z",
     "shell.execute_reply": "2024-09-09T05:14:52.808786Z"
    },
    "papermill": {
     "duration": 0.039992,
     "end_time": "2024-09-09T05:14:52.813686",
     "exception": false,
     "start_time": "2024-09-09T05:14:52.773694",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# sns.scatterplot(df,x = 'milage',y = 'price')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e30245b2",
   "metadata": {
    "papermill": {
     "duration": 0.024777,
     "end_time": "2024-09-09T05:14:52.864266",
     "exception": false,
     "start_time": "2024-09-09T05:14:52.839489",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Feature engineering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "30d4c1aa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:14:52.921233Z",
     "iopub.status.busy": "2024-09-09T05:14:52.920652Z",
     "iopub.status.idle": "2024-09-09T05:14:53.632461Z",
     "shell.execute_reply": "2024-09-09T05:14:53.631070Z"
    },
    "papermill": {
     "duration": 0.745367,
     "end_time": "2024-09-09T05:14:53.635824",
     "exception": false,
     "start_time": "2024-09-09T05:14:52.890457",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Column Name</th>\n",
       "      <th>Unique Values</th>\n",
       "      <th>Top 15 Values</th>\n",
       "      <th>total_values</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>brand</td>\n",
       "      <td>[MINI, Lincoln, Chevrolet, Genesis, Mercedes-Benz, Audi, Ford, BMW, Tesla, Cadillac, Land, GMC, Toyota, Hyundai, Volvo, Volkswagen, Buick, Rivian, RAM, Hummer, Alfa, INFINITI, Jeep, Porsche, McLaren, Honda, Lexus, Dodge, Nissan, Jaguar, Acura, Kia, Mitsubishi, Rolls-Royce, Maserati, Pontiac, Saturn, Bentley, Mazda, Subaru, Ferrari, Aston, Lamborghini, Chrysler, Lucid, Lotus, Scion, smart, Karma, Plymouth, Suzuki, FIAT, Saab, Bugatti, Mercury, Polestar, Maybach]</td>\n",
       "      <td>{'Ford': 23088, 'Mercedes-Benz': 19172, 'BMW': 17028, 'Chevrolet': 16335, 'Audi': 10887, 'Porsche': 10612, 'Land': 9525, 'Toyota': 8850, 'Lexus': 8643, 'Jeep': 6474, 'Cadillac': 4674, 'RAM': 4249, 'Nissan': 3930, 'Tesla': 3738, 'INFINITI': 3276, 'GMC': 3215, 'Dodge': 3133, 'Mazda': 2719, 'Kia': 2497, 'Lincoln': 2423, 'Subaru': 2381, 'Acura': 2282, 'Honda': 2101, 'Hyundai': 2045, 'Volkswagen': 1765, 'Jaguar': 1319, 'Bentley': 1155, 'MINI': 1064, 'Genesis': 969, 'Buick': 940}</td>\n",
       "      <td>57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>model</td>\n",
       "      <td>[Cooper S Base, LS V8, Silverado 2500 LT, G90 5.0 Ultimate, Metris Base, A6 2.0T Sport, A8 L 3.0T, Silverado 1500 1LZ, F-150 XLT, M4 Base, Camaro 1LT, Model S P100D, Escalade ESV Platinum, S4 3.0T Premium Plus, Rover Range Rover P530 SE SWB, AMG C 63 S, Yukon Denali, Rover Defender SE, Tundra SR5, AMG C 63 Base, Rover Defender S, Equus Signature, Mustang Premium, A8 L 55, XC70 T6 Platinum, Sequoia Limited, F-250 XLT, Tacoma PreRunner, A5 2.0T Premium, A3 2.0T Premium, E-Class E 300, E-Class E 350 4MATIC, Jetta S, 528 i xDrive, 330 i xDrive, AMG G 63 Base, C-Class C 300 4MATIC Sport, Enclave Premium, 328 xi, Corvette Grand Sport, AMG GT 53 Base, R1S Adventure Package, 1500 Laramie, Corvette Base, H2 Base, Romeo Stelvio Ti Sport, QX60 Base, Model 3 Long Range, Model X 75D, Genesis Coupe 3.8 Base, M6 Base, Gladiator Rubicon, Thunderbird Deluxe, Rover Range Rover Sport HSE, SL-Class SL500 Roadster, GLS 450 Base 4MATIC, Cayenne Base, Corvette Stingray w/2LT, SSR Base, M5 Base, 86 860 Special Edition, G-Class G 550 4MATIC, Camry SE, E-Class E 350, 570S Spider, Highlander XLE, Sequoia Platinum, F-250 King Ranch, CR-V EX-L, 911 Carrera 4S, Camry Solara SLE, 4Runner SR5, M3 Base, RS 7 4.0T Prestige, Camry LE, Q5 2.0T Premium Plus, Expedition Limited, Mustang EcoBoost Premium, 2500 Big Horn, Wrangler X, Focus RS Base, Countryman Cooper S ALL4, NX 300 Base, Mustang GT, Highlander Limited Platinum, 430 i, Ram 1500 Laramie Mega Cab, Xterra S, Tahoe LT, S-Class S 63 AMG, Suburban 1500 LTZ, AMG GT AMG GT S, E-Class E 550, XJ8 L, AMG CLA 45 Base 4MATIC, TT 1.8T, Escalade Platinum, M8 Gran Coupe Competition, ILX Premium Package, Suburban LT, ...]</td>\n",
       "      <td>{'F-150 XLT': 2945, 'M3 Base': 2229, 'Camaro 2SS': 1709, 'M4 Base': 1622, 'Mustang GT Premium': 1526, 'F-150 Lariat': 1410, 'E-Class E 350 4MATIC': 1357, '1500 Laramie': 1249, '911 Carrera S': 1219, 'Corvette Base': 1184, 'E-Class E 350': 1148, 'GX 460 Base': 1124, '911 Carrera': 1111, 'Explorer XLT': 1091, 'Corvette Stingray w/2LT': 1081, 'Rover Range Rover Sport HSE': 1027, 'Wrangler Sport': 1001, 'AMG G 63 Base': 994, 'F-250 XLT': 893, 'QX60 Base': 847, 'F-250 Lariat': 846, '911 Carrera 4S': 831, 'RX 350 Base': 821, 'Camaro 1SS': 813, 'Model Y Long Range': 798, 'Suburban LT': 782, 'Highlander XLE': 769, 'Macan S': 751, 'Corvette Stingray w/3LT': 740, 'C-Class C 300 4MATIC Sport': 735}</td>\n",
       "      <td>1897</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>model_year</td>\n",
       "      <td>[2007, 2002, 2017, 2021, 2018, 2016, 2020, 2015, 2011, 2013, 2023, 2019, 2012, 2014, 2008, 2009, 2022, 2003, 2005, 2001, 2006, 2000, 2010, 2004, 1997, 1998, 1999, 1994, 1993, 1996, 1995, 2024, 1974, 1992]</td>\n",
       "      <td>{2021: 18198, 2018: 16414, 2020: 15848, 2022: 15749, 2019: 15409, 2016: 13696, 2017: 12794, 2015: 11389, 2023: 8769, 2014: 8415, 2013: 6796, 2011: 6265, 2012: 6095, 2008: 5156, 2007: 4876, 2010: 4235, 2005: 3129, 2006: 2814, 2009: 2716, 2004: 2570, 2003: 1906, 2001: 1534, 2002: 1282, 2000: 558, 1999: 554, 1998: 343, 1997: 312, 1996: 189, 2024: 162, 1993: 140}</td>\n",
       "      <td>34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>milage</td>\n",
       "      <td>[213000, 143250, 136731, 19500, 7388, 40950, 62200, 102604, 38352, 74850, 212500, 81500, 93971, 60000, 20000, 41500, 15000, 46100, 153250, 16002, 7978, 87092, 154247, 51000, 100680, 183000, 67100, 39000, 244200, 11000, 57550, 17000, 30300, 120000, 22000, 83424, 7600, 20172, 67289, 9642, 107818, 32437, 55000, 10972, 7000, 27352, 171896, 62500, 137405, 33060, 49000, 38360, 88000, 66770, 73500, 12100, 70582, 46508, 122000, 153000, 44147, 86202, 9000, 87500, 61145, 1100, 17500, 22500, 170000, 76500, 3254, 55018, 2958, 40200, 3500, 45000, 137000, 80000, 186117, 13750, 23400, 90400, 192000, 29830, 83112, 95400, 110000, 29720, 26000, 6449, 160000, 1500, 46300, 153692, 63500, 100900, 85500, 41000, 167500, 9738, ...]</td>\n",
       "      <td>{60000: 1319, 170000: 1246, 120000: 1178, 110000: 1155, 130000: 970, 40000: 969, 50000: 921, 90000: 899, 87500: 808, 26000: 788, 39000: 758, 41500: 730, 45000: 672, 55000: 663, 70000: 661, 22000: 657, 106000: 649, 92000: 635, 152000: 627, 48000: 622, 28000: 622, 160000: 595, 15000: 582, 134000: 575, 123500: 561, 54000: 558, 162000: 557, 25000: 556, 18000: 551, 33000: 551}</td>\n",
       "      <td>6651</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>fuel_type</td>\n",
       "      <td>[Gasoline, E85 Flex Fuel, nan, Hybrid, Diesel, Plug-In Hybrid, –, not supported]</td>\n",
       "      <td>{'Gasoline': 165940, 'Hybrid': 6832, 'E85 Flex Fuel': 5406, 'Diesel': 3955, '–': 781, 'Plug-In Hybrid': 521, 'not supported': 15}</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>engine</td>\n",
       "      <td>[172.0HP 1.6L 4 Cylinder Engine Gasoline Fuel, 252.0HP 3.9L 8 Cylinder Engine Gasoline Fuel, 320.0HP 5.3L 8 Cylinder Engine Flex Fuel Capability, 420.0HP 5.0L 8 Cylinder Engine Gasoline Fuel, 208.0HP 2.0L 4 Cylinder Engine Gasoline Fuel, 252.0HP 2.0L 4 Cylinder Engine Gasoline Fuel, 333.0HP 3.0L V6 Cylinder Engine Gasoline Fuel, 355.0HP 5.3L 8 Cylinder Engine Flex Fuel Capability, 2.7L V6 24V PDI DOHC Twin Turbo, 425.0HP 3.0L Straight 6 Cylinder Engine Gasoline Fuel, 312.0HP 3.6L V6 Cylinder Engine Gasoline Fuel, Electric Motor Electric Fuel System, 420.0HP 6.2L 8 Cylinder Engine Gasoline Fuel, 523.0HP 4.4L 8 Cylinder Engine Gasoline Fuel, 503.0HP 4.0L 8 Cylinder Engine Gasoline Fuel, 395.0HP 3.0L Straight 6 Cylinder Engine Gasoline/Mild Electric Hybrid, 310.0HP 4.6L 8 Cylinder Engine Gasoline Fuel, 469.0HP 4.0L 8 Cylinder Engine Gasoline Fuel, 5.2L V10 40V PDI DOHC, 429.0HP 5.0L 8 Cylinder Engine Gasoline Fuel, 210.0HP 3.7L V6 Cylinder Engine Gasoline Fuel, 335.0HP 3.0L V6 Cylinder Engine Gasoline/Mild Electric Hybrid, 316.0HP 2.0L 4 Cylinder Engine Gasoline Fuel, 381.0HP 5.7L 8 Cylinder Engine Gasoline Fuel, 450.0HP 6.7L 8 Cylinder Engine Diesel Fuel, 236.0HP 4.0L V6 Cylinder Engine Gasoline Fuel, 211.0HP 2.0L 4 Cylinder Engine Gasoline Fuel, 220.0HP 2.0L 4 Cylinder Engine Gasoline Fuel, 255.0HP 2.0L 4 Cylinder Engine Gasoline Fuel, 518.0HP Electric Motor Electric Fuel System, 268.0HP 3.5L V6 Cylinder Engine Gasoline Fuel, 174.0HP 2.8L V6 Cylinder Engine Gasoline Fuel, 240.0HP 2.0L 4 Cylinder Engine Gasoline Fuel, 248.0HP 2.0L 4 Cylinder Engine Gasoline Fuel, 563.0HP 5.5L 8 Cylinder Engine Gasoline Fuel, 241.0HP 2.0L 4 Cylinder Engine Gasoline Fuel, 3.6L V6 24V GDI DOHC, 230.0HP 3.0L Straight 6 Cylinder Engine Gasoline Fuel, 430.0HP 6.2L 8 Cylinder Engine Gasoline Fuel, 4.0L V8 32V GDI DOHC Twin Turbo, 835.0HP Electric Motor Electric Fuel System, 5.7L V8 16V MPFI OHV, 300.0HP 5.4L 8 Cylinder Engine Gasoline Fuel, 310.0HP 6.8L 10 Cylinder Engine Gasoline Fuel, 280.0HP 2.0L 4 Cylinder Engine Gasoline Fuel, 295.0HP 3.5L V6 Cylinder Engine Gasoline Fuel, Dual Motor - Standard, 348.0HP 3.8L V6 Cylinder Engine Gasoline Fuel, 560.0HP 4.4L 8 Cylinder Engine Gasoline Fuel, 285.0HP 3.6L V6 Cylinder Engine Gasoline Fuel, 300.0HP 4.4L 8 Cylinder Engine Gasoline Fuel, 302.0HP 5.0L 8 Cylinder Engine Gasoline Fuel, 3.0L V6 24V GDI DOHC Twin Turbo, 300.0HP 3.6L V6 Cylinder Engine Gasoline Fuel, 490.0HP 6.2L 8 Cylinder Engine Gasoline Fuel, 300.0HP 5.3L 8 Cylinder Engine Gasoline Fuel, 200.0HP 2.0L 4 Cylinder Engine Gasoline Fuel, 416.0HP 4.0L 8 Cylinder Engine Gasoline Fuel, 179.0HP 2.5L 4 Cylinder Engine Gasoline Fuel, 302.0HP 3.5L V6 Cylinder Engine Gasoline Fuel, 3.8L V8 32V MPFI DOHC Twin Turbo, 3.4L V6 24V PDI DOHC Twin Turbo Hybrid, 385.0HP 6.2L 8 Cylinder Engine Flex Fuel Capability, 160.0HP 2.4L 4 Cylinder Engine Gasoline Fuel, 385.0HP 3.8L Flat 6 Cylinder Engine Gasoline Fuel, 210.0HP 3.3L V6 Cylinder Engine Gasoline Fuel, 385.0HP 5.0L 8 Cylinder Engine Gasoline Fuel, 270.0HP 4.0L V6 Cylinder Engine Gasoline Fuel, 560.0HP 4.0L 8 Cylinder Engine Gasoline Fuel, 210.0HP 4.0L V6 Cylinder Engine Gasoline Fuel, 3.5L V6 24V PDI DOHC Twin Turbo, 310.0HP 2.3L 4 Cylinder Engine Gasoline Fuel, 350.0HP 6.7L Straight 6 Cylinder Engine Diesel Fuel, 190.0HP 4.0L Straight 6 Cylinder Engine Gasoline Fuel, 350.0HP 2.3L 4 Cylinder Engine Gasoline Fuel, 181.0HP 1.6L 4 Cylinder Engine Gasoline Fuel, 2.0L I4 16V PDI DOHC Turbo, 300.0HP 4.6L 8 Cylinder Engine Gasoline Fuel, 270.0HP 3.5L V6 Cylinder Engine Gasoline Fuel, 265.0HP 3.5L V6 Cylinder Engine Gasoline Fuel, 345.0HP 5.7L 8 Cylinder Engine Gasoline Fuel, 400.0HP 3.0L V6 Cylinder Engine Gasoline Fuel, 261.0HP 4.0L V6 Cylinder Engine Gasoline Fuel, 355.0HP 5.3L 8 Cylinder Engine Gasoline Fuel, 536.0HP 5.5L 8 Cylinder Engine Gasoline Fuel, 320.0HP 5.3L 8 Cylinder Engine Gasoline Fuel, 333.0HP 3.2L Straight 6 Cylinder Engine Gasoline Fuel, 402.0HP 4.7L 8 Cylinder Engine Gasoline Fuel, 450.0HP 4.0L 8 Cylinder Engine Gasoline Fuel, 382.0HP 3.0L Straight 6 Cylinder Engine Gasoline/Mild Electric Hybrid, 180.0HP 1.8L 4 Cylinder Engine Gasoline Fuel, 617.0HP 4.4L 8 Cylinder Engine Gasoline Fuel, 2.4L I4 16V GDI DOHC, 173.0HP 2.7L V6 Cylinder Engine Gasoline Fuel, 389.0HP 3.0L Straight 6 Cylinder Engine Plug-In Electric/Gas, 429.0HP 4.7L 8 Cylinder Engine Gasoline Fuel, 318.0HP 3.6L V6 Cylinder Engine Gasoline Fuel, 2.0 Liter DOHC Turbo, 3.6L V6 24V MPFI DOHC, 325.0HP 3.7L V6 Cylinder Engine Gasoline Fuel, ...]</td>\n",
       "      <td>{'355.0HP 5.3L 8 Cylinder Engine Gasoline Fuel': 3462, '240.0HP 2.0L 4 Cylinder Engine Gasoline Fuel': 2902, '420.0HP 6.2L 8 Cylinder Engine Gasoline Fuel': 2841, '2.0L I4 16V GDI DOHC Turbo': 2680, '375.0HP 3.5L V6 Cylinder Engine Gasoline Fuel': 2451, '340.0HP 3.0L V6 Cylinder Engine Gasoline Fuel': 2436, '490.0HP 6.2L 8 Cylinder Engine Gasoline Fuel': 2187, '455.0HP 6.2L 8 Cylinder Engine Gasoline Fuel': 2138, '425.0HP 3.0L Straight 6 Cylinder Engine Gasoline Fuel': 2134, '300.0HP 3.0L Straight 6 Cylinder Engine Gasoline Fuel': 2084, '295.0HP 3.5L V6 Cylinder Engine Gasoline Fuel': 1917, '285.0HP 3.6L V6 Cylinder Engine Gasoline Fuel': 1910, '302.0HP 3.5L V6 Cylinder Engine Gasoline Fuel': 1895, '3.5L V6 24V PDI DOHC Twin Turbo': 1842, '301.0HP 4.6L 8 Cylinder Engine Gasoline Fuel': 1578, '5.7L V8 16V MPFI OHV': 1540, '4.0L V8 32V GDI DOHC Twin Turbo': 1516, '3.6L V6 24V MPFI DOHC': 1480, '268.0HP 3.5L V6 Cylinder Engine Gasoline Fuel': 1470, '333.0HP 3.0L V6 Cylinder Engine Gasoline Fuel': 1319, '365.0HP 3.5L V6 Cylinder Engine Gasoline Fuel': 1275, '211.0HP 2.0L 4 Cylinder Engine Gasoline Fuel': 1234, '3.6L V6 24V GDI DOHC': 1224, '2.0 Liter Turbo': 1164, '210.0HP 3.7L V6 Cylinder Engine Gasoline Fuel': 1132, '252.0HP 2.0L 4 Cylinder Engine Gasoline Fuel': 1120, '248.0HP 2.0L 4 Cylinder Engine Gasoline Fuel': 1080, '255.0HP 2.0L 4 Cylinder Engine Gasoline Fuel': 1054, '380.0HP 3.0L V6 Cylinder Engine Gasoline Fuel': 1027, '381.0HP 5.7L 8 Cylinder Engine Gasoline Fuel': 1012}</td>\n",
       "      <td>1117</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>transmission</td>\n",
       "      <td>[A/T, Transmission w/Dual Shift Mode, 7-Speed A/T, 8-Speed A/T, 10-Speed Automatic, 1-Speed A/T, 6-Speed A/T, 10-Speed A/T, 9-Speed A/T, 8-Speed Automatic, 9-Speed Automatic, 5-Speed A/T, Automatic, 7-Speed Automatic with Auto-Shift, CVT Transmission, 5-Speed M/T, M/T, 6-Speed M/T, 6-Speed Automatic, 4-Speed Automatic, 7-Speed M/T, 2-Speed A/T, 1-Speed Automatic, Automatic CVT, 4-Speed A/T, 6-Speed Manual, Transmission Overdrive Switch, 8-Speed Automatic with Auto-Shift, 7-Speed Manual, 7-Speed Automatic, 9-Speed Automatic with Auto-Shift, 6-Speed Automatic with Auto-Shift, 6-Speed Electronically Controlled Automatic with O, F, CVT-F, 8-Speed Manual, Manual, –, 2, 6 Speed At/Mt, 5-Speed Automatic, 2-Speed Automatic, 8-SPEED A/T, 7-Speed, Variable, Single-Speed Fixed Gear, 8-SPEED AT, 10-Speed Automatic with Overdrive, 7-Speed DCT Automatic, SCHEDULED FOR OR IN PRODUCTION, 6-Speed, 6 Speed Mt]</td>\n",
       "      <td>{'A/T': 49904, '8-Speed A/T': 20645, 'Transmission w/Dual Shift Mode': 19255, '6-Speed A/T': 18044, '6-Speed M/T': 11998, '7-Speed A/T': 11124, 'Automatic': 10691, '8-Speed Automatic': 8431, '10-Speed A/T': 8044, '9-Speed A/T': 3866, '5-Speed A/T': 3217, '10-Speed Automatic': 3164, '6-Speed Automatic': 2799, '4-Speed A/T': 2546, '5-Speed M/T': 2409, '9-Speed Automatic': 2325, 'CVT Transmission': 1990, '1-Speed A/T': 1869, 'M/T': 1179, '7-Speed Automatic with Auto-Shift': 1172, 'Automatic CVT': 829, '8-Speed Automatic with Auto-Shift': 549, '1-Speed Automatic': 365, '7-Speed M/T': 355, '6-Speed Manual': 211, '7-Speed Automatic': 178, '5-Speed Automatic': 159, 'Transmission Overdrive Switch': 156, '7-Speed Manual': 151, '6-Speed Automatic with Auto-Shift': 111}</td>\n",
       "      <td>52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>ext_col</td>\n",
       "      <td>[Yellow, Silver, Blue, Black, White, Snowflake White Pearl Metallic, Gray, Green, Santorini Black Metallic, Purple, Ebony Twilight Metallic, Red, Magnetite Black Metallic, Diamond Black, Vega Blue, Beige, Gold, Platinum White Pearl, Metallic, White Frost Tri-Coat, Firecracker Red Clearcoat, Phytonic Blue Metallic, Blu, Orange, Brown, Brilliant Silver Metallic, Black Raven, Black Clearcoat, Firenze Red, Agate Black Metallic, Glacial White Pearl, Majestic Plum Metallic, designo Diamond White Metallic, Oxford White, Black Sapphire Metallic, Mythos Black, Granite Crystal Clearcoat Metallic, White Diamond Tri-Coat, Magnetite Gray Metallic, Carpathian Grey Premium Metallic, designo Diamond White Bright, Phantom Black Pearl Effect / Black Roof, Nebula Gray Pearl, Deep Crystal Blue Mica, Flame Red Clearcoat, Lunar Blue Metallic, Bright White Clearcoat, Rapid Red Metallic Tinted Clearcoat, Caviar, Dark Ash Metallic, Velvet Red Pearlcoat, Silver Zynith, Super Black, Antimatter Blue Metallic, Dark Moon Blue Metallic, Summit White, Ebony Black, –, Black Cherry, Delmonico Red Pearlcoat, Platinum Quartz Metallic, Ultra White, Python Green, Garnet Red Metallic, Snow White Pearl, Cajun Red Tintcoat, Midnight Black Metallic, Diamond White, Mythos Black Metallic, Soul Red Crystal Metallic, Atomic Silver, Obsidian, Magnetic Metallic, Twilight Blue Metallic, Star White, Stormy Sea, Tango Red Metallic, Hyper Red, Portofino Gray, MANUFAKTUR Diamond White Bright, Snowflake White Pearl, Patriot Blue Pearlcoat, Tungsten Metallic, Chronos Gray Metallic, Silver Ice Metallic, Daytona Gray Pearl Effect, Ruby Red Metallic Tinted Clearcoat, Alpine White, Eminent White Pearl, Manhattan Noir Metallic, Quicksilver Metallic, Stellar Black Metallic, Sparkling Silver, Blueprint, Crystal Black Silica, Black Noir Pearl, Arancio Borealis, Typhoon Gray, Ibis White, Graphite Grey, ...]</td>\n",
       "      <td>{'Black': 48658, 'White': 43815, 'Gray': 25293, 'Silver': 16995, 'Blue': 14555, 'Red': 9901, 'Green': 2698, 'Gold': 1668, 'Brown': 1162, 'Orange': 1139, 'Beige': 1087, 'Yellow': 978, 'Bright White Clearcoat': 755, 'Diamond Black': 711, 'Agate Black Metallic': 639, 'Summit White': 514, 'Silver Ice Metallic': 456, 'Mythos Black Metallic': 417, 'Midnight Black Metallic': 379, '–': 366, 'Granite Crystal Clearcoat Metallic': 365, 'Purple': 354, 'Santorini Black Metallic': 323, 'Oxford White': 306, 'Obsidian Black Metallic': 293, 'Black Clearcoat': 292, 'Ebony Twilight Metallic': 289, 'Alpine White': 287, 'designo Diamond White Metallic': 215, 'Daytona Gray Pearl Effect': 215}</td>\n",
       "      <td>319</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>int_col</td>\n",
       "      <td>[Gray, Beige, Black, –, Blue, White, Red, Brown, Dark Galvanized, Parchment., Boulder, Orange, Medium Earth Gray, Ebony, Canberra Beige, Jet Black, Silver, Light Platinum / Jet Black, Macchiato/Magmagrey, Gold, Cloud, Rioja Red, Global Black, Green, Medium Stone, Navy Pier, Dark Ash, BLACK, Portland, Sandstone, Canberra Beige/Black, Diesel Gray / Black, Sarder Brown, Black Onyx, White / Brown, Black/Gun Metal, Slate, Satin Black, Macchiato Beige/Black, Charcoal, Black / Express Red, Cappuccino, Aragon Brown, Parchment, Oyster W/Contrast, Adrenaline Red, Ebony., Shara Beige, Graystone, Pearl Beige, Nero Ade, Graphite, Tan/Ebony/Ebony, Charcoal Black, Medium Ash Gray, Ebony Black, Light Titanium, Sakhir Orange, Tan, Rock Gray, Brandy, Carbon Black, Amber, Black w/Red Stitching, Hotspur, Chateau, Ice, Deep Garnet, Blk, Grace White, Oyster/Black, Mesa, Espresso, Black/Graphite, Ebony / Ebony Accents, Tan/Ebony, Ceramic, Medium Dark Slate, Graphite w/Gun Metal, Obsidian Black, Cocoa / Dune, Roast, Yellow, Hotspur Hide, Gray w/Blue Bolsters, Chestnut, Saiga Beige, ORANGE, Charles Blue, Walnut, Ivory / Ebony, Caramel, Pimento Red w/Ebony, Saddle Brown, Dark Gray, Silk Beige/Espresso Brown, Black / Brown, Ebony/Light Oyster Stitch, Ebony / Pimento, Mistral Gray / Raven, ...]</td>\n",
       "      <td>{'Black': 107674, 'Beige': 24495, 'Gray': 21204, 'Brown': 5810, 'Red': 5145, 'White': 4743, '–': 4527, 'Jet Black': 2398, 'Ebony': 1833, 'Orange': 932, 'Blue': 743, 'Global Black': 628, 'Silver': 429, 'Nero Ade': 389, 'Gold': 367, 'Black / Express Red': 326, 'Black Onyx': 256, 'Graphite': 254, 'Rioja Red': 244, 'Diesel Gray / Black': 223, 'Charcoal': 210, 'Green': 195, 'Medium Stone': 170, 'Medium Earth Gray': 170, 'Parchment': 169, 'Sandstone': 159, 'Satin Black': 153, 'Tan': 149, 'Canberra Beige/Black': 139, 'Shara Beige': 126}</td>\n",
       "      <td>156</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>accident</td>\n",
       "      <td>[None reported, At least 1 accident or damage reported, nan]</td>\n",
       "      <td>{'None reported': 144514, 'At least 1 accident or damage reported': 41567}</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>clean_title</td>\n",
       "      <td>[Yes, nan]</td>\n",
       "      <td>{'Yes': 167114}</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>price</td>\n",
       "      <td>[4200, 4999, 13900, 45000, 97500, 29950, 28500, 12500, 62890, 4000, 7950, 19000, 51500, 12300, 56900, 44900, 68500, 55000, 9999, 46900, 41998, 16500, 9900, 76000, 33687, 29000, 25900, 38000, 3499, 17900, 39499, 104900, 64000, 15000, 87000, 23000, 165000, 28000, 63900, 12000, 30000, 32000, 244896, 145000, 42599, 10000, 49999, 26500, 34500, 21000, 59598, 53600, 16000, 33200, 53900, 27000, 32900, 8000, 4900, 29999, 23500, 98900, 36800, 193063, 47500, 99000, 7500, 30500, 92500, 65998, 48000, 54500, 63000, 13999, 22000, 8500, 95000, 11999, 43500, 6700, 27599, 18750, 27899, 9500, 29500, 39995, 24995, 4500, 29900, 15999, 8300, 39000, 17500, 65000, 13490, 62500, 6800, 41950, 87500, 29998, ...]</td>\n",
       "      <td>{15000: 1920, 12000: 1459, 30000: 1280, 29000: 1228, 8500: 1204, 12500: 1202, 18000: 1198, 22000: 1195, 16000: 1188, 17500: 1159, 35000: 1143, 17000: 1111, 19500: 1093, 28000: 1042, 32000: 1042, 22500: 1013, 26000: 1004, 16500: 991, 6500: 989, 31000: 989, 20000: 987, 15500: 966, 21000: 956, 11500: 947, 10500: 939, 27500: 934, 45000: 931, 50000: 919, 10000: 903, 7500: 897}</td>\n",
       "      <td>1569</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "column_names = []\n",
    "unique_values = []\n",
    "top_15_dict = []\n",
    "total_values = []\n",
    "\n",
    "for c in df.columns[1:]:\n",
    "    column_names.append(c)\n",
    "    \n",
    "    unique_vals = df[c].unique().tolist()\n",
    "    unique_values.append(unique_vals)\n",
    "\n",
    "    top_15 = df[c].value_counts().head(30).to_dict()\n",
    "    top_15_dict.append(top_15)\n",
    "    total_values.append(df[c].nunique())\n",
    "\n",
    "udf = pd.DataFrame({\n",
    "    'Column Name': column_names,\n",
    "    'Unique Values': unique_values,\n",
    "    'Top 15 Values': top_15_dict,\n",
    "    'total_values':total_values\n",
    "})\n",
    "\n",
    "display(HTML(udf.to_html()))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f10c8ee5",
   "metadata": {
    "papermill": {
     "duration": 0.025429,
     "end_time": "2024-09-09T05:14:53.688566",
     "exception": false,
     "start_time": "2024-09-09T05:14:53.663137",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Engine "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "96712046",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:14:53.744213Z",
     "iopub.status.busy": "2024-09-09T05:14:53.743692Z",
     "iopub.status.idle": "2024-09-09T05:14:55.248763Z",
     "shell.execute_reply": "2024-09-09T05:14:55.247384Z"
    },
    "papermill": {
     "duration": 1.535909,
     "end_time": "2024-09-09T05:14:55.251727",
     "exception": false,
     "start_time": "2024-09-09T05:14:53.715818",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 188533/188533 [00:00<00:00, 250961.37it/s]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Index(['id', 'brand', 'model', 'model_year', 'milage', 'fuel_type', 'engine',\n",
       "       'transmission', 'ext_col', 'int_col', 'accident', 'clean_title',\n",
       "       'price', 'power', 'capacity', 'no_of_cy'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def transform_engine(df):\n",
    "    engdf = {\n",
    "        'power': [],\n",
    "        'capacity': [],\n",
    "        'no_of_cy': [],\n",
    "    }\n",
    "\n",
    "    for eng in tqdm(df['engine']):\n",
    "        englist = eng.split(' ')\n",
    "        if len(englist) > 0:\n",
    "            eng_pow = englist[0]\n",
    "            if 'HP' in eng_pow:\n",
    "                eng_pow = eng_pow.replace('HP', '')\n",
    "                engdf['power'].append(eng_pow)\n",
    "            else:\n",
    "                engdf['power'].append(None)\n",
    "        else:\n",
    "            engdf['power'].append(None)\n",
    "        \n",
    "        # Extract capacity\n",
    "        if len(englist) > 1:\n",
    "            cap = englist[1]\n",
    "            if 'L' in cap:\n",
    "                cap = cap.replace('L', '')\n",
    "                engdf['capacity'].append(cap)\n",
    "            else:\n",
    "                engdf['capacity'].append(None)\n",
    "        else:\n",
    "            engdf['capacity'].append(None)\n",
    "        \n",
    "        # Extract number of cylinders\n",
    "        if 'Cylinder' in englist:\n",
    "            try:\n",
    "                cyld = englist.index('Cylinder')\n",
    "                act_ind = cyld - 1\n",
    "                if act_ind >= 0 and act_ind < len(englist):\n",
    "                    cy = englist[act_ind]\n",
    "                    cy = cy.replace('v', '')\n",
    "                    cy = cy.replace('V', '')\n",
    "                    engdf['no_of_cy'].append(cy)\n",
    "                else:\n",
    "                    engdf['no_of_cy'].append(None)\n",
    "            except IndexError:\n",
    "                engdf['no_of_cy'].append(None)\n",
    "        else:\n",
    "            engdf['no_of_cy'].append(None)\n",
    "    \n",
    "    eng_df = pd.DataFrame(engdf)\n",
    "    newdf = pd.concat([df, eng_df], axis=1)\n",
    "    \n",
    "    # Handle None and 'iter' in the 'capacity' column\n",
    "    numeric_values = [float(x) for x in newdf['capacity'] if isinstance(x, str) and x.replace('.', '', 1).isdigit()]\n",
    "    mean = np.mean(numeric_values) if numeric_values else 0\n",
    "    \n",
    "    def replace_values(x):\n",
    "        if x == 'iter' or x is None:\n",
    "            return f'{mean}'\n",
    "        elif isinstance(x, str) and x.replace('.', '', 1).isdigit():\n",
    "            return f'{float(x)}'\n",
    "        else:\n",
    "            return x\n",
    "    \n",
    "    newdf['capacity'] = newdf['capacity'].apply(replace_values)\n",
    "    return newdf\n",
    "newdf = transform_engine(df)\n",
    "newdf.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a57aea7e",
   "metadata": {
    "papermill": {
     "duration": 0.026523,
     "end_time": "2024-09-09T05:14:55.305830",
     "exception": false,
     "start_time": "2024-09-09T05:14:55.279307",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Transmission"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "cf3ea54d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:14:55.362104Z",
     "iopub.status.busy": "2024-09-09T05:14:55.360911Z",
     "iopub.status.idle": "2024-09-09T05:14:56.471047Z",
     "shell.execute_reply": "2024-09-09T05:14:56.469700Z"
    },
    "papermill": {
     "duration": 1.141914,
     "end_time": "2024-09-09T05:14:56.474220",
     "exception": false,
     "start_time": "2024-09-09T05:14:55.332306",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 188533/188533 [00:00<00:00, 305153.38it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['id', 'brand', 'model', 'model_year', 'milage', 'fuel_type', 'engine',\n",
      "       'transmission', 'ext_col', 'int_col', 'accident', 'clean_title',\n",
      "       'price', 'power', 'capacity', 'no_of_cy', 'mode', 'speed', 'others'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "def transform_transmission(newdf):\n",
    "    trndf = {\n",
    "        'mode': [],\n",
    "        'speed': [],\n",
    "        'others': [],\n",
    "    }\n",
    "\n",
    "    modes_keywords = ['A/T', 'Automatic', 'M/T', 'Manual', 'CVT', 'DCT', 'Dual Shift Mode']\n",
    "\n",
    "    # Initialize lists to collect speeds\n",
    "    speed_values = []\n",
    "\n",
    "    # Process each transmission entry\n",
    "    for tr in tqdm(newdf['transmission']):\n",
    "        translist = tr.split(' ')\n",
    "    \n",
    "        speed = None\n",
    "        others = []\n",
    "        for t in translist:\n",
    "            if 'Speed' in t:\n",
    "                try:\n",
    "                    speed = t.split('-')[0]\n",
    "                    if speed.isdigit():\n",
    "                        speed_values.append(int(speed))\n",
    "                except IndexError:\n",
    "                    speed = None\n",
    "            else:\n",
    "                if t not in modes_keywords:  \n",
    "                    others.append(t)\n",
    "    \n",
    "        mode = None\n",
    "        mode_found = False\n",
    "        for keyword in modes_keywords:\n",
    "            if keyword in translist:\n",
    "                mode = keyword\n",
    "                mode_found = True\n",
    "                break\n",
    "        if not mode_found:\n",
    "            mode = 'Unknown'\n",
    "    \n",
    "        others_str = ' '.join(others) if len(others) > 1 else None\n",
    "    \n",
    "        trndf['others'].append(None)\n",
    "        trndf['mode'].append(mode)\n",
    "        trndf['speed'].append(speed)\n",
    "    \n",
    "    # Convert to DataFrame\n",
    "    trn_df = pd.DataFrame(trndf)\n",
    "    \n",
    "    # Compute median speed ignoring non-numeric values\n",
    "    speed_values = [s for s in speed_values if isinstance(s, (int, float))]\n",
    "    median_speed = np.median(speed_values) if speed_values else None\n",
    "    \n",
    "    # Replace values in the speed column\n",
    "    trn_df['speed'] = trn_df['speed'].apply(\n",
    "        lambda x: 1 if x == 'Single' else (median_speed if x == 'Speed' or (isinstance(x, str) and x.isdigit()) else x)\n",
    "    )\n",
    "\n",
    "    # Concatenate with the original DataFrame\n",
    "    newdf = pd.concat([newdf, trn_df], axis=1)\n",
    "    \n",
    "    return newdf\n",
    "\n",
    "# Apply the transformation\n",
    "newdf = transform_transmission(newdf)\n",
    "print(newdf.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "d59fb9b2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:14:56.537329Z",
     "iopub.status.busy": "2024-09-09T05:14:56.536794Z",
     "iopub.status.idle": "2024-09-09T05:14:56.544072Z",
     "shell.execute_reply": "2024-09-09T05:14:56.542388Z"
    },
    "papermill": {
     "duration": 0.044415,
     "end_time": "2024-09-09T05:14:56.547100",
     "exception": false,
     "start_time": "2024-09-09T05:14:56.502685",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def concatter(df,to_concat):\n",
    "    cdf = pd.concat([df, to_concat], axis=1)\n",
    "    return cdf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "40f7e72b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:14:56.606937Z",
     "iopub.status.busy": "2024-09-09T05:14:56.606422Z",
     "iopub.status.idle": "2024-09-09T05:14:56.612683Z",
     "shell.execute_reply": "2024-09-09T05:14:56.611419Z"
    },
    "papermill": {
     "duration": 0.03916,
     "end_time": "2024-09-09T05:14:56.615609",
     "exception": false,
     "start_time": "2024-09-09T05:14:56.576449",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def drop_duplicate_columns(df):\n",
    "    df = df.loc[:, ~df.columns.duplicated()]\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "f16a246f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:14:56.674157Z",
     "iopub.status.busy": "2024-09-09T05:14:56.673589Z",
     "iopub.status.idle": "2024-09-09T05:14:56.679592Z",
     "shell.execute_reply": "2024-09-09T05:14:56.678399Z"
    },
    "papermill": {
     "duration": 0.038016,
     "end_time": "2024-09-09T05:14:56.682145",
     "exception": false,
     "start_time": "2024-09-09T05:14:56.644129",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "cols_to_drop = ['id','model','engine','transmission','others','speed']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "c9b8ca6c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:14:56.737198Z",
     "iopub.status.busy": "2024-09-09T05:14:56.736741Z",
     "iopub.status.idle": "2024-09-09T05:14:56.780761Z",
     "shell.execute_reply": "2024-09-09T05:14:56.779540Z"
    },
    "papermill": {
     "duration": 0.07484,
     "end_time": "2024-09-09T05:14:56.783660",
     "exception": false,
     "start_time": "2024-09-09T05:14:56.708820",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "newdf = newdf.drop(columns = cols_to_drop)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "1dabd3a8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:14:56.839000Z",
     "iopub.status.busy": "2024-09-09T05:14:56.838545Z",
     "iopub.status.idle": "2024-09-09T05:14:57.045295Z",
     "shell.execute_reply": "2024-09-09T05:14:57.043887Z"
    },
    "papermill": {
     "duration": 0.237914,
     "end_time": "2024-09-09T05:14:57.048107",
     "exception": false,
     "start_time": "2024-09-09T05:14:56.810193",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "brand              0\n",
       "model_year         0\n",
       "milage             0\n",
       "fuel_type       5083\n",
       "ext_col            0\n",
       "int_col            0\n",
       "accident        2452\n",
       "clean_title    21419\n",
       "price              0\n",
       "power          33259\n",
       "capacity           0\n",
       "no_of_cy       37855\n",
       "mode               0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newdf.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6022369a",
   "metadata": {
    "papermill": {
     "duration": 0.026243,
     "end_time": "2024-09-09T05:14:57.101706",
     "exception": false,
     "start_time": "2024-09-09T05:14:57.075463",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# final df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "3c174057",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:14:57.157598Z",
     "iopub.status.busy": "2024-09-09T05:14:57.156434Z",
     "iopub.status.idle": "2024-09-09T05:14:57.183218Z",
     "shell.execute_reply": "2024-09-09T05:14:57.181900Z"
    },
    "papermill": {
     "duration": 0.057304,
     "end_time": "2024-09-09T05:14:57.185758",
     "exception": false,
     "start_time": "2024-09-09T05:14:57.128454",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>brand</th>\n",
       "      <th>model_year</th>\n",
       "      <th>milage</th>\n",
       "      <th>fuel_type</th>\n",
       "      <th>ext_col</th>\n",
       "      <th>int_col</th>\n",
       "      <th>accident</th>\n",
       "      <th>clean_title</th>\n",
       "      <th>price</th>\n",
       "      <th>power</th>\n",
       "      <th>capacity</th>\n",
       "      <th>no_of_cy</th>\n",
       "      <th>mode</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>MINI</td>\n",
       "      <td>2007</td>\n",
       "      <td>213000</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>Yellow</td>\n",
       "      <td>Gray</td>\n",
       "      <td>None reported</td>\n",
       "      <td>Yes</td>\n",
       "      <td>4200</td>\n",
       "      <td>172.0</td>\n",
       "      <td>1.6</td>\n",
       "      <td>4</td>\n",
       "      <td>A/T</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Lincoln</td>\n",
       "      <td>2002</td>\n",
       "      <td>143250</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>Silver</td>\n",
       "      <td>Beige</td>\n",
       "      <td>At least 1 accident or damage reported</td>\n",
       "      <td>Yes</td>\n",
       "      <td>4999</td>\n",
       "      <td>252.0</td>\n",
       "      <td>3.9</td>\n",
       "      <td>8</td>\n",
       "      <td>A/T</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Chevrolet</td>\n",
       "      <td>2002</td>\n",
       "      <td>136731</td>\n",
       "      <td>E85 Flex Fuel</td>\n",
       "      <td>Blue</td>\n",
       "      <td>Gray</td>\n",
       "      <td>None reported</td>\n",
       "      <td>Yes</td>\n",
       "      <td>13900</td>\n",
       "      <td>320.0</td>\n",
       "      <td>5.3</td>\n",
       "      <td>8</td>\n",
       "      <td>A/T</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Genesis</td>\n",
       "      <td>2017</td>\n",
       "      <td>19500</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>Black</td>\n",
       "      <td>Black</td>\n",
       "      <td>None reported</td>\n",
       "      <td>Yes</td>\n",
       "      <td>45000</td>\n",
       "      <td>420.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>8</td>\n",
       "      <td>Unknown</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Mercedes-Benz</td>\n",
       "      <td>2021</td>\n",
       "      <td>7388</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>Black</td>\n",
       "      <td>Beige</td>\n",
       "      <td>None reported</td>\n",
       "      <td>Yes</td>\n",
       "      <td>97500</td>\n",
       "      <td>208.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4</td>\n",
       "      <td>A/T</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>188528</th>\n",
       "      <td>Cadillac</td>\n",
       "      <td>2017</td>\n",
       "      <td>49000</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>White</td>\n",
       "      <td>Beige</td>\n",
       "      <td>None reported</td>\n",
       "      <td>Yes</td>\n",
       "      <td>27500</td>\n",
       "      <td>420.0</td>\n",
       "      <td>6.2</td>\n",
       "      <td>8</td>\n",
       "      <td>Unknown</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>188529</th>\n",
       "      <td>Mercedes-Benz</td>\n",
       "      <td>2018</td>\n",
       "      <td>28600</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>White</td>\n",
       "      <td>Black</td>\n",
       "      <td>At least 1 accident or damage reported</td>\n",
       "      <td>Yes</td>\n",
       "      <td>30000</td>\n",
       "      <td>385.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>6</td>\n",
       "      <td>A/T</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>188530</th>\n",
       "      <td>Mercedes-Benz</td>\n",
       "      <td>2021</td>\n",
       "      <td>13650</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>White</td>\n",
       "      <td>Black</td>\n",
       "      <td>None reported</td>\n",
       "      <td>Yes</td>\n",
       "      <td>86900</td>\n",
       "      <td>469.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>8</td>\n",
       "      <td>A/T</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>188531</th>\n",
       "      <td>Audi</td>\n",
       "      <td>2022</td>\n",
       "      <td>13895</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>Daytona Gray Pearl Effect</td>\n",
       "      <td>Black</td>\n",
       "      <td>None reported</td>\n",
       "      <td>NaN</td>\n",
       "      <td>84900</td>\n",
       "      <td>None</td>\n",
       "      <td>3.8179007879347084</td>\n",
       "      <td>None</td>\n",
       "      <td>Automatic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>188532</th>\n",
       "      <td>Porsche</td>\n",
       "      <td>2016</td>\n",
       "      <td>59500</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>White</td>\n",
       "      <td>Black</td>\n",
       "      <td>None reported</td>\n",
       "      <td>Yes</td>\n",
       "      <td>28995</td>\n",
       "      <td>252.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4</td>\n",
       "      <td>Unknown</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>188533 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                brand  model_year  milage      fuel_type  \\\n",
       "0                MINI        2007  213000       Gasoline   \n",
       "1             Lincoln        2002  143250       Gasoline   \n",
       "2           Chevrolet        2002  136731  E85 Flex Fuel   \n",
       "3             Genesis        2017   19500       Gasoline   \n",
       "4       Mercedes-Benz        2021    7388       Gasoline   \n",
       "...               ...         ...     ...            ...   \n",
       "188528       Cadillac        2017   49000       Gasoline   \n",
       "188529  Mercedes-Benz        2018   28600       Gasoline   \n",
       "188530  Mercedes-Benz        2021   13650       Gasoline   \n",
       "188531           Audi        2022   13895       Gasoline   \n",
       "188532        Porsche        2016   59500       Gasoline   \n",
       "\n",
       "                          ext_col int_col  \\\n",
       "0                          Yellow    Gray   \n",
       "1                          Silver   Beige   \n",
       "2                            Blue    Gray   \n",
       "3                           Black   Black   \n",
       "4                           Black   Beige   \n",
       "...                           ...     ...   \n",
       "188528                      White   Beige   \n",
       "188529                      White   Black   \n",
       "188530                      White   Black   \n",
       "188531  Daytona Gray Pearl Effect   Black   \n",
       "188532                      White   Black   \n",
       "\n",
       "                                      accident clean_title  price  power  \\\n",
       "0                                None reported         Yes   4200  172.0   \n",
       "1       At least 1 accident or damage reported         Yes   4999  252.0   \n",
       "2                                None reported         Yes  13900  320.0   \n",
       "3                                None reported         Yes  45000  420.0   \n",
       "4                                None reported         Yes  97500  208.0   \n",
       "...                                        ...         ...    ...    ...   \n",
       "188528                           None reported         Yes  27500  420.0   \n",
       "188529  At least 1 accident or damage reported         Yes  30000  385.0   \n",
       "188530                           None reported         Yes  86900  469.0   \n",
       "188531                           None reported         NaN  84900   None   \n",
       "188532                           None reported         Yes  28995  252.0   \n",
       "\n",
       "                  capacity no_of_cy       mode  \n",
       "0                      1.6        4        A/T  \n",
       "1                      3.9        8        A/T  \n",
       "2                      5.3        8        A/T  \n",
       "3                      5.0        8    Unknown  \n",
       "4                      2.0        4        A/T  \n",
       "...                    ...      ...        ...  \n",
       "188528                 6.2        8    Unknown  \n",
       "188529                 3.0        6        A/T  \n",
       "188530                 4.0        8        A/T  \n",
       "188531  3.8179007879347084     None  Automatic  \n",
       "188532                 2.0        4    Unknown  \n",
       "\n",
       "[188533 rows x 13 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newdf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "4532f2ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:14:57.243439Z",
     "iopub.status.busy": "2024-09-09T05:14:57.242989Z",
     "iopub.status.idle": "2024-09-09T05:14:57.248392Z",
     "shell.execute_reply": "2024-09-09T05:14:57.247207Z"
    },
    "papermill": {
     "duration": 0.036968,
     "end_time": "2024-09-09T05:14:57.250952",
     "exception": false,
     "start_time": "2024-09-09T05:14:57.213984",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def column_dropper(df, columns):\n",
    "    return df.drop(columns=columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "24cde891",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:14:57.307470Z",
     "iopub.status.busy": "2024-09-09T05:14:57.307020Z",
     "iopub.status.idle": "2024-09-09T05:14:57.433458Z",
     "shell.execute_reply": "2024-09-09T05:14:57.432058Z"
    },
    "papermill": {
     "duration": 0.157973,
     "end_time": "2024-09-09T05:14:57.436562",
     "exception": false,
     "start_time": "2024-09-09T05:14:57.278589",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "newdf['power'] = newdf['power'].astype('float')\n",
    "newdf['capacity'] = newdf['capacity'].astype('float')\n",
    "newdf['no_of_cy'] = newdf['no_of_cy'].astype('float')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "59e9d8bb",
   "metadata": {
    "papermill": {
     "duration": 0.028557,
     "end_time": "2024-09-09T05:14:57.492515",
     "exception": false,
     "start_time": "2024-09-09T05:14:57.463958",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Pipe "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "d01f04bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:14:57.550928Z",
     "iopub.status.busy": "2024-09-09T05:14:57.550517Z",
     "iopub.status.idle": "2024-09-09T05:14:57.556495Z",
     "shell.execute_reply": "2024-09-09T05:14:57.555387Z"
    },
    "papermill": {
     "duration": 0.037244,
     "end_time": "2024-09-09T05:14:57.558911",
     "exception": false,
     "start_time": "2024-09-09T05:14:57.521667",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def encode_labels(df, columns):\n",
    "    le = LabelEncoder()\n",
    "    for col in columns:\n",
    "        df[col] = le.fit_transform(df[col])\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "53fe9fe0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:14:57.615563Z",
     "iopub.status.busy": "2024-09-09T05:14:57.615058Z",
     "iopub.status.idle": "2024-09-09T05:14:57.621427Z",
     "shell.execute_reply": "2024-09-09T05:14:57.619864Z"
    },
    "papermill": {
     "duration": 0.038021,
     "end_time": "2024-09-09T05:14:57.624330",
     "exception": false,
     "start_time": "2024-09-09T05:14:57.586309",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "columns_to_encode = [\n",
    "    'brand',\n",
    "    'milage',\n",
    "    'fuel_type',\n",
    "    'ext_col',\n",
    "    'int_col',\n",
    "    'accident',\n",
    "    'clean_title',\n",
    "    'mode',\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "dd5ae56e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:14:57.774262Z",
     "iopub.status.busy": "2024-09-09T05:14:57.773701Z",
     "iopub.status.idle": "2024-09-09T05:14:57.782047Z",
     "shell.execute_reply": "2024-09-09T05:14:57.780548Z"
    },
    "papermill": {
     "duration": 0.129879,
     "end_time": "2024-09-09T05:14:57.784869",
     "exception": false,
     "start_time": "2024-09-09T05:14:57.654990",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pipeline = Pipeline([\n",
    "    ('engine_transform', FunctionTransformer(transform_engine, validate=False)),  \n",
    "    ('transmission_transform', FunctionTransformer(transform_transmission, validate=False)),   \n",
    "    ('drop_columns', FunctionTransformer(lambda df: column_dropper(df, columns=cols_to_drop), validate=False)),\n",
    "    ('label_encoder', FunctionTransformer(lambda df: encode_labels(df, columns_to_encode), validate=False)), \n",
    "    ('imputer', KNNImputer(n_neighbors=2)),    \n",
    "    ('scaler', StandardScaler()) \n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "41606551",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:14:57.845284Z",
     "iopub.status.busy": "2024-09-09T05:14:57.844707Z",
     "iopub.status.idle": "2024-09-09T05:14:57.876042Z",
     "shell.execute_reply": "2024-09-09T05:14:57.874336Z"
    },
    "papermill": {
     "duration": 0.065727,
     "end_time": "2024-09-09T05:14:57.879565",
     "exception": false,
     "start_time": "2024-09-09T05:14:57.813838",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pipe_df = pipe_df.drop(columns = ['price'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "b44ac9a2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:14:57.941916Z",
     "iopub.status.busy": "2024-09-09T05:14:57.941413Z",
     "iopub.status.idle": "2024-09-09T05:14:57.947431Z",
     "shell.execute_reply": "2024-09-09T05:14:57.946044Z"
    },
    "papermill": {
     "duration": 0.040644,
     "end_time": "2024-09-09T05:14:57.950184",
     "exception": false,
     "start_time": "2024-09-09T05:14:57.909540",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# transformed_df = pipeline.fit_transform(pipe_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "0bcb8d8a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:14:58.011809Z",
     "iopub.status.busy": "2024-09-09T05:14:58.010396Z",
     "iopub.status.idle": "2024-09-09T05:14:58.016569Z",
     "shell.execute_reply": "2024-09-09T05:14:58.015265Z"
    },
    "papermill": {
     "duration": 0.03921,
     "end_time": "2024-09-09T05:14:58.019454",
     "exception": false,
     "start_time": "2024-09-09T05:14:57.980244",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# transformed_df_arr = pd.DataFrame(transformed_df, columns=pipe_df.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "ccf56e20",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:14:58.078635Z",
     "iopub.status.busy": "2024-09-09T05:14:58.078072Z",
     "iopub.status.idle": "2024-09-09T05:14:58.084892Z",
     "shell.execute_reply": "2024-09-09T05:14:58.083258Z"
    },
    "papermill": {
     "duration": 0.040621,
     "end_time": "2024-09-09T05:14:58.088526",
     "exception": false,
     "start_time": "2024-09-09T05:14:58.047905",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# transformed_df_arr = transformed_df_arr.drop(columns = ['Unnamed: 0.3','Unnamed: 0.2','Unnamed: 0.1','Unnamed: 0'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "0ff0bb55",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:14:58.148142Z",
     "iopub.status.busy": "2024-09-09T05:14:58.147629Z",
     "iopub.status.idle": "2024-09-09T05:14:59.258949Z",
     "shell.execute_reply": "2024-09-09T05:14:59.257435Z"
    },
    "papermill": {
     "duration": 1.145761,
     "end_time": "2024-09-09T05:14:59.262570",
     "exception": false,
     "start_time": "2024-09-09T05:14:58.116809",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "transformed_df_arr = pd.read_csv('/kaggle/input/temprory/finals (1).csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "0f4168a9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:14:59.326268Z",
     "iopub.status.busy": "2024-09-09T05:14:59.325812Z",
     "iopub.status.idle": "2024-09-09T05:15:00.541164Z",
     "shell.execute_reply": "2024-09-09T05:15:00.539897Z"
    },
    "papermill": {
     "duration": 1.253314,
     "end_time": "2024-09-09T05:15:00.545974",
     "exception": false,
     "start_time": "2024-09-09T05:14:59.292660",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 2000x2000 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (20,20))\n",
    "sns.heatmap(transformed_df_arr.corr(), annot=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d632d14",
   "metadata": {
    "papermill": {
     "duration": 0.033034,
     "end_time": "2024-09-09T05:15:00.611522",
     "exception": false,
     "start_time": "2024-09-09T05:15:00.578488",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77ad7497",
   "metadata": {
    "papermill": {
     "duration": 0.031618,
     "end_time": "2024-09-09T05:15:00.675789",
     "exception": false,
     "start_time": "2024-09-09T05:15:00.644171",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Decision tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "6810ccab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:15:00.744664Z",
     "iopub.status.busy": "2024-09-09T05:15:00.744092Z",
     "iopub.status.idle": "2024-09-09T05:15:00.790037Z",
     "shell.execute_reply": "2024-09-09T05:15:00.788246Z"
    },
    "papermill": {
     "duration": 0.084821,
     "end_time": "2024-09-09T05:15:00.793643",
     "exception": false,
     "start_time": "2024-09-09T05:15:00.708822",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X = transformed_df_arr\n",
    "y = df['price']\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "03724f60",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:15:00.871200Z",
     "iopub.status.busy": "2024-09-09T05:15:00.870655Z",
     "iopub.status.idle": "2024-09-09T05:15:02.529330Z",
     "shell.execute_reply": "2024-09-09T05:15:02.527165Z"
    },
    "papermill": {
     "duration": 1.701823,
     "end_time": "2024-09-09T05:15:02.533082",
     "exception": false,
     "start_time": "2024-09-09T05:15:00.831259",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "111683.06060458021"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "DTR = DecisionTreeRegressor()\n",
    "DTR.fit(X_train,y_train)\n",
    "preds = DTR.predict(X_test)\n",
    "sc = np.sqrt(mean_squared_error(y_test,preds))\n",
    "sc"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c37f4f80",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-03T15:28:58.719259Z",
     "iopub.status.busy": "2024-09-03T15:28:58.718833Z",
     "iopub.status.idle": "2024-09-03T15:28:58.724797Z",
     "shell.execute_reply": "2024-09-03T15:28:58.723369Z",
     "shell.execute_reply.started": "2024-09-03T15:28:58.719222Z"
    },
    "papermill": {
     "duration": 0.040102,
     "end_time": "2024-09-09T05:15:02.611594",
     "exception": false,
     "start_time": "2024-09-09T05:15:02.571492",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Linear regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "86c64336",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:15:02.685409Z",
     "iopub.status.busy": "2024-09-09T05:15:02.684880Z",
     "iopub.status.idle": "2024-09-09T05:15:02.850087Z",
     "shell.execute_reply": "2024-09-09T05:15:02.848191Z"
    },
    "papermill": {
     "duration": 0.20708,
     "end_time": "2024-09-09T05:15:02.855882",
     "exception": false,
     "start_time": "2024-09-09T05:15:02.648802",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "69865.44052826359"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "LR = LinearRegression()\n",
    "LR.fit(X_train,y_train)\n",
    "preds = LR.predict(X_test)\n",
    "sc = np.sqrt(mean_squared_error(y_test,preds))\n",
    "sc"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b4ebe9e1",
   "metadata": {
    "papermill": {
     "duration": 0.029985,
     "end_time": "2024-09-09T05:15:02.988196",
     "exception": false,
     "start_time": "2024-09-09T05:15:02.958211",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Lasso regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "eddf5bcc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:15:03.051056Z",
     "iopub.status.busy": "2024-09-09T05:15:03.050533Z",
     "iopub.status.idle": "2024-09-09T05:15:03.249673Z",
     "shell.execute_reply": "2024-09-09T05:15:03.247336Z"
    },
    "papermill": {
     "duration": 0.234908,
     "end_time": "2024-09-09T05:15:03.253478",
     "exception": false,
     "start_time": "2024-09-09T05:15:03.018570",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "69865.34008440746"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "LS = Lasso(\n",
    "    alpha= 10, max_iter= 1000, selection= 'random',tol= 0.01\n",
    ")\n",
    "LS.fit(X_train,y_train)\n",
    "preds = LS.predict(X_test)\n",
    "sc = np.sqrt(mean_squared_error(y_test,preds))\n",
    "sc"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "425faa25",
   "metadata": {
    "papermill": {
     "duration": 0.033329,
     "end_time": "2024-09-09T05:15:03.377480",
     "exception": false,
     "start_time": "2024-09-09T05:15:03.344151",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Elastic net regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "ad45c03a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:15:03.440666Z",
     "iopub.status.busy": "2024-09-09T05:15:03.440115Z",
     "iopub.status.idle": "2024-09-09T05:15:03.727827Z",
     "shell.execute_reply": "2024-09-09T05:15:03.726637Z"
    },
    "papermill": {
     "duration": 0.324431,
     "end_time": "2024-09-09T05:15:03.732282",
     "exception": false,
     "start_time": "2024-09-09T05:15:03.407851",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "69865.11762092638"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "EL = ElasticNet(\n",
    "    alpha= 0.01, l1_ratio= 0.9, max_iter= 10000, selection= 'random', tol= 0.001\n",
    ")\n",
    "EL.fit(X_train,y_train)\n",
    "preds = EL.predict(X_test)\n",
    "sc = np.sqrt(mean_squared_error(y_test,preds))\n",
    "sc"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e96daa85",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-03T15:35:23.380546Z",
     "iopub.status.busy": "2024-09-03T15:35:23.379990Z",
     "iopub.status.idle": "2024-09-03T15:35:23.386614Z",
     "shell.execute_reply": "2024-09-03T15:35:23.385195Z",
     "shell.execute_reply.started": "2024-09-03T15:35:23.380501Z"
    },
    "papermill": {
     "duration": 0.03027,
     "end_time": "2024-09-09T05:15:03.870018",
     "exception": false,
     "start_time": "2024-09-09T05:15:03.839748",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Ridge regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "22c3d7ed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:15:03.933333Z",
     "iopub.status.busy": "2024-09-09T05:15:03.932868Z",
     "iopub.status.idle": "2024-09-09T05:15:04.598460Z",
     "shell.execute_reply": "2024-09-09T05:15:04.596788Z"
    },
    "papermill": {
     "duration": 0.702295,
     "end_time": "2024-09-09T05:15:04.602950",
     "exception": false,
     "start_time": "2024-09-09T05:15:03.900655",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "69864.70894468433"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RD = Ridge(alpha= 10, max_iter= 1000, solver= 'saga', tol= 0.01)\n",
    "RD.fit(X_train,y_train)\n",
    "preds = RD.predict(X_test)\n",
    "sc = np.sqrt(mean_squared_error(y_test,preds))\n",
    "sc"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "df79089e",
   "metadata": {
    "papermill": {
     "duration": 0.051497,
     "end_time": "2024-09-09T05:15:04.721318",
     "exception": false,
     "start_time": "2024-09-09T05:15:04.669821",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## SVR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "e648525c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:15:04.784777Z",
     "iopub.status.busy": "2024-09-09T05:15:04.784303Z",
     "iopub.status.idle": "2024-09-09T05:15:04.789447Z",
     "shell.execute_reply": "2024-09-09T05:15:04.788257Z"
    },
    "papermill": {
     "duration": 0.03991,
     "end_time": "2024-09-09T05:15:04.791995",
     "exception": false,
     "start_time": "2024-09-09T05:15:04.752085",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# SVR = SVR()\n",
    "# SVR.fit(X_train,y_train)\n",
    "# preds = SVR.predict(X_test)\n",
    "# sc = np.sqrt(mean_squared_error(y_test,preds))\n",
    "# sc"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e1b1eb56",
   "metadata": {
    "papermill": {
     "duration": 0.032773,
     "end_time": "2024-09-09T05:15:04.855773",
     "exception": false,
     "start_time": "2024-09-09T05:15:04.823000",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## KNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "0b1ea44f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:15:04.926773Z",
     "iopub.status.busy": "2024-09-09T05:15:04.926226Z",
     "iopub.status.idle": "2024-09-09T05:15:36.238494Z",
     "shell.execute_reply": "2024-09-09T05:15:36.237201Z"
    },
    "papermill": {
     "duration": 31.382866,
     "end_time": "2024-09-09T05:15:36.272935",
     "exception": false,
     "start_time": "2024-09-09T05:15:04.890069",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "69344.2739656135\n"
     ]
    }
   ],
   "source": [
    "KNN = KNeighborsRegressor(\n",
    "    n_neighbors=106, \n",
    "    weights='uniform', \n",
    "    algorithm='auto', \n",
    "    leaf_size=30, \n",
    "    p=2, \n",
    "    metric='minkowski', \n",
    "    metric_params=None, \n",
    "    n_jobs=-1)\n",
    "KNN.fit(X_train,y_train)\n",
    "preds = KNN.predict(X_test)\n",
    "sc = np.sqrt(mean_squared_error(y_test,preds))\n",
    "print(sc)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "568428ef",
   "metadata": {
    "papermill": {
     "duration": 0.031763,
     "end_time": "2024-09-09T05:15:36.335577",
     "exception": false,
     "start_time": "2024-09-09T05:15:36.303814",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Randm forest "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "17c4540f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:15:36.400380Z",
     "iopub.status.busy": "2024-09-09T05:15:36.399900Z",
     "iopub.status.idle": "2024-09-09T05:15:40.485951Z",
     "shell.execute_reply": "2024-09-09T05:15:40.483993Z"
    },
    "papermill": {
     "duration": 4.12166,
     "end_time": "2024-09-09T05:15:40.489096",
     "exception": false,
     "start_time": "2024-09-09T05:15:36.367436",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78465.57963021225\n"
     ]
    }
   ],
   "source": [
    "RF = RandomForestRegressor(\n",
    "    n_estimators=10, \n",
    "    random_state=42,\n",
    "    n_jobs = -1\n",
    ")\n",
    "RF.fit(X_train,y_train)\n",
    "preds = RF.predict(X_test)\n",
    "sc = np.sqrt(mean_squared_error(y_test,preds))\n",
    "print(sc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "5b394061",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:15:40.565729Z",
     "iopub.status.busy": "2024-09-09T05:15:40.565051Z",
     "iopub.status.idle": "2024-09-09T05:15:40.573443Z",
     "shell.execute_reply": "2024-09-09T05:15:40.571935Z"
    },
    "papermill": {
     "duration": 0.049998,
     "end_time": "2024-09-09T05:15:40.576214",
     "exception": false,
     "start_time": "2024-09-09T05:15:40.526216",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# ngbs = list(i for i in range(100,125))\n",
    "# scores = []\n",
    "# for ng in tqdm(ngbs):\n",
    "#     KNN = KNeighborsRegressor(\n",
    "#     n_neighbors=ng, \n",
    "#     weights='uniform', \n",
    "#     algorithm='auto', \n",
    "#     leaf_size=30, \n",
    "#     p=2, \n",
    "#     metric='minkowski', \n",
    "#     metric_params=None, \n",
    "#     n_jobs=-1)\n",
    "#     KNN.fit(X_train,y_train)\n",
    "#     preds = KNN.predict(X_test)\n",
    "#     sc = np.sqrt(mean_squared_error(y_test,preds))\n",
    "#     scores.append(sc)\n",
    "# sns.lineplot(x = ngbs , y = scores)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d447ac80",
   "metadata": {
    "papermill": {
     "duration": 0.034536,
     "end_time": "2024-09-09T05:15:40.645289",
     "exception": false,
     "start_time": "2024-09-09T05:15:40.610753",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Hypertune"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "f567c8fb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:15:40.718008Z",
     "iopub.status.busy": "2024-09-09T05:15:40.717319Z",
     "iopub.status.idle": "2024-09-09T05:15:40.728395Z",
     "shell.execute_reply": "2024-09-09T05:15:40.726535Z"
    },
    "papermill": {
     "duration": 0.049757,
     "end_time": "2024-09-09T05:15:40.731927",
     "exception": false,
     "start_time": "2024-09-09T05:15:40.682170",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# models = {\n",
    "#     'lasso': Lasso(),\n",
    "#     'ridge': Ridge(),\n",
    "#     'elasticnet': ElasticNet(),\n",
    "#     'linear': LinearRegression()\n",
    "# }\n",
    "\n",
    "# param_grid = {\n",
    "#     'lasso': {\n",
    "#         'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10, 100],   # L1 penalty strength\n",
    "#         'max_iter': [1000, 5000, 10000],                   # Number of iterations\n",
    "#         'tol': [1e-4, 1e-3, 1e-2],                        # Tolerance for optimization\n",
    "#         'selection': ['cyclic', 'random']                 # Strategy for selecting the coordinate\n",
    "#     },\n",
    "#     'ridge': {\n",
    "#         'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10, 100],  # L2 penalty strength\n",
    "#         'solver': ['auto', 'svd', 'cholesky', 'lsqr', 'sag', 'saga'],  # Solver for optimization\n",
    "#         'max_iter': [1000, 5000, 10000],                 # Number of iterations\n",
    "#         'tol': [1e-4, 1e-3, 1e-2]                       # Tolerance for optimization\n",
    "#     },\n",
    "#     'elasticnet': {\n",
    "#         'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10, 100],  # Penalty strength\n",
    "#         'l1_ratio': [0.1, 0.3, 0.5, 0.7, 0.9],            # Mix of L1 and L2 penalty\n",
    "#         'max_iter': [1000, 5000, 10000],                 # Number of iterations\n",
    "#         'tol': [1e-4, 1e-3, 1e-2],                      # Tolerance for optimization\n",
    "#         'selection': ['cyclic', 'random']               # Strategy for selecting the coordinate\n",
    "#     },\n",
    "#     'linear': {\n",
    "#         'fit_intercept': [True, False],                 # Whether to calculate the intercept\n",
    "#         'normalize': [True, False],                     # Whether to normalize the input variables\n",
    "#         'copy_X': [True, False],                        # Whether to copy the data (X) or perform computations in-place\n",
    "#         'n_jobs': [-1, 1, 2, 4]                         # Number of jobs to run in parallel (-1 uses all processors)\n",
    "#     }\n",
    "# }\n",
    "\n",
    "\n",
    "# best_models = {}\n",
    "# for model_name in models:\n",
    "#     print(f\"Training {model_name} model...\")\n",
    "#     grid_search = GridSearchCV(\n",
    "#         models[model_name], \n",
    "#         param_grid[model_name], \n",
    "#         cv=5, \n",
    "#         scoring='neg_mean_squared_error', \n",
    "#         n_jobs=-1\n",
    "#     )\n",
    "#     grid_search.fit(X_train, y_train)\n",
    "#     best_models[model_name] = grid_search.best_estimator_\n",
    "#     print(f\"Best parameters for {model_name}: {grid_search.best_params_}\")\n",
    "#     y_pred = best_models[model_name].predict(X_test)\n",
    "#     rmse = np.sqrt(mean_squared_error(y_test, y_pred))\n",
    "#     print(f\"{model_name.capitalize()} Regression MSE: {rmse}\")\n",
    "#     print('---' * 10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "18f2abb9",
   "metadata": {
    "papermill": {
     "duration": 0.033471,
     "end_time": "2024-09-09T05:15:40.802203",
     "exception": false,
     "start_time": "2024-09-09T05:15:40.768732",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Boost the models"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "40843b8e",
   "metadata": {
    "papermill": {
     "duration": 0.036899,
     "end_time": "2024-09-09T05:15:40.873425",
     "exception": false,
     "start_time": "2024-09-09T05:15:40.836526",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Boosting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "016d88e4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:15:40.942470Z",
     "iopub.status.busy": "2024-09-09T05:15:40.941223Z",
     "iopub.status.idle": "2024-09-09T05:16:16.075632Z",
     "shell.execute_reply": "2024-09-09T05:16:16.074299Z"
    },
    "papermill": {
     "duration": 35.203455,
     "end_time": "2024-09-09T05:16:16.110068",
     "exception": false,
     "start_time": "2024-09-09T05:15:40.906613",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "71550.14070789106"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "boosting_DTR = AdaBoostRegressor(base_estimator=DTR, n_estimators=100, random_state=42)\n",
    "boosting_DTR.fit(X_train, y_train)\n",
    "preds = boosting_DTR.predict(X_test)\n",
    "sc = np.sqrt(mean_squared_error(y_test,preds))\n",
    "sc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "9f62fb11",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:16:16.176893Z",
     "iopub.status.busy": "2024-09-09T05:16:16.176375Z",
     "iopub.status.idle": "2024-09-09T05:16:17.896956Z",
     "shell.execute_reply": "2024-09-09T05:16:17.895656Z"
    },
    "papermill": {
     "duration": 1.759217,
     "end_time": "2024-09-09T05:16:17.900966",
     "exception": false,
     "start_time": "2024-09-09T05:16:16.141749",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "69862.67234266209"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "boosting_LR = AdaBoostRegressor(base_estimator=LR, n_estimators=10000000, random_state=42)\n",
    "boosting_LR.fit(X_train, y_train)\n",
    "preds = boosting_LR.predict(X_test)\n",
    "sc = np.sqrt(mean_squared_error(y_test,preds))\n",
    "sc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "9a1941af",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:16:18.013153Z",
     "iopub.status.busy": "2024-09-09T05:16:18.012733Z",
     "iopub.status.idle": "2024-09-09T05:16:21.026439Z",
     "shell.execute_reply": "2024-09-09T05:16:21.025408Z"
    },
    "papermill": {
     "duration": 3.062934,
     "end_time": "2024-09-09T05:16:21.029718",
     "exception": false,
     "start_time": "2024-09-09T05:16:17.966784",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "69856.390505226"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "boosting_EL = AdaBoostRegressor(base_estimator=EL, n_estimators=10000000, random_state=42)\n",
    "boosting_EL.fit(X_train, y_train)\n",
    "preds = boosting_EL.predict(X_test)\n",
    "sc = np.sqrt(mean_squared_error(y_test,preds))\n",
    "sc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "17e66bfd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:16:21.144072Z",
     "iopub.status.busy": "2024-09-09T05:16:21.143340Z",
     "iopub.status.idle": "2024-09-09T05:16:23.284869Z",
     "shell.execute_reply": "2024-09-09T05:16:23.283132Z"
    },
    "papermill": {
     "duration": 2.191634,
     "end_time": "2024-09-09T05:16:23.289046",
     "exception": false,
     "start_time": "2024-09-09T05:16:21.097412",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "69856.45089946495"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "boosting_LS = AdaBoostRegressor(base_estimator=LS, n_estimators=10000000, random_state=42)\n",
    "boosting_LS.fit(X_train, y_train)\n",
    "preds = boosting_LS.predict(X_test)\n",
    "sc = np.sqrt(mean_squared_error(y_test,preds))\n",
    "sc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "bfacf193",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:16:23.413574Z",
     "iopub.status.busy": "2024-09-09T05:16:23.413016Z",
     "iopub.status.idle": "2024-09-09T05:16:31.454371Z",
     "shell.execute_reply": "2024-09-09T05:16:31.452629Z"
    },
    "papermill": {
     "duration": 8.082426,
     "end_time": "2024-09-09T05:16:31.458687",
     "exception": false,
     "start_time": "2024-09-09T05:16:23.376261",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "69856.71862217505"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "boosting_RD = AdaBoostRegressor(base_estimator=RD, n_estimators=10000000, random_state=42)\n",
    "boosting_RD.fit(X_train, y_train)\n",
    "preds = boosting_RD.predict(X_test)\n",
    "sc = np.sqrt(mean_squared_error(y_test,preds))\n",
    "sc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "90fe476b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:16:31.571530Z",
     "iopub.status.busy": "2024-09-09T05:16:31.571015Z",
     "iopub.status.idle": "2024-09-09T05:20:39.870815Z",
     "shell.execute_reply": "2024-09-09T05:20:39.869427Z"
    },
    "papermill": {
     "duration": 248.347675,
     "end_time": "2024-09-09T05:20:39.873741",
     "exception": false,
     "start_time": "2024-09-09T05:16:31.526066",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>StackingRegressor(estimators=[(&#x27;boost ridge&#x27;,\n",
       "                               AdaBoostRegressor(base_estimator=Ridge(alpha=10,\n",
       "                                                                      max_iter=1000,\n",
       "                                                                      solver=&#x27;saga&#x27;,\n",
       "                                                                      tol=0.01),\n",
       "                                                 n_estimators=10000000,\n",
       "                                                 random_state=42)),\n",
       "                              (&#x27;boost lasso&#x27;,\n",
       "                               AdaBoostRegressor(base_estimator=Lasso(alpha=10,\n",
       "                                                                      selection=&#x27;random&#x27;,\n",
       "                                                                      tol=0.01),\n",
       "                                                 n_estimators=10000000,\n",
       "                                                 random_state=42)),\n",
       "                              (&#x27;boost elastic&#x27;,\n",
       "                               AdaBoostRegressor(base_estimator=...\n",
       "                                                 n_estimators=10000000,\n",
       "                                                 random_state=42)),\n",
       "                              (&#x27;boost linear&#x27;,\n",
       "                               AdaBoostRegressor(base_estimator=LinearRegression(),\n",
       "                                                 n_estimators=10000000,\n",
       "                                                 random_state=42)),\n",
       "                              (&#x27;RF&#x27;,\n",
       "                               RandomForestRegressor(n_estimators=10, n_jobs=-1,\n",
       "                                                     random_state=42)),\n",
       "                              (&#x27;KNN&#x27;,\n",
       "                               KNeighborsRegressor(n_jobs=-1, n_neighbors=106)),\n",
       "                              (&#x27;DTR&#x27;, DecisionTreeRegressor())],\n",
       "                  final_estimator=KNeighborsRegressor(n_jobs=-1,\n",
       "                                                      n_neighbors=106))</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StackingRegressor</label><div class=\"sk-toggleable__content\"><pre>StackingRegressor(estimators=[(&#x27;boost ridge&#x27;,\n",
       "                               AdaBoostRegressor(base_estimator=Ridge(alpha=10,\n",
       "                                                                      max_iter=1000,\n",
       "                                                                      solver=&#x27;saga&#x27;,\n",
       "                                                                      tol=0.01),\n",
       "                                                 n_estimators=10000000,\n",
       "                                                 random_state=42)),\n",
       "                              (&#x27;boost lasso&#x27;,\n",
       "                               AdaBoostRegressor(base_estimator=Lasso(alpha=10,\n",
       "                                                                      selection=&#x27;random&#x27;,\n",
       "                                                                      tol=0.01),\n",
       "                                                 n_estimators=10000000,\n",
       "                                                 random_state=42)),\n",
       "                              (&#x27;boost elastic&#x27;,\n",
       "                               AdaBoostRegressor(base_estimator=...\n",
       "                                                 n_estimators=10000000,\n",
       "                                                 random_state=42)),\n",
       "                              (&#x27;boost linear&#x27;,\n",
       "                               AdaBoostRegressor(base_estimator=LinearRegression(),\n",
       "                                                 n_estimators=10000000,\n",
       "                                                 random_state=42)),\n",
       "                              (&#x27;RF&#x27;,\n",
       "                               RandomForestRegressor(n_estimators=10, n_jobs=-1,\n",
       "                                                     random_state=42)),\n",
       "                              (&#x27;KNN&#x27;,\n",
       "                               KNeighborsRegressor(n_jobs=-1, n_neighbors=106)),\n",
       "                              (&#x27;DTR&#x27;, DecisionTreeRegressor())],\n",
       "                  final_estimator=KNeighborsRegressor(n_jobs=-1,\n",
       "                                                      n_neighbors=106))</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>boost ridge</label></div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">base_estimator: Ridge</label><div class=\"sk-toggleable__content\"><pre>Ridge(alpha=10, max_iter=1000, solver=&#x27;saga&#x27;, tol=0.01)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Ridge</label><div class=\"sk-toggleable__content\"><pre>Ridge(alpha=10, max_iter=1000, solver=&#x27;saga&#x27;, tol=0.01)</pre></div></div></div></div></div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>boost lasso</label></div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">base_estimator: Lasso</label><div class=\"sk-toggleable__content\"><pre>Lasso(alpha=10, selection=&#x27;random&#x27;, tol=0.01)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Lasso</label><div class=\"sk-toggleable__content\"><pre>Lasso(alpha=10, selection=&#x27;random&#x27;, tol=0.01)</pre></div></div></div></div></div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>boost elastic</label></div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">base_estimator: ElasticNet</label><div class=\"sk-toggleable__content\"><pre>ElasticNet(alpha=0.01, l1_ratio=0.9, max_iter=10000, selection=&#x27;random&#x27;,\n",
       "           tol=0.001)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">ElasticNet</label><div class=\"sk-toggleable__content\"><pre>ElasticNet(alpha=0.01, l1_ratio=0.9, max_iter=10000, selection=&#x27;random&#x27;,\n",
       "           tol=0.001)</pre></div></div></div></div></div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>boost linear</label></div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">base_estimator: LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" ><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>RF</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" ><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor(n_estimators=10, n_jobs=-1, random_state=42)</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>KNN</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" ><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsRegressor</label><div class=\"sk-toggleable__content\"><pre>KNeighborsRegressor(n_jobs=-1, n_neighbors=106)</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>DTR</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-12\" type=\"checkbox\" ><label for=\"sk-estimator-id-12\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeRegressor</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeRegressor()</pre></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>final_estimator</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-13\" type=\"checkbox\" ><label for=\"sk-estimator-id-13\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsRegressor</label><div class=\"sk-toggleable__content\"><pre>KNeighborsRegressor(n_jobs=-1, n_neighbors=106)</pre></div></div></div></div></div></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "StackingRegressor(estimators=[('boost ridge',\n",
       "                               AdaBoostRegressor(base_estimator=Ridge(alpha=10,\n",
       "                                                                      max_iter=1000,\n",
       "                                                                      solver='saga',\n",
       "                                                                      tol=0.01),\n",
       "                                                 n_estimators=10000000,\n",
       "                                                 random_state=42)),\n",
       "                              ('boost lasso',\n",
       "                               AdaBoostRegressor(base_estimator=Lasso(alpha=10,\n",
       "                                                                      selection='random',\n",
       "                                                                      tol=0.01),\n",
       "                                                 n_estimators=10000000,\n",
       "                                                 random_state=42)),\n",
       "                              ('boost elastic',\n",
       "                               AdaBoostRegressor(base_estimator=...\n",
       "                                                 n_estimators=10000000,\n",
       "                                                 random_state=42)),\n",
       "                              ('boost linear',\n",
       "                               AdaBoostRegressor(base_estimator=LinearRegression(),\n",
       "                                                 n_estimators=10000000,\n",
       "                                                 random_state=42)),\n",
       "                              ('RF',\n",
       "                               RandomForestRegressor(n_estimators=10, n_jobs=-1,\n",
       "                                                     random_state=42)),\n",
       "                              ('KNN',\n",
       "                               KNeighborsRegressor(n_jobs=-1, n_neighbors=106)),\n",
       "                              ('DTR', DecisionTreeRegressor())],\n",
       "                  final_estimator=KNeighborsRegressor(n_jobs=-1,\n",
       "                                                      n_neighbors=106))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "69058.41897419888"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "estimators = [\n",
    "    ('boost ridge', boosting_RD),\n",
    "    ('boost lasso', boosting_LS),\n",
    "    ('boost elastic',boosting_EL),\n",
    "    ('boost linear',boosting_LR),\n",
    "    ('RF',RF),\n",
    "    ('KNN',KNN),\n",
    "    ('DTR',DTR)\n",
    "]\n",
    "stacking_boost = StackingRegressor(estimators=estimators, final_estimator=KNN)\n",
    "display(stacking_boost.fit(X_train, y_train))\n",
    "preds = stacking_boost.predict(X_test)\n",
    "sc = np.sqrt(mean_squared_error(y_test,preds))\n",
    "sc"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43663c5b",
   "metadata": {
    "papermill": {
     "duration": 0.034324,
     "end_time": "2024-09-09T05:20:39.941911",
     "exception": false,
     "start_time": "2024-09-09T05:20:39.907587",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## bagging"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "15e124ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:20:40.012686Z",
     "iopub.status.busy": "2024-09-09T05:20:40.012125Z",
     "iopub.status.idle": "2024-09-09T05:20:49.416651Z",
     "shell.execute_reply": "2024-09-09T05:20:49.415310Z"
    },
    "papermill": {
     "duration": 9.443762,
     "end_time": "2024-09-09T05:20:49.419568",
     "exception": false,
     "start_time": "2024-09-09T05:20:39.975806",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "78332.05084795525"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bagging = BaggingRegressor(base_estimator=DTR, n_estimators=10, random_state=42)\n",
    "bagging.fit(X_train, y_train)\n",
    "preds = bagging.predict(X_test)\n",
    "sc = np.sqrt(mean_squared_error(y_test,preds))\n",
    "sc"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a1b5cd8",
   "metadata": {
    "papermill": {
     "duration": 0.035939,
     "end_time": "2024-09-09T05:20:49.492392",
     "exception": false,
     "start_time": "2024-09-09T05:20:49.456453",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Stacking"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "cd8f3955",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:20:49.571934Z",
     "iopub.status.busy": "2024-09-09T05:20:49.571394Z",
     "iopub.status.idle": "2024-09-09T05:23:21.460127Z",
     "shell.execute_reply": "2024-09-09T05:23:21.458963Z"
    },
    "papermill": {
     "duration": 151.931835,
     "end_time": "2024-09-09T05:23:21.462547",
     "exception": false,
     "start_time": "2024-09-09T05:20:49.530712",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>StackingRegressor(estimators=[(&#x27;ridge&#x27;,\n",
       "                               Ridge(alpha=10, max_iter=1000, solver=&#x27;saga&#x27;,\n",
       "                                     tol=0.01)),\n",
       "                              (&#x27;lasso&#x27;,\n",
       "                               Lasso(alpha=10, selection=&#x27;random&#x27;, tol=0.01)),\n",
       "                              (&#x27;elastic&#x27;,\n",
       "                               ElasticNet(alpha=0.01, l1_ratio=0.9,\n",
       "                                          max_iter=10000, selection=&#x27;random&#x27;,\n",
       "                                          tol=0.001)),\n",
       "                              (&#x27;KNN&#x27;,\n",
       "                               KNeighborsRegressor(n_jobs=-1,\n",
       "                                                   n_neighbors=106))],\n",
       "                  final_estimator=KNeighborsRegressor(n_jobs=-1,\n",
       "                                                      n_neighbors=106))</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-14\" type=\"checkbox\" ><label for=\"sk-estimator-id-14\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StackingRegressor</label><div class=\"sk-toggleable__content\"><pre>StackingRegressor(estimators=[(&#x27;ridge&#x27;,\n",
       "                               Ridge(alpha=10, max_iter=1000, solver=&#x27;saga&#x27;,\n",
       "                                     tol=0.01)),\n",
       "                              (&#x27;lasso&#x27;,\n",
       "                               Lasso(alpha=10, selection=&#x27;random&#x27;, tol=0.01)),\n",
       "                              (&#x27;elastic&#x27;,\n",
       "                               ElasticNet(alpha=0.01, l1_ratio=0.9,\n",
       "                                          max_iter=10000, selection=&#x27;random&#x27;,\n",
       "                                          tol=0.001)),\n",
       "                              (&#x27;KNN&#x27;,\n",
       "                               KNeighborsRegressor(n_jobs=-1,\n",
       "                                                   n_neighbors=106))],\n",
       "                  final_estimator=KNeighborsRegressor(n_jobs=-1,\n",
       "                                                      n_neighbors=106))</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>ridge</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-15\" type=\"checkbox\" ><label for=\"sk-estimator-id-15\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Ridge</label><div class=\"sk-toggleable__content\"><pre>Ridge(alpha=10, max_iter=1000, solver=&#x27;saga&#x27;, tol=0.01)</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>lasso</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-16\" type=\"checkbox\" ><label for=\"sk-estimator-id-16\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Lasso</label><div class=\"sk-toggleable__content\"><pre>Lasso(alpha=10, selection=&#x27;random&#x27;, tol=0.01)</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>elastic</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-17\" type=\"checkbox\" ><label for=\"sk-estimator-id-17\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">ElasticNet</label><div class=\"sk-toggleable__content\"><pre>ElasticNet(alpha=0.01, l1_ratio=0.9, max_iter=10000, selection=&#x27;random&#x27;,\n",
       "           tol=0.001)</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>KNN</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-18\" type=\"checkbox\" ><label for=\"sk-estimator-id-18\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsRegressor</label><div class=\"sk-toggleable__content\"><pre>KNeighborsRegressor(n_jobs=-1, n_neighbors=106)</pre></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>final_estimator</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-19\" type=\"checkbox\" ><label for=\"sk-estimator-id-19\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsRegressor</label><div class=\"sk-toggleable__content\"><pre>KNeighborsRegressor(n_jobs=-1, n_neighbors=106)</pre></div></div></div></div></div></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "StackingRegressor(estimators=[('ridge',\n",
       "                               Ridge(alpha=10, max_iter=1000, solver='saga',\n",
       "                                     tol=0.01)),\n",
       "                              ('lasso',\n",
       "                               Lasso(alpha=10, selection='random', tol=0.01)),\n",
       "                              ('elastic',\n",
       "                               ElasticNet(alpha=0.01, l1_ratio=0.9,\n",
       "                                          max_iter=10000, selection='random',\n",
       "                                          tol=0.001)),\n",
       "                              ('KNN',\n",
       "                               KNeighborsRegressor(n_jobs=-1,\n",
       "                                                   n_neighbors=106))],\n",
       "                  final_estimator=KNeighborsRegressor(n_jobs=-1,\n",
       "                                                      n_neighbors=106))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "69617.7233731967"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "estimators = [\n",
    "    ('ridge', RD),\n",
    "    ('lasso', LS),\n",
    "    ('elastic',EL),\n",
    "    ('KNN',KNN)\n",
    "]\n",
    "stacking = StackingRegressor(estimators=estimators, final_estimator=KNN)\n",
    "display(stacking.fit(X_train, y_train))\n",
    "preds = stacking.predict(X_test)\n",
    "sc = np.sqrt(mean_squared_error(y_test,preds))\n",
    "sc"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "64547ad3",
   "metadata": {
    "papermill": {
     "duration": 0.033831,
     "end_time": "2024-09-09T05:23:21.531266",
     "exception": false,
     "start_time": "2024-09-09T05:23:21.497435",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Test data submission"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "b4c74e5b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:23:21.601787Z",
     "iopub.status.busy": "2024-09-09T05:23:21.601296Z",
     "iopub.status.idle": "2024-09-09T05:23:21.609022Z",
     "shell.execute_reply": "2024-09-09T05:23:21.607834Z"
    },
    "papermill": {
     "duration": 0.046149,
     "end_time": "2024-09-09T05:23:21.611598",
     "exception": false,
     "start_time": "2024-09-09T05:23:21.565449",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pipeline = Pipeline([\n",
    "    ('engine_transform', FunctionTransformer(transform_engine, validate=False)),  \n",
    "    ('transmission_transform', FunctionTransformer(transform_transmission, validate=False)),   \n",
    "    ('drop_columns', FunctionTransformer(lambda test_df: column_dropper(test_df, columns=cols_to_drop), validate=False)),\n",
    "    ('label_encoder', FunctionTransformer(lambda test_df: encode_labels(test_df, columns_to_encode), validate=False)), \n",
    "    ('imputer', KNNImputer(n_neighbors=2)),    \n",
    "    ('scaler', StandardScaler()) \n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "9163037c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:23:21.681340Z",
     "iopub.status.busy": "2024-09-09T05:23:21.680865Z",
     "iopub.status.idle": "2024-09-09T05:23:22.333948Z",
     "shell.execute_reply": "2024-09-09T05:23:22.332545Z"
    },
    "papermill": {
     "duration": 0.691519,
     "end_time": "2024-09-09T05:23:22.337104",
     "exception": false,
     "start_time": "2024-09-09T05:23:21.645585",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "test_df = pd.read_csv('/kaggle/input/playground-series-s4e9/test.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77532ef2",
   "metadata": {
    "papermill": {
     "duration": 0.034675,
     "end_time": "2024-09-09T05:23:22.406403",
     "exception": false,
     "start_time": "2024-09-09T05:23:22.371728",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "d3516efe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:23:22.479701Z",
     "iopub.status.busy": "2024-09-09T05:23:22.478232Z",
     "iopub.status.idle": "2024-09-09T05:23:23.170620Z",
     "shell.execute_reply": "2024-09-09T05:23:23.169322Z"
    },
    "papermill": {
     "duration": 0.732646,
     "end_time": "2024-09-09T05:23:23.173926",
     "exception": false,
     "start_time": "2024-09-09T05:23:22.441280",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "transformed_test_df = pd.read_csv('/kaggle/input/temprory/finals_test (2).csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "d5c36d5f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:23:23.244538Z",
     "iopub.status.busy": "2024-09-09T05:23:23.243986Z",
     "iopub.status.idle": "2024-09-09T05:24:48.895900Z",
     "shell.execute_reply": "2024-09-09T05:24:48.894695Z"
    },
    "papermill": {
     "duration": 85.690307,
     "end_time": "2024-09-09T05:24:48.898920",
     "exception": false,
     "start_time": "2024-09-09T05:23:23.208613",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# transformed_test_df_nmp = pipeline.fit_transform(test_df)\n",
    "preds = stacking_boost.predict(transformed_test_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "d1cb5990",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:24:48.968609Z",
     "iopub.status.busy": "2024-09-09T05:24:48.968126Z",
     "iopub.status.idle": "2024-09-09T05:24:48.976685Z",
     "shell.execute_reply": "2024-09-09T05:24:48.975440Z"
    },
    "papermill": {
     "duration": 0.046525,
     "end_time": "2024-09-09T05:24:48.979171",
     "exception": false,
     "start_time": "2024-09-09T05:24:48.932646",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([15935.24528302, 98153.04716981, 66389.18867925, ...,\n",
       "       18680.26415094, 22910.04716981, 32274.79245283])"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "preds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "87e295c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:24:49.048019Z",
     "iopub.status.busy": "2024-09-09T05:24:49.046898Z",
     "iopub.status.idle": "2024-09-09T05:24:49.134056Z",
     "shell.execute_reply": "2024-09-09T05:24:49.132832Z"
    },
    "papermill": {
     "duration": 0.124141,
     "end_time": "2024-09-09T05:24:49.136697",
     "exception": false,
     "start_time": "2024-09-09T05:24:49.012556",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>188533</td>\n",
       "      <td>43878.016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>188534</td>\n",
       "      <td>43878.016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>188535</td>\n",
       "      <td>43878.016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>188536</td>\n",
       "      <td>43878.016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>188537</td>\n",
       "      <td>43878.016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>125685</th>\n",
       "      <td>314218</td>\n",
       "      <td>43878.016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>125686</th>\n",
       "      <td>314219</td>\n",
       "      <td>43878.016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>125687</th>\n",
       "      <td>314220</td>\n",
       "      <td>43878.016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>125688</th>\n",
       "      <td>314221</td>\n",
       "      <td>43878.016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>125689</th>\n",
       "      <td>314222</td>\n",
       "      <td>43878.016</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>125690 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            id      price\n",
       "0       188533  43878.016\n",
       "1       188534  43878.016\n",
       "2       188535  43878.016\n",
       "3       188536  43878.016\n",
       "4       188537  43878.016\n",
       "...        ...        ...\n",
       "125685  314218  43878.016\n",
       "125686  314219  43878.016\n",
       "125687  314220  43878.016\n",
       "125688  314221  43878.016\n",
       "125689  314222  43878.016\n",
       "\n",
       "[125690 rows x 2 columns]"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "subs = pd.read_csv('/kaggle/input/playground-series-s4e9/sample_submission.csv')\n",
    "subs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "03172350",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:24:49.206285Z",
     "iopub.status.busy": "2024-09-09T05:24:49.205854Z",
     "iopub.status.idle": "2024-09-09T05:24:49.617108Z",
     "shell.execute_reply": "2024-09-09T05:24:49.615742Z"
    },
    "papermill": {
     "duration": 0.449673,
     "end_time": "2024-09-09T05:24:49.620372",
     "exception": false,
     "start_time": "2024-09-09T05:24:49.170699",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "subs['price'] = preds\n",
    "subs.to_csv('submission.csv',index = False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d250c415",
   "metadata": {
    "papermill": {
     "duration": 0.034771,
     "end_time": "2024-09-09T05:24:49.690305",
     "exception": false,
     "start_time": "2024-09-09T05:24:49.655534",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Ensure getting files back again"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "adb77bd2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T05:24:49.761040Z",
     "iopub.status.busy": "2024-09-09T05:24:49.760503Z",
     "iopub.status.idle": "2024-09-09T05:24:49.766255Z",
     "shell.execute_reply": "2024-09-09T05:24:49.764884Z"
    },
    "papermill": {
     "duration": 0.04478,
     "end_time": "2024-09-09T05:24:49.769382",
     "exception": false,
     "start_time": "2024-09-09T05:24:49.724602",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# transformed_df_arr.to_csv('finals.csv')\n",
    "# transformed_test_df.to_csv('finals_test.csv')"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 9057646,
     "sourceId": 76728,
     "sourceType": "competition"
    },
    {
     "datasetId": 5658163,
     "sourceId": 9348755,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30761,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 607.073152,
   "end_time": "2024-09-09T05:24:50.931302",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-09-09T05:14:43.858150",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

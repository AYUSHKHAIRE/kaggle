{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d4c084b2",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-09-02T15:24:49.684923Z",
     "iopub.status.busy": "2024-09-02T15:24:49.684445Z",
     "iopub.status.idle": "2024-09-02T15:24:52.263891Z",
     "shell.execute_reply": "2024-09-02T15:24:52.262806Z"
    },
    "papermill": {
     "duration": 2.594514,
     "end_time": "2024-09-02T15:24:52.266518",
     "exception": false,
     "start_time": "2024-09-02T15:24:49.672004",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# EDA\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# setup\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "from IPython.display import display,HTML\n",
    "from tqdm import tqdm\n",
    "\n",
    "# structure\n",
    "from sklearn.pipeline import Pipeline , make_pipeline\n",
    "from sklearn.preprocessing import LabelEncoder,StandardScaler,FunctionTransformer\n",
    "from sklearn.impute import KNNImputer\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.metrics import r2_score\n",
    "from sklearn.compose import ColumnTransformer"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d58284d",
   "metadata": {
    "papermill": {
     "duration": 0.009574,
     "end_time": "2024-09-02T15:24:52.286449",
     "exception": false,
     "start_time": "2024-09-02T15:24:52.276875",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# BASE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c24dfb73",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-02T15:24:52.308949Z",
     "iopub.status.busy": "2024-09-02T15:24:52.307602Z",
     "iopub.status.idle": "2024-09-02T15:24:53.118671Z",
     "shell.execute_reply": "2024-09-02T15:24:53.117479Z"
    },
    "papermill": {
     "duration": 0.824986,
     "end_time": "2024-09-02T15:24:53.121342",
     "exception": false,
     "start_time": "2024-09-02T15:24:52.296356",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv('/kaggle/input/playground-series-s4e9/train.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "98202b51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-02T15:24:53.142770Z",
     "iopub.status.busy": "2024-09-02T15:24:53.142323Z",
     "iopub.status.idle": "2024-09-02T15:24:53.158502Z",
     "shell.execute_reply": "2024-09-02T15:24:53.157202Z"
    },
    "papermill": {
     "duration": 0.030055,
     "end_time": "2024-09-02T15:24:53.161285",
     "exception": false,
     "start_time": "2024-09-02T15:24:53.131230",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pipe_df = df.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e7837495",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-02T15:24:53.183187Z",
     "iopub.status.busy": "2024-09-02T15:24:53.182760Z",
     "iopub.status.idle": "2024-09-02T15:24:53.278293Z",
     "shell.execute_reply": "2024-09-02T15:24:53.277140Z"
    },
    "papermill": {
     "duration": 0.109331,
     "end_time": "2024-09-02T15:24:53.280800",
     "exception": false,
     "start_time": "2024-09-02T15:24:53.171469",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id                  0\n",
       "brand               0\n",
       "model               0\n",
       "model_year          0\n",
       "milage              0\n",
       "fuel_type        5083\n",
       "engine              0\n",
       "transmission        0\n",
       "ext_col             0\n",
       "int_col             0\n",
       "accident         2452\n",
       "clean_title     21419\n",
       "price               0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1a9c3859",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-02T15:24:53.303392Z",
     "iopub.status.busy": "2024-09-02T15:24:53.302945Z",
     "iopub.status.idle": "2024-09-02T15:24:53.501787Z",
     "shell.execute_reply": "2024-09-02T15:24:53.500619Z"
    },
    "papermill": {
     "duration": 0.212729,
     "end_time": "2024-09-02T15:24:53.504202",
     "exception": false,
     "start_time": "2024-09-02T15:24:53.291473",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "14d1c39e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-02T15:24:53.526608Z",
     "iopub.status.busy": "2024-09-02T15:24:53.525716Z",
     "iopub.status.idle": "2024-09-02T15:24:53.534323Z",
     "shell.execute_reply": "2024-09-02T15:24:53.533304Z"
    },
    "papermill": {
     "duration": 0.022086,
     "end_time": "2024-09-02T15:24:53.536439",
     "exception": false,
     "start_time": "2024-09-02T15:24:53.514353",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id               int64\n",
       "brand           object\n",
       "model           object\n",
       "model_year       int64\n",
       "milage           int64\n",
       "fuel_type       object\n",
       "engine          object\n",
       "transmission    object\n",
       "ext_col         object\n",
       "int_col         object\n",
       "accident        object\n",
       "clean_title     object\n",
       "price            int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6af603e5",
   "metadata": {
    "papermill": {
     "duration": 0.009783,
     "end_time": "2024-09-02T15:24:53.556547",
     "exception": false,
     "start_time": "2024-09-02T15:24:53.546764",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# distributions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d997673c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-02T15:24:53.578359Z",
     "iopub.status.busy": "2024-09-02T15:24:53.577942Z",
     "iopub.status.idle": "2024-09-02T15:24:53.583141Z",
     "shell.execute_reply": "2024-09-02T15:24:53.581915Z"
    },
    "papermill": {
     "duration": 0.018555,
     "end_time": "2024-09-02T15:24:53.585363",
     "exception": false,
     "start_time": "2024-09-02T15:24:53.566808",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# num_cols = ['milage','price']\n",
    "\n",
    "# fig, ax = plt.subplots(2, 1, figsize=(15, 10))\n",
    "\n",
    "# for i, col in enumerate(num_cols):\n",
    "#     sns.histplot(\n",
    "#         df,\n",
    "#         x=col,\n",
    "#         ax=ax[i],\n",
    "#         kde=True\n",
    "#     )\n",
    "#     ax[i].set_title(col)\n",
    "\n",
    "# plt.tight_layout()\n",
    "# plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "530fb0ac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-02T15:24:53.607293Z",
     "iopub.status.busy": "2024-09-02T15:24:53.606902Z",
     "iopub.status.idle": "2024-09-02T15:24:53.611979Z",
     "shell.execute_reply": "2024-09-02T15:24:53.610889Z"
    },
    "papermill": {
     "duration": 0.018613,
     "end_time": "2024-09-02T15:24:53.614100",
     "exception": false,
     "start_time": "2024-09-02T15:24:53.595487",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "num_cols = ['milage']\n",
    "# logdf = {}\n",
    "# for col in num_cols:\n",
    "#     logdf[col] = list(np.log(df[col]))\n",
    "# logdf = pd.DataFrame(logdf)\n",
    "    \n",
    "# fig, ax = plt.subplots(2, 1, figsize=(15, 10))\n",
    "\n",
    "# for i, col in enumerate(num_cols):\n",
    "#     sns.histplot(\n",
    "#         logdf,\n",
    "#         x=col,\n",
    "#         ax=ax[i],\n",
    "#         kde=True\n",
    "#     )\n",
    "#     ax[i].set_title(col)\n",
    "\n",
    "# plt.tight_layout()\n",
    "# plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "95ee5941",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-02T15:24:53.636089Z",
     "iopub.status.busy": "2024-09-02T15:24:53.635636Z",
     "iopub.status.idle": "2024-09-02T15:24:53.641201Z",
     "shell.execute_reply": "2024-09-02T15:24:53.640105Z"
    },
    "papermill": {
     "duration": 0.019423,
     "end_time": "2024-09-02T15:24:53.643639",
     "exception": false,
     "start_time": "2024-09-02T15:24:53.624216",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def log_transform(df, columns):\n",
    "    for col in columns:\n",
    "        df[col] = np.log1p(df[col])  \n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "0db81495",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-02T15:24:53.665756Z",
     "iopub.status.busy": "2024-09-02T15:24:53.665322Z",
     "iopub.status.idle": "2024-09-02T15:24:53.673193Z",
     "shell.execute_reply": "2024-09-02T15:24:53.671980Z"
    },
    "papermill": {
     "duration": 0.02145,
     "end_time": "2024-09-02T15:24:53.675352",
     "exception": false,
     "start_time": "2024-09-02T15:24:53.653902",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "catcolumns = list(df.columns)\n",
    "\n",
    "# Remove the specific columns 'id', 'milage', and 'price'\n",
    "for c in ['id', 'milage', 'price']:\n",
    "    if c in catcolumns:\n",
    "        catcolumns.remove(c)\n",
    "\n",
    "len(catcolumns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f28c404c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-02T15:24:53.697583Z",
     "iopub.status.busy": "2024-09-02T15:24:53.697160Z",
     "iopub.status.idle": "2024-09-02T15:24:53.702713Z",
     "shell.execute_reply": "2024-09-02T15:24:53.701640Z"
    },
    "papermill": {
     "duration": 0.019325,
     "end_time": "2024-09-02T15:24:53.704937",
     "exception": false,
     "start_time": "2024-09-02T15:24:53.685612",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# n_cols = 2\n",
    "# n_rows = len(catcolumns) // n_cols + len(catcolumns) % n_cols \n",
    "\n",
    "# fig, ax = plt.subplots(n_rows, n_cols, figsize=(18, len(catcolumns) * 3))\n",
    "# ax = ax.flatten()\n",
    "\n",
    "# for i, col in enumerate(catcolumns):\n",
    "#     if df[col].nunique() > 8:\n",
    "#         val_dict = df[col].value_counts().head(15)\n",
    "#         tmpdf = pd.DataFrame(val_dict).reset_index()\n",
    "#         tmpdf.columns = [col, 'count']\n",
    "        \n",
    "#         sns.barplot(\n",
    "#             x='count',  \n",
    "#             y=col,\n",
    "#             data=tmpdf,\n",
    "#             ax=ax[i]\n",
    "#         )\n",
    "#         ax[i].set_title(col)\n",
    "#         ax[i].tick_params(axis='x', rotation=45)  \n",
    "#     else:\n",
    "#         ax[i].pie(\n",
    "#             df[col].value_counts(),\n",
    "#             labels=df[col].value_counts().index,\n",
    "#             autopct='%1.1f%%',  \n",
    "#             startangle=90,      \n",
    "#             colors=sns.color_palette(\"husl\")  \n",
    "#         )\n",
    "#         ax[i].set_title(col)\n",
    "#         ax[i].axis('equal')  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "573a233e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-02T15:24:53.727305Z",
     "iopub.status.busy": "2024-09-02T15:24:53.726868Z",
     "iopub.status.idle": "2024-09-02T15:24:53.731950Z",
     "shell.execute_reply": "2024-09-02T15:24:53.730747Z"
    },
    "papermill": {
     "duration": 0.019032,
     "end_time": "2024-09-02T15:24:53.734201",
     "exception": false,
     "start_time": "2024-09-02T15:24:53.715169",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# sns.scatterplot(df,x = 'milage',y = 'price')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d2812823",
   "metadata": {
    "papermill": {
     "duration": 0.009961,
     "end_time": "2024-09-02T15:24:53.754506",
     "exception": false,
     "start_time": "2024-09-02T15:24:53.744545",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Feature engineering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "d31cbddf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-02T15:24:53.776755Z",
     "iopub.status.busy": "2024-09-02T15:24:53.776340Z",
     "iopub.status.idle": "2024-09-02T15:24:54.163534Z",
     "shell.execute_reply": "2024-09-02T15:24:54.162171Z"
    },
    "papermill": {
     "duration": 0.401196,
     "end_time": "2024-09-02T15:24:54.165945",
     "exception": false,
     "start_time": "2024-09-02T15:24:53.764749",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Column Name</th>\n",
       "      <th>Unique Values</th>\n",
       "      <th>Top 15 Values</th>\n",
       "      <th>total_values</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>brand</td>\n",
       "      <td>[MINI, Lincoln, Chevrolet, Genesis, Mercedes-Benz, Audi, Ford, BMW, Tesla, Cadillac, Land, GMC, Toyota, Hyundai, Volvo, Volkswagen, Buick, Rivian, RAM, Hummer, Alfa, INFINITI, Jeep, Porsche, McLaren, Honda, Lexus, Dodge, Nissan, Jaguar, Acura, Kia, Mitsubishi, Rolls-Royce, Maserati, Pontiac, Saturn, Bentley, Mazda, Subaru, Ferrari, Aston, Lamborghini, Chrysler, Lucid, Lotus, Scion, smart, Karma, Plymouth, Suzuki, FIAT, Saab, Bugatti, Mercury, Polestar, Maybach]</td>\n",
       "      <td>{'Ford': 23088, 'Mercedes-Benz': 19172, 'BMW': 17028, 'Chevrolet': 16335, 'Audi': 10887, 'Porsche': 10612, 'Land': 9525, 'Toyota': 8850, 'Lexus': 8643, 'Jeep': 6474, 'Cadillac': 4674, 'RAM': 4249, 'Nissan': 3930, 'Tesla': 3738, 'INFINITI': 3276, 'GMC': 3215, 'Dodge': 3133, 'Mazda': 2719, 'Kia': 2497, 'Lincoln': 2423, 'Subaru': 2381, 'Acura': 2282, 'Honda': 2101, 'Hyundai': 2045, 'Volkswagen': 1765, 'Jaguar': 1319, 'Bentley': 1155, 'MINI': 1064, 'Genesis': 969, 'Buick': 940}</td>\n",
       "      <td>57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>model</td>\n",
       "      <td>[Cooper S Base, LS V8, Silverado 2500 LT, G90 5.0 Ultimate, Metris Base, A6 2.0T Sport, A8 L 3.0T, Silverado 1500 1LZ, F-150 XLT, M4 Base, Camaro 1LT, Model S P100D, Escalade ESV Platinum, S4 3.0T Premium Plus, Rover Range Rover P530 SE SWB, AMG C 63 S, Yukon Denali, Rover Defender SE, Tundra SR5, AMG C 63 Base, Rover Defender S, Equus Signature, Mustang Premium, A8 L 55, XC70 T6 Platinum, Sequoia Limited, F-250 XLT, Tacoma PreRunner, A5 2.0T Premium, A3 2.0T Premium, E-Class E 300, E-Class E 350 4MATIC, Jetta S, 528 i xDrive, 330 i xDrive, AMG G 63 Base, C-Class C 300 4MATIC Sport, Enclave Premium, 328 xi, Corvette Grand Sport, AMG GT 53 Base, R1S Adventure Package, 1500 Laramie, Corvette Base, H2 Base, Romeo Stelvio Ti Sport, QX60 Base, Model 3 Long Range, Model X 75D, Genesis Coupe 3.8 Base, M6 Base, Gladiator Rubicon, Thunderbird Deluxe, Rover Range Rover Sport HSE, SL-Class SL500 Roadster, GLS 450 Base 4MATIC, Cayenne Base, Corvette Stingray w/2LT, SSR Base, M5 Base, 86 860 Special Edition, G-Class G 550 4MATIC, Camry SE, E-Class E 350, 570S Spider, Highlander XLE, Sequoia Platinum, F-250 King Ranch, CR-V EX-L, 911 Carrera 4S, Camry Solara SLE, 4Runner SR5, M3 Base, RS 7 4.0T Prestige, Camry LE, Q5 2.0T Premium Plus, Expedition Limited, Mustang EcoBoost Premium, 2500 Big Horn, Wrangler X, Focus RS Base, Countryman Cooper S ALL4, NX 300 Base, Mustang GT, Highlander Limited Platinum, 430 i, Ram 1500 Laramie Mega Cab, Xterra S, Tahoe LT, S-Class S 63 AMG, Suburban 1500 LTZ, AMG GT AMG GT S, E-Class E 550, XJ8 L, AMG CLA 45 Base 4MATIC, TT 1.8T, Escalade Platinum, M8 Gran Coupe Competition, ILX Premium Package, Suburban LT, ...]</td>\n",
       "      <td>{'F-150 XLT': 2945, 'M3 Base': 2229, 'Camaro 2SS': 1709, 'M4 Base': 1622, 'Mustang GT Premium': 1526, 'F-150 Lariat': 1410, 'E-Class E 350 4MATIC': 1357, '1500 Laramie': 1249, '911 Carrera S': 1219, 'Corvette Base': 1184, 'E-Class E 350': 1148, 'GX 460 Base': 1124, '911 Carrera': 1111, 'Explorer XLT': 1091, 'Corvette Stingray w/2LT': 1081, 'Rover Range Rover Sport HSE': 1027, 'Wrangler Sport': 1001, 'AMG G 63 Base': 994, 'F-250 XLT': 893, 'QX60 Base': 847, 'F-250 Lariat': 846, '911 Carrera 4S': 831, 'RX 350 Base': 821, 'Camaro 1SS': 813, 'Model Y Long Range': 798, 'Suburban LT': 782, 'Highlander XLE': 769, 'Macan S': 751, 'Corvette Stingray w/3LT': 740, 'C-Class C 300 4MATIC Sport': 735}</td>\n",
       "      <td>1897</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>model_year</td>\n",
       "      <td>[2007, 2002, 2017, 2021, 2018, 2016, 2020, 2015, 2011, 2013, 2023, 2019, 2012, 2014, 2008, 2009, 2022, 2003, 2005, 2001, 2006, 2000, 2010, 2004, 1997, 1998, 1999, 1994, 1993, 1996, 1995, 2024, 1974, 1992]</td>\n",
       "      <td>{2021: 18198, 2018: 16414, 2020: 15848, 2022: 15749, 2019: 15409, 2016: 13696, 2017: 12794, 2015: 11389, 2023: 8769, 2014: 8415, 2013: 6796, 2011: 6265, 2012: 6095, 2008: 5156, 2007: 4876, 2010: 4235, 2005: 3129, 2006: 2814, 2009: 2716, 2004: 2570, 2003: 1906, 2001: 1534, 2002: 1282, 2000: 558, 1999: 554, 1998: 343, 1997: 312, 1996: 189, 2024: 162, 1993: 140}</td>\n",
       "      <td>34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>milage</td>\n",
       "      <td>[213000, 143250, 136731, 19500, 7388, 40950, 62200, 102604, 38352, 74850, 212500, 81500, 93971, 60000, 20000, 41500, 15000, 46100, 153250, 16002, 7978, 87092, 154247, 51000, 100680, 183000, 67100, 39000, 244200, 11000, 57550, 17000, 30300, 120000, 22000, 83424, 7600, 20172, 67289, 9642, 107818, 32437, 55000, 10972, 7000, 27352, 171896, 62500, 137405, 33060, 49000, 38360, 88000, 66770, 73500, 12100, 70582, 46508, 122000, 153000, 44147, 86202, 9000, 87500, 61145, 1100, 17500, 22500, 170000, 76500, 3254, 55018, 2958, 40200, 3500, 45000, 137000, 80000, 186117, 13750, 23400, 90400, 192000, 29830, 83112, 95400, 110000, 29720, 26000, 6449, 160000, 1500, 46300, 153692, 63500, 100900, 85500, 41000, 167500, 9738, ...]</td>\n",
       "      <td>{60000: 1319, 170000: 1246, 120000: 1178, 110000: 1155, 130000: 970, 40000: 969, 50000: 921, 90000: 899, 87500: 808, 26000: 788, 39000: 758, 41500: 730, 45000: 672, 55000: 663, 70000: 661, 22000: 657, 106000: 649, 92000: 635, 152000: 627, 48000: 622, 28000: 622, 160000: 595, 15000: 582, 134000: 575, 123500: 561, 54000: 558, 162000: 557, 25000: 556, 18000: 551, 33000: 551}</td>\n",
       "      <td>6651</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>fuel_type</td>\n",
       "      <td>[Gasoline, E85 Flex Fuel, nan, Hybrid, Diesel, Plug-In Hybrid, –, not supported]</td>\n",
       "      <td>{'Gasoline': 165940, 'Hybrid': 6832, 'E85 Flex Fuel': 5406, 'Diesel': 3955, '–': 781, 'Plug-In Hybrid': 521, 'not supported': 15}</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>engine</td>\n",
       "      <td>[172.0HP 1.6L 4 Cylinder Engine Gasoline Fuel, 252.0HP 3.9L 8 Cylinder Engine Gasoline Fuel, 320.0HP 5.3L 8 Cylinder Engine Flex Fuel Capability, 420.0HP 5.0L 8 Cylinder Engine Gasoline Fuel, 208.0HP 2.0L 4 Cylinder Engine Gasoline Fuel, 252.0HP 2.0L 4 Cylinder Engine Gasoline Fuel, 333.0HP 3.0L V6 Cylinder Engine Gasoline Fuel, 355.0HP 5.3L 8 Cylinder Engine Flex Fuel Capability, 2.7L V6 24V PDI DOHC Twin Turbo, 425.0HP 3.0L Straight 6 Cylinder Engine Gasoline Fuel, 312.0HP 3.6L V6 Cylinder Engine Gasoline Fuel, Electric Motor Electric Fuel System, 420.0HP 6.2L 8 Cylinder Engine Gasoline Fuel, 523.0HP 4.4L 8 Cylinder Engine Gasoline Fuel, 503.0HP 4.0L 8 Cylinder Engine Gasoline Fuel, 395.0HP 3.0L Straight 6 Cylinder Engine Gasoline/Mild Electric Hybrid, 310.0HP 4.6L 8 Cylinder Engine Gasoline Fuel, 469.0HP 4.0L 8 Cylinder Engine Gasoline Fuel, 5.2L V10 40V PDI DOHC, 429.0HP 5.0L 8 Cylinder Engine Gasoline Fuel, 210.0HP 3.7L V6 Cylinder Engine Gasoline Fuel, 335.0HP 3.0L V6 Cylinder Engine Gasoline/Mild Electric Hybrid, 316.0HP 2.0L 4 Cylinder Engine Gasoline Fuel, 381.0HP 5.7L 8 Cylinder Engine Gasoline Fuel, 450.0HP 6.7L 8 Cylinder Engine Diesel Fuel, 236.0HP 4.0L V6 Cylinder Engine Gasoline Fuel, 211.0HP 2.0L 4 Cylinder Engine Gasoline Fuel, 220.0HP 2.0L 4 Cylinder Engine Gasoline Fuel, 255.0HP 2.0L 4 Cylinder Engine Gasoline Fuel, 518.0HP Electric Motor Electric Fuel System, 268.0HP 3.5L V6 Cylinder Engine Gasoline Fuel, 174.0HP 2.8L V6 Cylinder Engine Gasoline Fuel, 240.0HP 2.0L 4 Cylinder Engine Gasoline Fuel, 248.0HP 2.0L 4 Cylinder Engine Gasoline Fuel, 563.0HP 5.5L 8 Cylinder Engine Gasoline Fuel, 241.0HP 2.0L 4 Cylinder Engine Gasoline Fuel, 3.6L V6 24V GDI DOHC, 230.0HP 3.0L Straight 6 Cylinder Engine Gasoline Fuel, 430.0HP 6.2L 8 Cylinder Engine Gasoline Fuel, 4.0L V8 32V GDI DOHC Twin Turbo, 835.0HP Electric Motor Electric Fuel System, 5.7L V8 16V MPFI OHV, 300.0HP 5.4L 8 Cylinder Engine Gasoline Fuel, 310.0HP 6.8L 10 Cylinder Engine Gasoline Fuel, 280.0HP 2.0L 4 Cylinder Engine Gasoline Fuel, 295.0HP 3.5L V6 Cylinder Engine Gasoline Fuel, Dual Motor - Standard, 348.0HP 3.8L V6 Cylinder Engine Gasoline Fuel, 560.0HP 4.4L 8 Cylinder Engine Gasoline Fuel, 285.0HP 3.6L V6 Cylinder Engine Gasoline Fuel, 300.0HP 4.4L 8 Cylinder Engine Gasoline Fuel, 302.0HP 5.0L 8 Cylinder Engine Gasoline Fuel, 3.0L V6 24V GDI DOHC Twin Turbo, 300.0HP 3.6L V6 Cylinder Engine Gasoline Fuel, 490.0HP 6.2L 8 Cylinder Engine Gasoline Fuel, 300.0HP 5.3L 8 Cylinder Engine Gasoline Fuel, 200.0HP 2.0L 4 Cylinder Engine Gasoline Fuel, 416.0HP 4.0L 8 Cylinder Engine Gasoline Fuel, 179.0HP 2.5L 4 Cylinder Engine Gasoline Fuel, 302.0HP 3.5L V6 Cylinder Engine Gasoline Fuel, 3.8L V8 32V MPFI DOHC Twin Turbo, 3.4L V6 24V PDI DOHC Twin Turbo Hybrid, 385.0HP 6.2L 8 Cylinder Engine Flex Fuel Capability, 160.0HP 2.4L 4 Cylinder Engine Gasoline Fuel, 385.0HP 3.8L Flat 6 Cylinder Engine Gasoline Fuel, 210.0HP 3.3L V6 Cylinder Engine Gasoline Fuel, 385.0HP 5.0L 8 Cylinder Engine Gasoline Fuel, 270.0HP 4.0L V6 Cylinder Engine Gasoline Fuel, 560.0HP 4.0L 8 Cylinder Engine Gasoline Fuel, 210.0HP 4.0L V6 Cylinder Engine Gasoline Fuel, 3.5L V6 24V PDI DOHC Twin Turbo, 310.0HP 2.3L 4 Cylinder Engine Gasoline Fuel, 350.0HP 6.7L Straight 6 Cylinder Engine Diesel Fuel, 190.0HP 4.0L Straight 6 Cylinder Engine Gasoline Fuel, 350.0HP 2.3L 4 Cylinder Engine Gasoline Fuel, 181.0HP 1.6L 4 Cylinder Engine Gasoline Fuel, 2.0L I4 16V PDI DOHC Turbo, 300.0HP 4.6L 8 Cylinder Engine Gasoline Fuel, 270.0HP 3.5L V6 Cylinder Engine Gasoline Fuel, 265.0HP 3.5L V6 Cylinder Engine Gasoline Fuel, 345.0HP 5.7L 8 Cylinder Engine Gasoline Fuel, 400.0HP 3.0L V6 Cylinder Engine Gasoline Fuel, 261.0HP 4.0L V6 Cylinder Engine Gasoline Fuel, 355.0HP 5.3L 8 Cylinder Engine Gasoline Fuel, 536.0HP 5.5L 8 Cylinder Engine Gasoline Fuel, 320.0HP 5.3L 8 Cylinder Engine Gasoline Fuel, 333.0HP 3.2L Straight 6 Cylinder Engine Gasoline Fuel, 402.0HP 4.7L 8 Cylinder Engine Gasoline Fuel, 450.0HP 4.0L 8 Cylinder Engine Gasoline Fuel, 382.0HP 3.0L Straight 6 Cylinder Engine Gasoline/Mild Electric Hybrid, 180.0HP 1.8L 4 Cylinder Engine Gasoline Fuel, 617.0HP 4.4L 8 Cylinder Engine Gasoline Fuel, 2.4L I4 16V GDI DOHC, 173.0HP 2.7L V6 Cylinder Engine Gasoline Fuel, 389.0HP 3.0L Straight 6 Cylinder Engine Plug-In Electric/Gas, 429.0HP 4.7L 8 Cylinder Engine Gasoline Fuel, 318.0HP 3.6L V6 Cylinder Engine Gasoline Fuel, 2.0 Liter DOHC Turbo, 3.6L V6 24V MPFI DOHC, 325.0HP 3.7L V6 Cylinder Engine Gasoline Fuel, ...]</td>\n",
       "      <td>{'355.0HP 5.3L 8 Cylinder Engine Gasoline Fuel': 3462, '240.0HP 2.0L 4 Cylinder Engine Gasoline Fuel': 2902, '420.0HP 6.2L 8 Cylinder Engine Gasoline Fuel': 2841, '2.0L I4 16V GDI DOHC Turbo': 2680, '375.0HP 3.5L V6 Cylinder Engine Gasoline Fuel': 2451, '340.0HP 3.0L V6 Cylinder Engine Gasoline Fuel': 2436, '490.0HP 6.2L 8 Cylinder Engine Gasoline Fuel': 2187, '455.0HP 6.2L 8 Cylinder Engine Gasoline Fuel': 2138, '425.0HP 3.0L Straight 6 Cylinder Engine Gasoline Fuel': 2134, '300.0HP 3.0L Straight 6 Cylinder Engine Gasoline Fuel': 2084, '295.0HP 3.5L V6 Cylinder Engine Gasoline Fuel': 1917, '285.0HP 3.6L V6 Cylinder Engine Gasoline Fuel': 1910, '302.0HP 3.5L V6 Cylinder Engine Gasoline Fuel': 1895, '3.5L V6 24V PDI DOHC Twin Turbo': 1842, '301.0HP 4.6L 8 Cylinder Engine Gasoline Fuel': 1578, '5.7L V8 16V MPFI OHV': 1540, '4.0L V8 32V GDI DOHC Twin Turbo': 1516, '3.6L V6 24V MPFI DOHC': 1480, '268.0HP 3.5L V6 Cylinder Engine Gasoline Fuel': 1470, '333.0HP 3.0L V6 Cylinder Engine Gasoline Fuel': 1319, '365.0HP 3.5L V6 Cylinder Engine Gasoline Fuel': 1275, '211.0HP 2.0L 4 Cylinder Engine Gasoline Fuel': 1234, '3.6L V6 24V GDI DOHC': 1224, '2.0 Liter Turbo': 1164, '210.0HP 3.7L V6 Cylinder Engine Gasoline Fuel': 1132, '252.0HP 2.0L 4 Cylinder Engine Gasoline Fuel': 1120, '248.0HP 2.0L 4 Cylinder Engine Gasoline Fuel': 1080, '255.0HP 2.0L 4 Cylinder Engine Gasoline Fuel': 1054, '380.0HP 3.0L V6 Cylinder Engine Gasoline Fuel': 1027, '381.0HP 5.7L 8 Cylinder Engine Gasoline Fuel': 1012}</td>\n",
       "      <td>1117</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>transmission</td>\n",
       "      <td>[A/T, Transmission w/Dual Shift Mode, 7-Speed A/T, 8-Speed A/T, 10-Speed Automatic, 1-Speed A/T, 6-Speed A/T, 10-Speed A/T, 9-Speed A/T, 8-Speed Automatic, 9-Speed Automatic, 5-Speed A/T, Automatic, 7-Speed Automatic with Auto-Shift, CVT Transmission, 5-Speed M/T, M/T, 6-Speed M/T, 6-Speed Automatic, 4-Speed Automatic, 7-Speed M/T, 2-Speed A/T, 1-Speed Automatic, Automatic CVT, 4-Speed A/T, 6-Speed Manual, Transmission Overdrive Switch, 8-Speed Automatic with Auto-Shift, 7-Speed Manual, 7-Speed Automatic, 9-Speed Automatic with Auto-Shift, 6-Speed Automatic with Auto-Shift, 6-Speed Electronically Controlled Automatic with O, F, CVT-F, 8-Speed Manual, Manual, –, 2, 6 Speed At/Mt, 5-Speed Automatic, 2-Speed Automatic, 8-SPEED A/T, 7-Speed, Variable, Single-Speed Fixed Gear, 8-SPEED AT, 10-Speed Automatic with Overdrive, 7-Speed DCT Automatic, SCHEDULED FOR OR IN PRODUCTION, 6-Speed, 6 Speed Mt]</td>\n",
       "      <td>{'A/T': 49904, '8-Speed A/T': 20645, 'Transmission w/Dual Shift Mode': 19255, '6-Speed A/T': 18044, '6-Speed M/T': 11998, '7-Speed A/T': 11124, 'Automatic': 10691, '8-Speed Automatic': 8431, '10-Speed A/T': 8044, '9-Speed A/T': 3866, '5-Speed A/T': 3217, '10-Speed Automatic': 3164, '6-Speed Automatic': 2799, '4-Speed A/T': 2546, '5-Speed M/T': 2409, '9-Speed Automatic': 2325, 'CVT Transmission': 1990, '1-Speed A/T': 1869, 'M/T': 1179, '7-Speed Automatic with Auto-Shift': 1172, 'Automatic CVT': 829, '8-Speed Automatic with Auto-Shift': 549, '1-Speed Automatic': 365, '7-Speed M/T': 355, '6-Speed Manual': 211, '7-Speed Automatic': 178, '5-Speed Automatic': 159, 'Transmission Overdrive Switch': 156, '7-Speed Manual': 151, '6-Speed Automatic with Auto-Shift': 111}</td>\n",
       "      <td>52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>ext_col</td>\n",
       "      <td>[Yellow, Silver, Blue, Black, White, Snowflake White Pearl Metallic, Gray, Green, Santorini Black Metallic, Purple, Ebony Twilight Metallic, Red, Magnetite Black Metallic, Diamond Black, Vega Blue, Beige, Gold, Platinum White Pearl, Metallic, White Frost Tri-Coat, Firecracker Red Clearcoat, Phytonic Blue Metallic, Blu, Orange, Brown, Brilliant Silver Metallic, Black Raven, Black Clearcoat, Firenze Red, Agate Black Metallic, Glacial White Pearl, Majestic Plum Metallic, designo Diamond White Metallic, Oxford White, Black Sapphire Metallic, Mythos Black, Granite Crystal Clearcoat Metallic, White Diamond Tri-Coat, Magnetite Gray Metallic, Carpathian Grey Premium Metallic, designo Diamond White Bright, Phantom Black Pearl Effect / Black Roof, Nebula Gray Pearl, Deep Crystal Blue Mica, Flame Red Clearcoat, Lunar Blue Metallic, Bright White Clearcoat, Rapid Red Metallic Tinted Clearcoat, Caviar, Dark Ash Metallic, Velvet Red Pearlcoat, Silver Zynith, Super Black, Antimatter Blue Metallic, Dark Moon Blue Metallic, Summit White, Ebony Black, –, Black Cherry, Delmonico Red Pearlcoat, Platinum Quartz Metallic, Ultra White, Python Green, Garnet Red Metallic, Snow White Pearl, Cajun Red Tintcoat, Midnight Black Metallic, Diamond White, Mythos Black Metallic, Soul Red Crystal Metallic, Atomic Silver, Obsidian, Magnetic Metallic, Twilight Blue Metallic, Star White, Stormy Sea, Tango Red Metallic, Hyper Red, Portofino Gray, MANUFAKTUR Diamond White Bright, Snowflake White Pearl, Patriot Blue Pearlcoat, Tungsten Metallic, Chronos Gray Metallic, Silver Ice Metallic, Daytona Gray Pearl Effect, Ruby Red Metallic Tinted Clearcoat, Alpine White, Eminent White Pearl, Manhattan Noir Metallic, Quicksilver Metallic, Stellar Black Metallic, Sparkling Silver, Blueprint, Crystal Black Silica, Black Noir Pearl, Arancio Borealis, Typhoon Gray, Ibis White, Graphite Grey, ...]</td>\n",
       "      <td>{'Black': 48658, 'White': 43815, 'Gray': 25293, 'Silver': 16995, 'Blue': 14555, 'Red': 9901, 'Green': 2698, 'Gold': 1668, 'Brown': 1162, 'Orange': 1139, 'Beige': 1087, 'Yellow': 978, 'Bright White Clearcoat': 755, 'Diamond Black': 711, 'Agate Black Metallic': 639, 'Summit White': 514, 'Silver Ice Metallic': 456, 'Mythos Black Metallic': 417, 'Midnight Black Metallic': 379, '–': 366, 'Granite Crystal Clearcoat Metallic': 365, 'Purple': 354, 'Santorini Black Metallic': 323, 'Oxford White': 306, 'Obsidian Black Metallic': 293, 'Black Clearcoat': 292, 'Ebony Twilight Metallic': 289, 'Alpine White': 287, 'designo Diamond White Metallic': 215, 'Daytona Gray Pearl Effect': 215}</td>\n",
       "      <td>319</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>int_col</td>\n",
       "      <td>[Gray, Beige, Black, –, Blue, White, Red, Brown, Dark Galvanized, Parchment., Boulder, Orange, Medium Earth Gray, Ebony, Canberra Beige, Jet Black, Silver, Light Platinum / Jet Black, Macchiato/Magmagrey, Gold, Cloud, Rioja Red, Global Black, Green, Medium Stone, Navy Pier, Dark Ash, BLACK, Portland, Sandstone, Canberra Beige/Black, Diesel Gray / Black, Sarder Brown, Black Onyx, White / Brown, Black/Gun Metal, Slate, Satin Black, Macchiato Beige/Black, Charcoal, Black / Express Red, Cappuccino, Aragon Brown, Parchment, Oyster W/Contrast, Adrenaline Red, Ebony., Shara Beige, Graystone, Pearl Beige, Nero Ade, Graphite, Tan/Ebony/Ebony, Charcoal Black, Medium Ash Gray, Ebony Black, Light Titanium, Sakhir Orange, Tan, Rock Gray, Brandy, Carbon Black, Amber, Black w/Red Stitching, Hotspur, Chateau, Ice, Deep Garnet, Blk, Grace White, Oyster/Black, Mesa, Espresso, Black/Graphite, Ebony / Ebony Accents, Tan/Ebony, Ceramic, Medium Dark Slate, Graphite w/Gun Metal, Obsidian Black, Cocoa / Dune, Roast, Yellow, Hotspur Hide, Gray w/Blue Bolsters, Chestnut, Saiga Beige, ORANGE, Charles Blue, Walnut, Ivory / Ebony, Caramel, Pimento Red w/Ebony, Saddle Brown, Dark Gray, Silk Beige/Espresso Brown, Black / Brown, Ebony/Light Oyster Stitch, Ebony / Pimento, Mistral Gray / Raven, ...]</td>\n",
       "      <td>{'Black': 107674, 'Beige': 24495, 'Gray': 21204, 'Brown': 5810, 'Red': 5145, 'White': 4743, '–': 4527, 'Jet Black': 2398, 'Ebony': 1833, 'Orange': 932, 'Blue': 743, 'Global Black': 628, 'Silver': 429, 'Nero Ade': 389, 'Gold': 367, 'Black / Express Red': 326, 'Black Onyx': 256, 'Graphite': 254, 'Rioja Red': 244, 'Diesel Gray / Black': 223, 'Charcoal': 210, 'Green': 195, 'Medium Stone': 170, 'Medium Earth Gray': 170, 'Parchment': 169, 'Sandstone': 159, 'Satin Black': 153, 'Tan': 149, 'Canberra Beige/Black': 139, 'Shara Beige': 126}</td>\n",
       "      <td>156</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>accident</td>\n",
       "      <td>[None reported, At least 1 accident or damage reported, nan]</td>\n",
       "      <td>{'None reported': 144514, 'At least 1 accident or damage reported': 41567}</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>clean_title</td>\n",
       "      <td>[Yes, nan]</td>\n",
       "      <td>{'Yes': 167114}</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>price</td>\n",
       "      <td>[4200, 4999, 13900, 45000, 97500, 29950, 28500, 12500, 62890, 4000, 7950, 19000, 51500, 12300, 56900, 44900, 68500, 55000, 9999, 46900, 41998, 16500, 9900, 76000, 33687, 29000, 25900, 38000, 3499, 17900, 39499, 104900, 64000, 15000, 87000, 23000, 165000, 28000, 63900, 12000, 30000, 32000, 244896, 145000, 42599, 10000, 49999, 26500, 34500, 21000, 59598, 53600, 16000, 33200, 53900, 27000, 32900, 8000, 4900, 29999, 23500, 98900, 36800, 193063, 47500, 99000, 7500, 30500, 92500, 65998, 48000, 54500, 63000, 13999, 22000, 8500, 95000, 11999, 43500, 6700, 27599, 18750, 27899, 9500, 29500, 39995, 24995, 4500, 29900, 15999, 8300, 39000, 17500, 65000, 13490, 62500, 6800, 41950, 87500, 29998, ...]</td>\n",
       "      <td>{15000: 1920, 12000: 1459, 30000: 1280, 29000: 1228, 8500: 1204, 12500: 1202, 18000: 1198, 22000: 1195, 16000: 1188, 17500: 1159, 35000: 1143, 17000: 1111, 19500: 1093, 28000: 1042, 32000: 1042, 22500: 1013, 26000: 1004, 16500: 991, 6500: 989, 31000: 989, 20000: 987, 15500: 966, 21000: 956, 11500: 947, 10500: 939, 27500: 934, 45000: 931, 50000: 919, 10000: 903, 7500: 897}</td>\n",
       "      <td>1569</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "column_names = []\n",
    "unique_values = []\n",
    "top_15_dict = []\n",
    "total_values = []\n",
    "\n",
    "for c in df.columns[1:]:\n",
    "    column_names.append(c)\n",
    "    \n",
    "    unique_vals = df[c].unique().tolist()\n",
    "    unique_values.append(unique_vals)\n",
    "\n",
    "    top_15 = df[c].value_counts().head(30).to_dict()\n",
    "    top_15_dict.append(top_15)\n",
    "    total_values.append(df[c].nunique())\n",
    "\n",
    "udf = pd.DataFrame({\n",
    "    'Column Name': column_names,\n",
    "    'Unique Values': unique_values,\n",
    "    'Top 15 Values': top_15_dict,\n",
    "    'total_values':total_values\n",
    "})\n",
    "\n",
    "display(HTML(udf.to_html()))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fb7c52e5",
   "metadata": {
    "papermill": {
     "duration": 0.010677,
     "end_time": "2024-09-02T15:24:54.188075",
     "exception": false,
     "start_time": "2024-09-02T15:24:54.177398",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Engine "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "4e147730",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-02T15:24:54.211658Z",
     "iopub.status.busy": "2024-09-02T15:24:54.211241Z",
     "iopub.status.idle": "2024-09-02T15:24:55.046465Z",
     "shell.execute_reply": "2024-09-02T15:24:55.045348Z"
    },
    "papermill": {
     "duration": 0.849946,
     "end_time": "2024-09-02T15:24:55.048900",
     "exception": false,
     "start_time": "2024-09-02T15:24:54.198954",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 188533/188533 [00:00<00:00, 474048.02it/s]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Index(['id', 'brand', 'model', 'model_year', 'milage', 'fuel_type', 'engine',\n",
       "       'transmission', 'ext_col', 'int_col', 'accident', 'clean_title',\n",
       "       'price', 'power', 'capacity', 'no_of_cy'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def transform_engine(df):\n",
    "    engdf = {\n",
    "        'power': [],\n",
    "        'capacity': [],\n",
    "        'no_of_cy': [],\n",
    "    }\n",
    "\n",
    "    for eng in tqdm(df['engine']):\n",
    "        englist = eng.split(' ')\n",
    "        if len(englist) > 0:\n",
    "            eng_pow = englist[0]\n",
    "            if 'HP' in eng_pow:\n",
    "                eng_pow = eng_pow.replace('HP', '')\n",
    "                engdf['power'].append(eng_pow)\n",
    "            else:\n",
    "                engdf['power'].append(None)\n",
    "        else:\n",
    "            engdf['power'].append(None)\n",
    "        \n",
    "        # Extract capacity\n",
    "        if len(englist) > 1:\n",
    "            cap = englist[1]\n",
    "            if 'L' in cap:\n",
    "                cap = cap.replace('L', '')\n",
    "                engdf['capacity'].append(cap)\n",
    "            else:\n",
    "                engdf['capacity'].append(None)\n",
    "        else:\n",
    "            engdf['capacity'].append(None)\n",
    "        \n",
    "        # Extract number of cylinders\n",
    "        if 'Cylinder' in englist:\n",
    "            try:\n",
    "                cyld = englist.index('Cylinder')\n",
    "                act_ind = cyld - 1\n",
    "                if act_ind >= 0 and act_ind < len(englist):\n",
    "                    cy = englist[act_ind]\n",
    "                    cy = cy.replace('v', '')\n",
    "                    cy = cy.replace('V', '')\n",
    "                    engdf['no_of_cy'].append(cy)\n",
    "                else:\n",
    "                    engdf['no_of_cy'].append(None)\n",
    "            except IndexError:\n",
    "                engdf['no_of_cy'].append(None)\n",
    "        else:\n",
    "            engdf['no_of_cy'].append(None)\n",
    "    \n",
    "    eng_df = pd.DataFrame(engdf)\n",
    "    newdf = pd.concat([df, eng_df], axis=1)\n",
    "    \n",
    "    # Handle None and 'iter' in the 'capacity' column\n",
    "    numeric_values = [float(x) for x in newdf['capacity'] if isinstance(x, str) and x.replace('.', '', 1).isdigit()]\n",
    "    mean = np.mean(numeric_values) if numeric_values else 0\n",
    "    \n",
    "    def replace_values(x):\n",
    "        if x == 'iter' or x is None:\n",
    "            return f'{mean}'\n",
    "        elif isinstance(x, str) and x.replace('.', '', 1).isdigit():\n",
    "            return f'{float(x)}'\n",
    "        else:\n",
    "            return x\n",
    "    \n",
    "    newdf['capacity'] = newdf['capacity'].apply(replace_values)\n",
    "    return newdf\n",
    "newdf = transform_engine(df)\n",
    "newdf.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a1bba30",
   "metadata": {
    "papermill": {
     "duration": 0.011032,
     "end_time": "2024-09-02T15:24:55.071330",
     "exception": false,
     "start_time": "2024-09-02T15:24:55.060298",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Transmission"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "3759e0f0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-02T15:24:55.095673Z",
     "iopub.status.busy": "2024-09-02T15:24:55.095296Z",
     "iopub.status.idle": "2024-09-02T15:24:55.756645Z",
     "shell.execute_reply": "2024-09-02T15:24:55.755445Z"
    },
    "papermill": {
     "duration": 0.676703,
     "end_time": "2024-09-02T15:24:55.759343",
     "exception": false,
     "start_time": "2024-09-02T15:24:55.082640",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 188533/188533 [00:00<00:00, 562668.48it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['id', 'brand', 'model', 'model_year', 'milage', 'fuel_type', 'engine',\n",
      "       'transmission', 'ext_col', 'int_col', 'accident', 'clean_title',\n",
      "       'price', 'power', 'capacity', 'no_of_cy', 'mode', 'speed', 'others'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "def transform_transmission(newdf):\n",
    "    trndf = {\n",
    "        'mode': [],\n",
    "        'speed': [],\n",
    "        'others': [],\n",
    "    }\n",
    "\n",
    "    modes_keywords = ['A/T', 'Automatic', 'M/T', 'Manual', 'CVT', 'DCT', 'Dual Shift Mode']\n",
    "\n",
    "    # Initialize lists to collect speeds\n",
    "    speed_values = []\n",
    "\n",
    "    # Process each transmission entry\n",
    "    for tr in tqdm(newdf['transmission']):\n",
    "        translist = tr.split(' ')\n",
    "    \n",
    "        speed = None\n",
    "        others = []\n",
    "        for t in translist:\n",
    "            if 'Speed' in t:\n",
    "                try:\n",
    "                    speed = t.split('-')[0]\n",
    "                    if speed.isdigit():\n",
    "                        speed_values.append(int(speed))\n",
    "                except IndexError:\n",
    "                    speed = None\n",
    "            else:\n",
    "                if t not in modes_keywords:  \n",
    "                    others.append(t)\n",
    "    \n",
    "        mode = None\n",
    "        mode_found = False\n",
    "        for keyword in modes_keywords:\n",
    "            if keyword in translist:\n",
    "                mode = keyword\n",
    "                mode_found = True\n",
    "                break\n",
    "        if not mode_found:\n",
    "            mode = 'Unknown'\n",
    "    \n",
    "        others_str = ' '.join(others) if len(others) > 1 else None\n",
    "    \n",
    "        trndf['others'].append(None)\n",
    "        trndf['mode'].append(mode)\n",
    "        trndf['speed'].append(speed)\n",
    "    \n",
    "    # Convert to DataFrame\n",
    "    trn_df = pd.DataFrame(trndf)\n",
    "    \n",
    "    # Compute median speed ignoring non-numeric values\n",
    "    speed_values = [s for s in speed_values if isinstance(s, (int, float))]\n",
    "    median_speed = np.median(speed_values) if speed_values else None\n",
    "    \n",
    "    # Replace values in the speed column\n",
    "    trn_df['speed'] = trn_df['speed'].apply(\n",
    "        lambda x: 1 if x == 'Single' else (median_speed if x == 'Speed' or (isinstance(x, str) and x.isdigit()) else x)\n",
    "    )\n",
    "\n",
    "    # Concatenate with the original DataFrame\n",
    "    newdf = pd.concat([newdf, trn_df], axis=1)\n",
    "    \n",
    "    return newdf\n",
    "\n",
    "# Apply the transformation\n",
    "newdf = transform_transmission(newdf)\n",
    "print(newdf.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "c02f5b85",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-02T15:24:55.785326Z",
     "iopub.status.busy": "2024-09-02T15:24:55.784896Z",
     "iopub.status.idle": "2024-09-02T15:24:55.790119Z",
     "shell.execute_reply": "2024-09-02T15:24:55.789054Z"
    },
    "papermill": {
     "duration": 0.020579,
     "end_time": "2024-09-02T15:24:55.792272",
     "exception": false,
     "start_time": "2024-09-02T15:24:55.771693",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def concatter(df,to_concat):\n",
    "    cdf = pd.concat([df, to_concat], axis=1)\n",
    "    return cdf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "781a0d62",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-02T15:24:55.817763Z",
     "iopub.status.busy": "2024-09-02T15:24:55.817330Z",
     "iopub.status.idle": "2024-09-02T15:24:55.822788Z",
     "shell.execute_reply": "2024-09-02T15:24:55.821817Z"
    },
    "papermill": {
     "duration": 0.020571,
     "end_time": "2024-09-02T15:24:55.824908",
     "exception": false,
     "start_time": "2024-09-02T15:24:55.804337",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def drop_duplicate_columns(df):\n",
    "    df = df.loc[:, ~df.columns.duplicated()]\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "a4f7d7fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-02T15:24:55.850702Z",
     "iopub.status.busy": "2024-09-02T15:24:55.850289Z",
     "iopub.status.idle": "2024-09-02T15:24:55.855419Z",
     "shell.execute_reply": "2024-09-02T15:24:55.854272Z"
    },
    "papermill": {
     "duration": 0.020451,
     "end_time": "2024-09-02T15:24:55.857541",
     "exception": false,
     "start_time": "2024-09-02T15:24:55.837090",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "cols_to_drop = ['id','model','engine','transmission','others','speed']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "bf35a719",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-02T15:24:55.884240Z",
     "iopub.status.busy": "2024-09-02T15:24:55.882855Z",
     "iopub.status.idle": "2024-09-02T15:24:55.927368Z",
     "shell.execute_reply": "2024-09-02T15:24:55.926191Z"
    },
    "papermill": {
     "duration": 0.060433,
     "end_time": "2024-09-02T15:24:55.930001",
     "exception": false,
     "start_time": "2024-09-02T15:24:55.869568",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "newdf = newdf.drop(columns = cols_to_drop)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "96675596",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-02T15:24:55.955861Z",
     "iopub.status.busy": "2024-09-02T15:24:55.955429Z",
     "iopub.status.idle": "2024-09-02T15:24:56.053001Z",
     "shell.execute_reply": "2024-09-02T15:24:56.051809Z"
    },
    "papermill": {
     "duration": 0.11308,
     "end_time": "2024-09-02T15:24:56.055301",
     "exception": false,
     "start_time": "2024-09-02T15:24:55.942221",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "brand              0\n",
       "model_year         0\n",
       "milage             0\n",
       "fuel_type       5083\n",
       "ext_col            0\n",
       "int_col            0\n",
       "accident        2452\n",
       "clean_title    21419\n",
       "price              0\n",
       "power          33259\n",
       "capacity           0\n",
       "no_of_cy       37855\n",
       "mode               0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newdf.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "11aa38c5",
   "metadata": {
    "papermill": {
     "duration": 0.011806,
     "end_time": "2024-09-02T15:24:56.079279",
     "exception": false,
     "start_time": "2024-09-02T15:24:56.067473",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# final df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "dc7c9fed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-02T15:24:56.105272Z",
     "iopub.status.busy": "2024-09-02T15:24:56.104880Z",
     "iopub.status.idle": "2024-09-02T15:24:56.127690Z",
     "shell.execute_reply": "2024-09-02T15:24:56.126581Z"
    },
    "papermill": {
     "duration": 0.03872,
     "end_time": "2024-09-02T15:24:56.130072",
     "exception": false,
     "start_time": "2024-09-02T15:24:56.091352",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>brand</th>\n",
       "      <th>model_year</th>\n",
       "      <th>milage</th>\n",
       "      <th>fuel_type</th>\n",
       "      <th>ext_col</th>\n",
       "      <th>int_col</th>\n",
       "      <th>accident</th>\n",
       "      <th>clean_title</th>\n",
       "      <th>price</th>\n",
       "      <th>power</th>\n",
       "      <th>capacity</th>\n",
       "      <th>no_of_cy</th>\n",
       "      <th>mode</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>MINI</td>\n",
       "      <td>2007</td>\n",
       "      <td>213000</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>Yellow</td>\n",
       "      <td>Gray</td>\n",
       "      <td>None reported</td>\n",
       "      <td>Yes</td>\n",
       "      <td>4200</td>\n",
       "      <td>172.0</td>\n",
       "      <td>1.6</td>\n",
       "      <td>4</td>\n",
       "      <td>A/T</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Lincoln</td>\n",
       "      <td>2002</td>\n",
       "      <td>143250</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>Silver</td>\n",
       "      <td>Beige</td>\n",
       "      <td>At least 1 accident or damage reported</td>\n",
       "      <td>Yes</td>\n",
       "      <td>4999</td>\n",
       "      <td>252.0</td>\n",
       "      <td>3.9</td>\n",
       "      <td>8</td>\n",
       "      <td>A/T</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Chevrolet</td>\n",
       "      <td>2002</td>\n",
       "      <td>136731</td>\n",
       "      <td>E85 Flex Fuel</td>\n",
       "      <td>Blue</td>\n",
       "      <td>Gray</td>\n",
       "      <td>None reported</td>\n",
       "      <td>Yes</td>\n",
       "      <td>13900</td>\n",
       "      <td>320.0</td>\n",
       "      <td>5.3</td>\n",
       "      <td>8</td>\n",
       "      <td>A/T</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Genesis</td>\n",
       "      <td>2017</td>\n",
       "      <td>19500</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>Black</td>\n",
       "      <td>Black</td>\n",
       "      <td>None reported</td>\n",
       "      <td>Yes</td>\n",
       "      <td>45000</td>\n",
       "      <td>420.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>8</td>\n",
       "      <td>Unknown</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Mercedes-Benz</td>\n",
       "      <td>2021</td>\n",
       "      <td>7388</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>Black</td>\n",
       "      <td>Beige</td>\n",
       "      <td>None reported</td>\n",
       "      <td>Yes</td>\n",
       "      <td>97500</td>\n",
       "      <td>208.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4</td>\n",
       "      <td>A/T</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>188528</th>\n",
       "      <td>Cadillac</td>\n",
       "      <td>2017</td>\n",
       "      <td>49000</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>White</td>\n",
       "      <td>Beige</td>\n",
       "      <td>None reported</td>\n",
       "      <td>Yes</td>\n",
       "      <td>27500</td>\n",
       "      <td>420.0</td>\n",
       "      <td>6.2</td>\n",
       "      <td>8</td>\n",
       "      <td>Unknown</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>188529</th>\n",
       "      <td>Mercedes-Benz</td>\n",
       "      <td>2018</td>\n",
       "      <td>28600</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>White</td>\n",
       "      <td>Black</td>\n",
       "      <td>At least 1 accident or damage reported</td>\n",
       "      <td>Yes</td>\n",
       "      <td>30000</td>\n",
       "      <td>385.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>6</td>\n",
       "      <td>A/T</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>188530</th>\n",
       "      <td>Mercedes-Benz</td>\n",
       "      <td>2021</td>\n",
       "      <td>13650</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>White</td>\n",
       "      <td>Black</td>\n",
       "      <td>None reported</td>\n",
       "      <td>Yes</td>\n",
       "      <td>86900</td>\n",
       "      <td>469.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>8</td>\n",
       "      <td>A/T</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>188531</th>\n",
       "      <td>Audi</td>\n",
       "      <td>2022</td>\n",
       "      <td>13895</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>Daytona Gray Pearl Effect</td>\n",
       "      <td>Black</td>\n",
       "      <td>None reported</td>\n",
       "      <td>NaN</td>\n",
       "      <td>84900</td>\n",
       "      <td>None</td>\n",
       "      <td>3.8179007879347084</td>\n",
       "      <td>None</td>\n",
       "      <td>Automatic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>188532</th>\n",
       "      <td>Porsche</td>\n",
       "      <td>2016</td>\n",
       "      <td>59500</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>White</td>\n",
       "      <td>Black</td>\n",
       "      <td>None reported</td>\n",
       "      <td>Yes</td>\n",
       "      <td>28995</td>\n",
       "      <td>252.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4</td>\n",
       "      <td>Unknown</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>188533 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                brand  model_year  milage      fuel_type  \\\n",
       "0                MINI        2007  213000       Gasoline   \n",
       "1             Lincoln        2002  143250       Gasoline   \n",
       "2           Chevrolet        2002  136731  E85 Flex Fuel   \n",
       "3             Genesis        2017   19500       Gasoline   \n",
       "4       Mercedes-Benz        2021    7388       Gasoline   \n",
       "...               ...         ...     ...            ...   \n",
       "188528       Cadillac        2017   49000       Gasoline   \n",
       "188529  Mercedes-Benz        2018   28600       Gasoline   \n",
       "188530  Mercedes-Benz        2021   13650       Gasoline   \n",
       "188531           Audi        2022   13895       Gasoline   \n",
       "188532        Porsche        2016   59500       Gasoline   \n",
       "\n",
       "                          ext_col int_col  \\\n",
       "0                          Yellow    Gray   \n",
       "1                          Silver   Beige   \n",
       "2                            Blue    Gray   \n",
       "3                           Black   Black   \n",
       "4                           Black   Beige   \n",
       "...                           ...     ...   \n",
       "188528                      White   Beige   \n",
       "188529                      White   Black   \n",
       "188530                      White   Black   \n",
       "188531  Daytona Gray Pearl Effect   Black   \n",
       "188532                      White   Black   \n",
       "\n",
       "                                      accident clean_title  price  power  \\\n",
       "0                                None reported         Yes   4200  172.0   \n",
       "1       At least 1 accident or damage reported         Yes   4999  252.0   \n",
       "2                                None reported         Yes  13900  320.0   \n",
       "3                                None reported         Yes  45000  420.0   \n",
       "4                                None reported         Yes  97500  208.0   \n",
       "...                                        ...         ...    ...    ...   \n",
       "188528                           None reported         Yes  27500  420.0   \n",
       "188529  At least 1 accident or damage reported         Yes  30000  385.0   \n",
       "188530                           None reported         Yes  86900  469.0   \n",
       "188531                           None reported         NaN  84900   None   \n",
       "188532                           None reported         Yes  28995  252.0   \n",
       "\n",
       "                  capacity no_of_cy       mode  \n",
       "0                      1.6        4        A/T  \n",
       "1                      3.9        8        A/T  \n",
       "2                      5.3        8        A/T  \n",
       "3                      5.0        8    Unknown  \n",
       "4                      2.0        4        A/T  \n",
       "...                    ...      ...        ...  \n",
       "188528                 6.2        8    Unknown  \n",
       "188529                 3.0        6        A/T  \n",
       "188530                 4.0        8        A/T  \n",
       "188531  3.8179007879347084     None  Automatic  \n",
       "188532                 2.0        4    Unknown  \n",
       "\n",
       "[188533 rows x 13 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newdf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "184af4f6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-02T15:24:56.157356Z",
     "iopub.status.busy": "2024-09-02T15:24:56.156337Z",
     "iopub.status.idle": "2024-09-02T15:24:56.161605Z",
     "shell.execute_reply": "2024-09-02T15:24:56.160492Z"
    },
    "papermill": {
     "duration": 0.021642,
     "end_time": "2024-09-02T15:24:56.164296",
     "exception": false,
     "start_time": "2024-09-02T15:24:56.142654",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def column_dropper(df, columns):\n",
    "    return df.drop(columns=columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "2f655081",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-02T15:24:56.190900Z",
     "iopub.status.busy": "2024-09-02T15:24:56.190476Z",
     "iopub.status.idle": "2024-09-02T15:24:56.274676Z",
     "shell.execute_reply": "2024-09-02T15:24:56.273791Z"
    },
    "papermill": {
     "duration": 0.100429,
     "end_time": "2024-09-02T15:24:56.277240",
     "exception": false,
     "start_time": "2024-09-02T15:24:56.176811",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "newdf['power'] = newdf['power'].astype('float')\n",
    "newdf['capacity'] = newdf['capacity'].astype('float')\n",
    "newdf['no_of_cy'] = newdf['no_of_cy'].astype('float')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "589db29a",
   "metadata": {
    "papermill": {
     "duration": 0.012176,
     "end_time": "2024-09-02T15:24:56.302798",
     "exception": false,
     "start_time": "2024-09-02T15:24:56.290622",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Pipe "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "74bd121d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-02T15:24:56.329926Z",
     "iopub.status.busy": "2024-09-02T15:24:56.329084Z",
     "iopub.status.idle": "2024-09-02T15:24:56.334270Z",
     "shell.execute_reply": "2024-09-02T15:24:56.333216Z"
    },
    "papermill": {
     "duration": 0.021104,
     "end_time": "2024-09-02T15:24:56.336417",
     "exception": false,
     "start_time": "2024-09-02T15:24:56.315313",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def encode_labels(df, columns):\n",
    "    le = LabelEncoder()\n",
    "    for col in columns:\n",
    "        df[col] = le.fit_transform(df[col])\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "91c3cb83",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-02T15:24:56.364226Z",
     "iopub.status.busy": "2024-09-02T15:24:56.363463Z",
     "iopub.status.idle": "2024-09-02T15:24:56.368619Z",
     "shell.execute_reply": "2024-09-02T15:24:56.367627Z"
    },
    "papermill": {
     "duration": 0.021335,
     "end_time": "2024-09-02T15:24:56.370655",
     "exception": false,
     "start_time": "2024-09-02T15:24:56.349320",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "columns_to_encode = [\n",
    "    'brand',\n",
    "    'milage',\n",
    "    'fuel_type',\n",
    "    'ext_col',\n",
    "    'int_col',\n",
    "    'accident',\n",
    "    'clean_title',\n",
    "    'mode',\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "add789c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-02T15:24:56.397352Z",
     "iopub.status.busy": "2024-09-02T15:24:56.396897Z",
     "iopub.status.idle": "2024-09-02T15:24:56.403492Z",
     "shell.execute_reply": "2024-09-02T15:24:56.402404Z"
    },
    "papermill": {
     "duration": 0.022979,
     "end_time": "2024-09-02T15:24:56.406116",
     "exception": false,
     "start_time": "2024-09-02T15:24:56.383137",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pipeline = Pipeline([\n",
    "    ('engine_transform', FunctionTransformer(transform_engine, validate=False)),  \n",
    "    ('transmission_transform', FunctionTransformer(transform_transmission, validate=False)),   \n",
    "    ('drop_columns', FunctionTransformer(lambda df: column_dropper(df, columns=cols_to_drop), validate=False)),\n",
    "    ('label_encoder', FunctionTransformer(lambda df: encode_labels(df, columns_to_encode), validate=False)), \n",
    "    ('imputer', KNNImputer(n_neighbors=2)),    \n",
    "    ('scaler', StandardScaler()) \n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "25b7439a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-02T15:24:56.433301Z",
     "iopub.status.busy": "2024-09-02T15:24:56.432482Z",
     "iopub.status.idle": "2024-09-02T15:24:56.466429Z",
     "shell.execute_reply": "2024-09-02T15:24:56.465272Z"
    },
    "papermill": {
     "duration": 0.050432,
     "end_time": "2024-09-02T15:24:56.469111",
     "exception": false,
     "start_time": "2024-09-02T15:24:56.418679",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pipe_df = pipe_df.drop(columns = ['price'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "3faf4a39",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-02T15:24:56.495637Z",
     "iopub.status.busy": "2024-09-02T15:24:56.495226Z",
     "iopub.status.idle": "2024-09-02T15:34:58.004046Z",
     "shell.execute_reply": "2024-09-02T15:34:58.002879Z"
    },
    "papermill": {
     "duration": 601.53847,
     "end_time": "2024-09-02T15:34:58.020068",
     "exception": false,
     "start_time": "2024-09-02T15:24:56.481598",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 188533/188533 [00:00<00:00, 465750.23it/s]\n",
      "100%|██████████| 188533/188533 [00:00<00:00, 540753.72it/s]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[ 4.93977707e-01, -1.55980788e+00,  1.74796771e+00, ...,\n",
       "        -1.83163572e+00, -1.62070843e+00, -5.94744080e-01],\n",
       "       [ 3.04919463e-01, -2.44305150e+00,  1.40052542e+00, ...,\n",
       "         6.78009810e-02,  1.05484903e+00, -5.94744080e-01],\n",
       "       [-8.92449411e-01, -2.44305150e+00,  1.33237757e+00, ...,\n",
       "         1.22397984e+00,  1.05484903e+00, -5.94744080e-01],\n",
       "       ...,\n",
       "       [ 8.09074779e-01,  9.13274274e-01, -1.20194023e+00, ...,\n",
       "         1.50385185e-01,  1.05484903e+00, -5.94744080e-01],\n",
       "       [-1.27056590e+00,  1.08992300e+00, -1.19188563e+00, ...,\n",
       "        -3.66747540e-16, -9.51819069e-01,  1.51459159e-02],\n",
       "       [ 1.25021068e+00,  3.00306487e-02,  7.89041022e-02, ...,\n",
       "        -1.50129890e+00, -1.62070843e+00,  2.45470590e+00]])"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "transformed_df = pipeline.fit_transform(pipe_df)\n",
    "transformed_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "cedc0854",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-02T15:34:58.108567Z",
     "iopub.status.busy": "2024-09-02T15:34:58.108140Z",
     "iopub.status.idle": "2024-09-02T15:34:58.129129Z",
     "shell.execute_reply": "2024-09-02T15:34:58.128047Z"
    },
    "papermill": {
     "duration": 0.097981,
     "end_time": "2024-09-02T15:34:58.131406",
     "exception": false,
     "start_time": "2024-09-02T15:34:58.033425",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>brand</th>\n",
       "      <th>model</th>\n",
       "      <th>model_year</th>\n",
       "      <th>milage</th>\n",
       "      <th>fuel_type</th>\n",
       "      <th>engine</th>\n",
       "      <th>transmission</th>\n",
       "      <th>ext_col</th>\n",
       "      <th>int_col</th>\n",
       "      <th>accident</th>\n",
       "      <th>clean_title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.493978</td>\n",
       "      <td>-1.559808</td>\n",
       "      <td>1.747968</td>\n",
       "      <td>-0.130419</td>\n",
       "      <td>1.349823</td>\n",
       "      <td>0.903317</td>\n",
       "      <td>0.475422</td>\n",
       "      <td>-0.358008</td>\n",
       "      <td>-1.585506</td>\n",
       "      <td>-1.831636e+00</td>\n",
       "      <td>-1.620708</td>\n",
       "      <td>-0.594744</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.304919</td>\n",
       "      <td>-2.443052</td>\n",
       "      <td>1.400525</td>\n",
       "      <td>-0.130419</td>\n",
       "      <td>0.922193</td>\n",
       "      <td>-0.627163</td>\n",
       "      <td>-1.816097</td>\n",
       "      <td>-0.358008</td>\n",
       "      <td>-0.876698</td>\n",
       "      <td>6.780098e-02</td>\n",
       "      <td>1.054849</td>\n",
       "      <td>-0.594744</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-0.892449</td>\n",
       "      <td>-2.443052</td>\n",
       "      <td>1.332378</td>\n",
       "      <td>-1.192911</td>\n",
       "      <td>-1.041414</td>\n",
       "      <td>0.903317</td>\n",
       "      <td>0.475422</td>\n",
       "      <td>-0.358008</td>\n",
       "      <td>-0.274211</td>\n",
       "      <td>1.223980e+00</td>\n",
       "      <td>1.054849</td>\n",
       "      <td>-0.594744</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.451314</td>\n",
       "      <td>0.206679</td>\n",
       "      <td>-0.994145</td>\n",
       "      <td>-0.130419</td>\n",
       "      <td>-1.119959</td>\n",
       "      <td>-0.526804</td>\n",
       "      <td>0.475422</td>\n",
       "      <td>-0.358008</td>\n",
       "      <td>0.611800</td>\n",
       "      <td>9.762272e-01</td>\n",
       "      <td>1.054849</td>\n",
       "      <td>2.454706</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.809075</td>\n",
       "      <td>0.913274</td>\n",
       "      <td>-1.482352</td>\n",
       "      <td>-0.130419</td>\n",
       "      <td>-1.119959</td>\n",
       "      <td>-0.627163</td>\n",
       "      <td>0.475422</td>\n",
       "      <td>-0.358008</td>\n",
       "      <td>-1.266542</td>\n",
       "      <td>-1.501299e+00</td>\n",
       "      <td>-1.620708</td>\n",
       "      <td>-0.594744</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>188528</th>\n",
       "      <td>-0.955469</td>\n",
       "      <td>0.206679</td>\n",
       "      <td>-0.181957</td>\n",
       "      <td>-0.130419</td>\n",
       "      <td>1.280006</td>\n",
       "      <td>-0.627163</td>\n",
       "      <td>0.475422</td>\n",
       "      <td>-0.358008</td>\n",
       "      <td>0.611800</td>\n",
       "      <td>1.967238e+00</td>\n",
       "      <td>1.054849</td>\n",
       "      <td>2.454706</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>188529</th>\n",
       "      <td>0.809075</td>\n",
       "      <td>0.383328</td>\n",
       "      <td>-0.686363</td>\n",
       "      <td>-0.130419</td>\n",
       "      <td>1.280006</td>\n",
       "      <td>-0.526804</td>\n",
       "      <td>-1.816097</td>\n",
       "      <td>-0.358008</td>\n",
       "      <td>0.301696</td>\n",
       "      <td>-6.754569e-01</td>\n",
       "      <td>-0.282930</td>\n",
       "      <td>-0.594744</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>188530</th>\n",
       "      <td>0.809075</td>\n",
       "      <td>0.913274</td>\n",
       "      <td>-1.201940</td>\n",
       "      <td>-0.130419</td>\n",
       "      <td>1.280006</td>\n",
       "      <td>-0.526804</td>\n",
       "      <td>0.475422</td>\n",
       "      <td>-0.358008</td>\n",
       "      <td>1.045945</td>\n",
       "      <td>1.503852e-01</td>\n",
       "      <td>1.054849</td>\n",
       "      <td>-0.594744</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>188531</th>\n",
       "      <td>-1.270566</td>\n",
       "      <td>1.089923</td>\n",
       "      <td>-1.191886</td>\n",
       "      <td>-0.130419</td>\n",
       "      <td>-0.657420</td>\n",
       "      <td>-0.526804</td>\n",
       "      <td>0.475422</td>\n",
       "      <td>2.793231</td>\n",
       "      <td>-0.672915</td>\n",
       "      <td>-3.667475e-16</td>\n",
       "      <td>-0.951819</td>\n",
       "      <td>0.015146</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>188532</th>\n",
       "      <td>1.250211</td>\n",
       "      <td>0.030031</td>\n",
       "      <td>0.078904</td>\n",
       "      <td>-0.130419</td>\n",
       "      <td>1.280006</td>\n",
       "      <td>-0.526804</td>\n",
       "      <td>0.475422</td>\n",
       "      <td>-0.358008</td>\n",
       "      <td>-0.876698</td>\n",
       "      <td>-1.501299e+00</td>\n",
       "      <td>-1.620708</td>\n",
       "      <td>2.454706</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>188533 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              id     brand     model  model_year    milage  fuel_type  \\\n",
       "0       0.493978 -1.559808  1.747968   -0.130419  1.349823   0.903317   \n",
       "1       0.304919 -2.443052  1.400525   -0.130419  0.922193  -0.627163   \n",
       "2      -0.892449 -2.443052  1.332378   -1.192911 -1.041414   0.903317   \n",
       "3      -0.451314  0.206679 -0.994145   -0.130419 -1.119959  -0.526804   \n",
       "4       0.809075  0.913274 -1.482352   -0.130419 -1.119959  -0.627163   \n",
       "...          ...       ...       ...         ...       ...        ...   \n",
       "188528 -0.955469  0.206679 -0.181957   -0.130419  1.280006  -0.627163   \n",
       "188529  0.809075  0.383328 -0.686363   -0.130419  1.280006  -0.526804   \n",
       "188530  0.809075  0.913274 -1.201940   -0.130419  1.280006  -0.526804   \n",
       "188531 -1.270566  1.089923 -1.191886   -0.130419 -0.657420  -0.526804   \n",
       "188532  1.250211  0.030031  0.078904   -0.130419  1.280006  -0.526804   \n",
       "\n",
       "          engine  transmission   ext_col       int_col  accident  clean_title  \n",
       "0       0.475422     -0.358008 -1.585506 -1.831636e+00 -1.620708    -0.594744  \n",
       "1      -1.816097     -0.358008 -0.876698  6.780098e-02  1.054849    -0.594744  \n",
       "2       0.475422     -0.358008 -0.274211  1.223980e+00  1.054849    -0.594744  \n",
       "3       0.475422     -0.358008  0.611800  9.762272e-01  1.054849     2.454706  \n",
       "4       0.475422     -0.358008 -1.266542 -1.501299e+00 -1.620708    -0.594744  \n",
       "...          ...           ...       ...           ...       ...          ...  \n",
       "188528  0.475422     -0.358008  0.611800  1.967238e+00  1.054849     2.454706  \n",
       "188529 -1.816097     -0.358008  0.301696 -6.754569e-01 -0.282930    -0.594744  \n",
       "188530  0.475422     -0.358008  1.045945  1.503852e-01  1.054849    -0.594744  \n",
       "188531  0.475422      2.793231 -0.672915 -3.667475e-16 -0.951819     0.015146  \n",
       "188532  0.475422     -0.358008 -0.876698 -1.501299e+00 -1.620708     2.454706  \n",
       "\n",
       "[188533 rows x 12 columns]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "transformed_df_arr = pd.DataFrame(transformed_df, columns=pipe_df.columns)\n",
    "transformed_df_arr"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a959f54c",
   "metadata": {
    "papermill": {
     "duration": 0.013439,
     "end_time": "2024-09-02T15:34:58.158710",
     "exception": false,
     "start_time": "2024-09-02T15:34:58.145271",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "6a5ee97c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-02T15:34:58.188596Z",
     "iopub.status.busy": "2024-09-02T15:34:58.188146Z",
     "iopub.status.idle": "2024-09-02T15:34:58.220407Z",
     "shell.execute_reply": "2024-09-02T15:34:58.219353Z"
    },
    "papermill": {
     "duration": 0.050879,
     "end_time": "2024-09-02T15:34:58.223384",
     "exception": false,
     "start_time": "2024-09-02T15:34:58.172505",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X = transformed_df_arr\n",
    "y = df['price']\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "bdd07b84",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-02T15:34:58.252561Z",
     "iopub.status.busy": "2024-09-02T15:34:58.252151Z",
     "iopub.status.idle": "2024-09-02T15:34:59.578101Z",
     "shell.execute_reply": "2024-09-02T15:34:59.577077Z"
    },
    "papermill": {
     "duration": 1.343279,
     "end_time": "2024-09-02T15:34:59.580456",
     "exception": false,
     "start_time": "2024-09-02T15:34:58.237177",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-1.336724530755058"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "DTR = DecisionTreeRegressor()\n",
    "DTR.fit(X_train,y_train)\n",
    "preds = DTR.predict(X_test)\n",
    "sc = r2_score(y_test,preds)\n",
    "sc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "bce8158d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-02T15:34:59.610499Z",
     "iopub.status.busy": "2024-09-02T15:34:59.610112Z",
     "iopub.status.idle": "2024-09-02T15:34:59.617357Z",
     "shell.execute_reply": "2024-09-02T15:34:59.616178Z"
    },
    "papermill": {
     "duration": 0.025086,
     "end_time": "2024-09-02T15:34:59.619573",
     "exception": false,
     "start_time": "2024-09-02T15:34:59.594487",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([44999., 14500., 67995., ..., 14999., 12500., 52500.])"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "preds"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb1023fc",
   "metadata": {
    "papermill": {
     "duration": 0.013791,
     "end_time": "2024-09-02T15:34:59.647284",
     "exception": false,
     "start_time": "2024-09-02T15:34:59.633493",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Test data submission"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "9759f026",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-02T15:34:59.676779Z",
     "iopub.status.busy": "2024-09-02T15:34:59.676337Z",
     "iopub.status.idle": "2024-09-02T15:34:59.683250Z",
     "shell.execute_reply": "2024-09-02T15:34:59.682107Z"
    },
    "papermill": {
     "duration": 0.024248,
     "end_time": "2024-09-02T15:34:59.685397",
     "exception": false,
     "start_time": "2024-09-02T15:34:59.661149",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pipeline = Pipeline([\n",
    "    ('engine_transform', FunctionTransformer(transform_engine, validate=False)),  \n",
    "    ('transmission_transform', FunctionTransformer(transform_transmission, validate=False)),   \n",
    "    ('drop_columns', FunctionTransformer(lambda test_df: column_dropper(test_df, columns=cols_to_drop), validate=False)),\n",
    "    ('label_encoder', FunctionTransformer(lambda test_df: encode_labels(test_df, columns_to_encode), validate=False)), \n",
    "    ('imputer', KNNImputer(n_neighbors=2)),    \n",
    "    ('scaler', StandardScaler()) \n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "b646d95f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-02T15:34:59.715321Z",
     "iopub.status.busy": "2024-09-02T15:34:59.714370Z",
     "iopub.status.idle": "2024-09-02T15:35:00.229998Z",
     "shell.execute_reply": "2024-09-02T15:35:00.228583Z"
    },
    "papermill": {
     "duration": 0.533332,
     "end_time": "2024-09-02T15:35:00.232588",
     "exception": false,
     "start_time": "2024-09-02T15:34:59.699256",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "test_df = pd.read_csv('/kaggle/input/playground-series-s4e9/test.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "8011e5dd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-02T15:35:00.263009Z",
     "iopub.status.busy": "2024-09-02T15:35:00.262218Z",
     "iopub.status.idle": "2024-09-02T15:38:55.409889Z",
     "shell.execute_reply": "2024-09-02T15:38:55.408643Z"
    },
    "papermill": {
     "duration": 235.166011,
     "end_time": "2024-09-02T15:38:55.412720",
     "exception": false,
     "start_time": "2024-09-02T15:35:00.246709",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 125690/125690 [00:00<00:00, 487584.82it/s]\n",
      "100%|██████████| 125690/125690 [00:00<00:00, 552808.62it/s]\n"
     ]
    }
   ],
   "source": [
    "transformed_test_df = pipeline.fit_transform(test_df)\n",
    "preds = DTR.predict(transformed_test_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "35c76cea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-02T15:38:55.443744Z",
     "iopub.status.busy": "2024-09-02T15:38:55.443324Z",
     "iopub.status.idle": "2024-09-02T15:38:55.450437Z",
     "shell.execute_reply": "2024-09-02T15:38:55.449460Z"
    },
    "papermill": {
     "duration": 0.02493,
     "end_time": "2024-09-02T15:38:55.452540",
     "exception": false,
     "start_time": "2024-09-02T15:38:55.427610",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([17500., 72999., 53900., ..., 20000., 12500., 35900.])"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "preds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "bba1b018",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-02T15:38:55.483983Z",
     "iopub.status.busy": "2024-09-02T15:38:55.482966Z",
     "iopub.status.idle": "2024-09-02T15:38:55.543977Z",
     "shell.execute_reply": "2024-09-02T15:38:55.542856Z"
    },
    "papermill": {
     "duration": 0.079021,
     "end_time": "2024-09-02T15:38:55.546237",
     "exception": false,
     "start_time": "2024-09-02T15:38:55.467216",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>188533</td>\n",
       "      <td>43878.016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>188534</td>\n",
       "      <td>43878.016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>188535</td>\n",
       "      <td>43878.016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>188536</td>\n",
       "      <td>43878.016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>188537</td>\n",
       "      <td>43878.016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>125685</th>\n",
       "      <td>314218</td>\n",
       "      <td>43878.016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>125686</th>\n",
       "      <td>314219</td>\n",
       "      <td>43878.016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>125687</th>\n",
       "      <td>314220</td>\n",
       "      <td>43878.016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>125688</th>\n",
       "      <td>314221</td>\n",
       "      <td>43878.016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>125689</th>\n",
       "      <td>314222</td>\n",
       "      <td>43878.016</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>125690 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            id      price\n",
       "0       188533  43878.016\n",
       "1       188534  43878.016\n",
       "2       188535  43878.016\n",
       "3       188536  43878.016\n",
       "4       188537  43878.016\n",
       "...        ...        ...\n",
       "125685  314218  43878.016\n",
       "125686  314219  43878.016\n",
       "125687  314220  43878.016\n",
       "125688  314221  43878.016\n",
       "125689  314222  43878.016\n",
       "\n",
       "[125690 rows x 2 columns]"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "subs = pd.read_csv('/kaggle/input/playground-series-s4e9/sample_submission.csv')\n",
    "subs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "cc59bd99",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-02T15:38:55.577563Z",
     "iopub.status.busy": "2024-09-02T15:38:55.577169Z",
     "iopub.status.idle": "2024-09-02T15:38:55.765345Z",
     "shell.execute_reply": "2024-09-02T15:38:55.764210Z"
    },
    "papermill": {
     "duration": 0.206929,
     "end_time": "2024-09-02T15:38:55.768050",
     "exception": false,
     "start_time": "2024-09-02T15:38:55.561121",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "subs['price'] = preds\n",
    "subs.to_csv('submission.csv',index = False)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 9057646,
     "sourceId": 76728,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30761,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 849.569977,
   "end_time": "2024-09-02T15:38:56.504772",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-09-02T15:24:46.934795",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
